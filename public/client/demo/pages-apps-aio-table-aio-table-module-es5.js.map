{"version":3,"sources":["webpack:///src/app/pages/apps/aio-table/aio-table-routing.module.ts","webpack:///src/app/pages/apps/aio-table/aio-table.component.html","webpack:///src/app/pages/apps/aio-table/aio-table.component.ts","webpack:///src/app/pages/apps/aio-table/aio-table.module.ts","webpack:///src/app/pages/apps/aio-table/customer-create-update/customer-create-update.component.ts","webpack:///src/app/pages/apps/aio-table/customer-create-update/customer-create-update.component.html","webpack:///src/app/pages/apps/aio-table/customer-create-update/customer-create-update.module.ts","webpack:///src/app/pages/apps/aio-table/interfaces/customer.model.ts"],"names":["routes","path","component","data","toolbarShadowEnabled","AioTableRoutingModule","forChild","imports","exports","selection","$event","stopPropagation","AioTableComponent","dialog","layoutCtrl","subject$","data$","asObservable","columns","label","property","type","visible","cssClasses","pageSize","pageSizeOptions","searchCtrl","labels","icPhone","icMail","icMap","icEdit","icSearch","icDelete","icAdd","icFilterList","icMoreHoriz","icFolder","map","customer","getData","subscribe","customers","next","dataSource","pipe","Boolean","valueChanges","value","onFilterChange","paginator","sort","open","afterClosed","unshift","updatedCustomer","index","findIndex","existingCustomer","id","splice","deselect","forEach","c","deleteCustomer","trim","toLowerCase","filter","column","event","stopImmediatePropagation","numSelected","selected","length","numRows","isAllSelected","clear","row","select","change","provide","useValue","appearance","createCustomer","selector","templateUrl","styleUrls","animations","providers","AioTableModule","declarations","CustomerCreateUpdateComponent","defaults","dialogRef","fb","mode","icMoreVert","icClose","icPrint","icDownload","icPerson","icMyLocation","icLocationCity","icEditLocation","form","group","imageSrc","firstName","lastName","street","city","zipcode","phoneNumber","notes","updateCustomer","close","save","CustomerCreateUpdateModule","entryComponents","Customer","clientId","mail","name"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAMA,MAAM,GAAc,CACxB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE,sEAFb;AAGEC,UAAI,EAAE;AACJC,4BAAoB,EAAE;AADlB;AAHR,KADwB,CAA1B;;QAcaC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,gBAHvB,CAAC,6DAAaC,QAAb,CAAsBN,MAAtB,CAAD,CAGuB,EAFtB,4DAEsB;;;;0HAArBK,qB,EAAqB;AAAA;AAAA,kBAFtB,4DAEsB;AAAA,O;AAFV,K;;;;;sEAEXA,qB,EAAqB;cAJjC,sDAIiC;eAJxB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBN,MAAtB,CAAD,CADD;AAERQ,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKxB;;AAAkC;;AAAS;;;;;;AAEjC;;AAA4C;;AAAC;;;;;;AADvD;;AAAmC;;AACzB;;AAAqD;;AAAQ;;;;;;AADpC;;AAAA;;AACnB;;AAAA;;;;;;;;AAGlB;;AACE;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AAKN;;AACF;;AAEA;;AACE;;AACF;;AACF;;;;;;AANc;;AAAA;;AAIA;;AAAA;;;;;;;;AAkDZ;;AACE;;AAAc;AAAA;;AAAA;;AAAA,mDAAoC,IAApC;AAAwC,SAAxC;;AAId;;AACF;;;;;;AAJgB;;AAAA,mIAAmD,eAAnD,EAAmD,sDAAnD;;;;;;;;AAKhB;;AACE;;AAAc;AAAA;;AAAA;;AAAA;;AAAA,0BAAmB,QAAAC,SAAA,gBAAnB,GAA2C,IAA3C;AAA+C,SAA/C,EAAgD,OAAhD,EAAgD;AAAA;;AAAA,iBACvCC,MAAM,CAACC,eAAP,EADuC;AACf,SADjC;;AAId;;AACF;;;;;;;;AAHgB;;AAAA;;;;;;AAQhB;;;;;;AACA;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;AAOL;;AAAyE;;AAAkB;;;;;;AAAlB;;AAAA;;;;;;AACzE;;AAAiE;;AAA0B;;;;;;;;AAAjE;;AAAuC;;AAAA;;;;;;AAFnE;;AACE;;AACA;;AACF;;;;;;AAH6C;;;;;;AAD/C;;AACE;;AAIF;;;;;;AAJgB;;AAAA;;;;;;AAQd;;;;;;;;AACA;;AACE;;AACE;;AAAG;AAAA;;AAAA,iBAASD,MAAM,CAACC,eAAP,EAAT;AAAiC,SAAjC;;AAGD;;AACF;;AAEA;;AAAG;AAAA;;AAAA,iBAASD,MAAM,CAACC,eAAP,EAAT;AAAiC,SAAjC;;AAGD;;AACF;;AAEA;;AAAG;AAAA;;AAAA,iBAASD,MAAM,CAACC,eAAP,EAAT;AAAiC,SAAjC;;AAGD;;AACF;;AACF;;AACF;;;;;;AAfgB;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;;;;;AAQhB;;AAAwE;;AAAM;;;;;;;;;;AAG1E;;AAIE;;AACF;;;;;;AAJK;;AAGH;;AAAA;;;;;;AAeA;;AACE;;AAEA;;AAAM;;AAAgB;;AACxB;;;;;;AAJyC;;AAClC;;AAAA;;AAEC;;AAAA;;;;;;;;AAxBd;;AACE;;AAAK;AAAA;;AAAA,iBAASD,MAAM,CAACC,eAAP,EAAT;AAAiC,SAAjC;;AACH;;AAMA;;AAAK;AAAA;;AAAA;;AAAA,iBAAS,WAAT;AAA2B,SAA3B;;AAKH;;AACF;;AACA;;AACY;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAKV;;AAKF;;AACF;;AACF;;;;;;;;AA1BS;;AAAA;;AAWM;;AAAA;;AAIC;;AAAA;;AAIE;;AAAA;;;;;;AAYlB;;;;;;;;;;;;;;AACA;;AACE;;AAAQ;AAAA;;AAAA,iBAASD,MAAM,CAACC,eAAP,EAAT;AAAiC,SAAjC;;AAKN;;AACF;;AACF;;;;;;;;;;AANU;;AAAA,uKAAwC,mBAAxC,EAAwC,IAAxC;;AAII;;AAAA;;;;;;AAKhB;;;;;;;;AACA;;AAAI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAIQ;;;;AAFR;;;;;;;;AAaV;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEN;;AAAc;AAAA;;AAAA,iBAASD,MAAM,CAACC,eAAP,EAAT;AAAiC,SAAjC,EAAkC,eAAlC,EAAkC;AAAA;;AAAA;AAAA;AAAA,SAAlC;;AACZ;;AACF;;AACF;;;;;;AAHmD;;AAAA;;AAC/C;;AAAA;;;;;;;;AAOF;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AACA;;AAAM;;AAAM;;AACd;;AACA;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AACA;;AAAM;;AAAM;;AACd;;;;;;AANY;;AAAA;;AAIA;;AAAA;;;;;;;;QCnLHC,iBAAiB;AAkD5B,iCAAoBC,MAApB,EAAuC;AAAA;;AAAnB,aAAAA,MAAA,GAAAA,MAAA;AAhDpB,aAAAC,UAAA,GAAa,IAAI,2DAAJ,CAAgB,OAAhB,CAAb;AAEA;;;;;AAIA,aAAAC,QAAA,GAAsC,IAAI,kDAAJ,CAA8B,CAA9B,CAAtC;AACA,aAAAC,KAAA,GAAgC,KAAKD,QAAL,CAAcE,YAAd,EAAhC;AAIA,aAAAC,OAAA,GAAmC,CACjC;AAAEC,eAAK,EAAE,UAAT;AAAqBC,kBAAQ,EAAE,UAA/B;AAA2CC,cAAI,EAAE,UAAjD;AAA6DC,iBAAO,EAAE;AAAtE,SADiC,EAEjC;AAAEH,eAAK,EAAE,OAAT;AAAkBC,kBAAQ,EAAE,OAA5B;AAAqCC,cAAI,EAAE,OAA3C;AAAoDC,iBAAO,EAAE;AAA7D,SAFiC,EAGjC;AAAEH,eAAK,EAAE,MAAT;AAAiBC,kBAAQ,EAAE,MAA3B;AAAmCC,cAAI,EAAE,MAAzC;AAAiDC,iBAAO,EAAE,IAA1D;AAAgEC,oBAAU,EAAE,CAAC,aAAD;AAA5E,SAHiC,EAIjC;AAAEJ,eAAK,EAAE,YAAT;AAAuBC,kBAAQ,EAAE,WAAjC;AAA8CC,cAAI,EAAE,MAApD;AAA4DC,iBAAO,EAAE;AAArE,SAJiC,EAKjC;AAAEH,eAAK,EAAE,WAAT;AAAsBC,kBAAQ,EAAE,UAAhC;AAA4CC,cAAI,EAAE,MAAlD;AAA0DC,iBAAO,EAAE;AAAnE,SALiC,EAMjC;AAAEH,eAAK,EAAE,SAAT;AAAoBC,kBAAQ,EAAE,SAA9B;AAAyCC,cAAI,EAAE,QAA/C;AAAyDC,iBAAO,EAAE;AAAlE,SANiC,EAOjC;AAAEH,eAAK,EAAE,SAAT;AAAoBC,kBAAQ,EAAE,SAA9B;AAAyCC,cAAI,EAAE,MAA/C;AAAuDC,iBAAO,EAAE,IAAhE;AAAsEC,oBAAU,EAAE,CAAC,gBAAD,EAAmB,aAAnB;AAAlF,SAPiC,EAQjC;AAAEJ,eAAK,EAAE,QAAT;AAAmBC,kBAAQ,EAAE,QAA7B;AAAuCC,cAAI,EAAE,MAA7C;AAAqDC,iBAAO,EAAE,KAA9D;AAAqEC,oBAAU,EAAE,CAAC,gBAAD,EAAmB,aAAnB;AAAjF,SARiC,EASjC;AAAEJ,eAAK,EAAE,SAAT;AAAoBC,kBAAQ,EAAE,SAA9B;AAAyCC,cAAI,EAAE,MAA/C;AAAuDC,iBAAO,EAAE,KAAhE;AAAuEC,oBAAU,EAAE,CAAC,gBAAD,EAAmB,aAAnB;AAAnF,SATiC,EAUjC;AAAEJ,eAAK,EAAE,MAAT;AAAiBC,kBAAQ,EAAE,MAA3B;AAAmCC,cAAI,EAAE,MAAzC;AAAiDC,iBAAO,EAAE,KAA1D;AAAiEC,oBAAU,EAAE,CAAC,gBAAD,EAAmB,aAAnB;AAA7E,SAViC,EAWjC;AAAEJ,eAAK,EAAE,OAAT;AAAkBC,kBAAQ,EAAE,aAA5B;AAA2CC,cAAI,EAAE,MAAjD;AAAyDC,iBAAO,EAAE,IAAlE;AAAwEC,oBAAU,EAAE,CAAC,gBAAD,EAAmB,aAAnB;AAApF,SAXiC,EAYjC;AAAEJ,eAAK,EAAE,QAAT;AAAmBC,kBAAQ,EAAE,QAA7B;AAAuCC,cAAI,EAAE,QAA7C;AAAuDC,iBAAO,EAAE;AAAhE,SAZiC,EAajC;AAAEH,eAAK,EAAE,SAAT;AAAoBC,kBAAQ,EAAE,SAA9B;AAAyCC,cAAI,EAAE,QAA/C;AAAyDC,iBAAO,EAAE;AAAlE,SAbiC,CAAnC;AAeA,aAAAE,QAAA,GAAW,EAAX;AACA,aAAAC,eAAA,GAA4B,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,CAA5B;AAEA,aAAAhB,SAAA,GAAY,IAAI,wEAAJ,CAA6B,IAA7B,EAAmC,EAAnC,CAAZ;AACA,aAAAiB,UAAA,GAAa,IAAI,2DAAJ,EAAb;AAEA,aAAAC,MAAA,GAAS,0EAAT;AAEA,aAAAC,OAAA,GAAU,uEAAV;AACA,aAAAC,MAAA,GAAS,sEAAT;AACA,aAAAC,KAAA,GAAQ,qEAAR;AACA,aAAAC,MAAA,GAAS,sEAAT;AACA,aAAAC,QAAA,GAAW,wEAAX;AACA,aAAAC,QAAA,GAAW,wEAAX;AACA,aAAAC,KAAA,GAAQ,qEAAR;AACA,aAAAC,YAAA,GAAe,6EAAf;AACA,aAAAC,WAAA,GAAc,4EAAd;AACA,aAAAC,QAAA,GAAW,wEAAX;AAMC;;AAnD2B;AAAA;;AAyD5B;;;;AAzD4B,kCA6DlB;AACR,iBAAO,gDAAG,yEAAaC,GAAb,CAAiB,UAAAC,QAAQ;AAAA,mBAAI,IAAI,mEAAJ,CAAaA,QAAb,CAAJ;AAAA,WAAzB,CAAH,CAAP;AACD;AA/D2B;AAAA;AAAA,mCAiEjB;AAAA;;AACT,eAAKC,OAAL,GAAeC,SAAf,CAAyB,UAAAC,SAAS,EAAI;AACpC,iBAAI,CAAC3B,QAAL,CAAc4B,IAAd,CAAmBD,SAAnB;AACD,WAFD;AAIA,eAAKE,UAAL,GAAkB,IAAI,0EAAJ,EAAlB;AAEA,eAAK5B,KAAL,CAAW6B,IAAX,CACE,8DAAmBC,OAAnB,CADF,EAEEL,SAFF,CAEY,UAAAC,SAAS,EAAI;AACvB,iBAAI,CAACA,SAAL,GAAiBA,SAAjB;AACA,iBAAI,CAACE,UAAL,CAAgBzC,IAAhB,GAAuBuC,SAAvB;AACD,WALD;AAOA,eAAKhB,UAAL,CAAgBqB,YAAhB,CAA6BF,IAA7B,CACE,8EAAe,IAAf,CADF,EAEEJ,SAFF,CAEY,UAAAO,KAAK;AAAA,mBAAI,KAAI,CAACC,cAAL,CAAoBD,KAApB,CAAJ;AAAA,WAFjB;AAGD;AAlF2B;AAAA;AAAA,0CAoFV;AAChB,eAAKJ,UAAL,CAAgBM,SAAhB,GAA4B,KAAKA,SAAjC;AACA,eAAKN,UAAL,CAAgBO,IAAhB,GAAuB,KAAKA,IAA5B;AACD;AAvF2B;AAAA;AAAA,yCAyFX;AAAA;;AACf,eAAKtC,MAAL,CAAYuC,IAAZ,CAAiB,sHAAjB,EAAgDC,WAAhD,GAA8DZ,SAA9D,CAAwE,UAACF,QAAD,EAAwB;AAC9F;;;AAGA,gBAAIA,QAAJ,EAAc;AACZ;;;;AAIA,oBAAI,CAACG,SAAL,CAAeY,OAAf,CAAuB,IAAI,mEAAJ,CAAaf,QAAb,CAAvB;;AACA,oBAAI,CAACxB,QAAL,CAAc4B,IAAd,CAAmB,MAAI,CAACD,SAAxB;AACD;AACF,WAZD;AAaD;AAvG2B;AAAA;AAAA,uCAyGbH,QAzGa,EAyGO;AAAA;;AACjC,eAAK1B,MAAL,CAAYuC,IAAZ,CAAiB,sHAAjB,EAAgD;AAC9CjD,gBAAI,EAAEoC;AADwC,WAAhD,EAEGc,WAFH,GAEiBZ,SAFjB,CAE2B,UAAAc,eAAe,EAAI;AAC5C;;;AAGA,gBAAIA,eAAJ,EAAqB;AACnB;;;;AAIA,kBAAMC,KAAK,GAAG,MAAI,CAACd,SAAL,CAAee,SAAf,CAAyB,UAACC,gBAAD;AAAA,uBAAsBA,gBAAgB,CAACC,EAAjB,KAAwBJ,eAAe,CAACI,EAA9D;AAAA,eAAzB,CAAd;;AACA,oBAAI,CAACjB,SAAL,CAAec,KAAf,IAAwB,IAAI,mEAAJ,CAAaD,eAAb,CAAxB;;AACA,oBAAI,CAACxC,QAAL,CAAc4B,IAAd,CAAmB,MAAI,CAACD,SAAxB;AACD;AACF,WAfD;AAgBD;AA1H2B;AAAA;AAAA,uCA4HbH,QA5Ha,EA4HO;AACjC;;;;AAIA,eAAKG,SAAL,CAAekB,MAAf,CAAsB,KAAKlB,SAAL,CAAee,SAAf,CAAyB,UAACC,gBAAD;AAAA,mBAAsBA,gBAAgB,CAACC,EAAjB,KAAwBpB,QAAQ,CAACoB,EAAvD;AAAA,WAAzB,CAAtB,EAA2G,CAA3G;AACA,eAAKlD,SAAL,CAAeoD,QAAf,CAAwBtB,QAAxB;AACA,eAAKxB,QAAL,CAAc4B,IAAd,CAAmB,KAAKD,SAAxB;AACD;AApI2B;AAAA;AAAA,wCAsIZA,SAtIY,EAsIW;AAAA;;AACrC;;;;AAIAA,mBAAS,CAACoB,OAAV,CAAkB,UAAAC,CAAC;AAAA,mBAAI,MAAI,CAACC,cAAL,CAAoBD,CAApB,CAAJ;AAAA,WAAnB;AACD;AA5I2B;AAAA;AAAA,uCA8Ibf,KA9Ia,EA8IE;AAC5B,cAAI,CAAC,KAAKJ,UAAV,EAAsB;AACpB;AACD;;AACDI,eAAK,GAAGA,KAAK,CAACiB,IAAN,EAAR;AACAjB,eAAK,GAAGA,KAAK,CAACkB,WAAN,EAAR;AACA,eAAKtB,UAAL,CAAgBuB,MAAhB,GAAyBnB,KAAzB;AACD;AArJ2B;AAAA;AAAA,+CAuJLoB,MAvJK,EAuJGC,KAvJH,EAuJU;AACpCA,eAAK,CAAC1D,eAAN;AACA0D,eAAK,CAACC,wBAAN;AACAF,gBAAM,CAAC9C,OAAP,GAAiB,CAAC8C,MAAM,CAAC9C,OAAzB;AACD;AAED;;AA7J4B;AAAA;AAAA,wCA8JZ;AACd,cAAMiD,WAAW,GAAG,KAAK9D,SAAL,CAAe+D,QAAf,CAAwBC,MAA5C;AACA,cAAMC,OAAO,GAAG,KAAK9B,UAAL,CAAgBzC,IAAhB,CAAqBsE,MAArC;AACA,iBAAOF,WAAW,KAAKG,OAAvB;AACD;AAED;;AApK4B;AAAA;AAAA,uCAqKb;AAAA;;AACb,eAAKC,aAAL,KACE,KAAKlE,SAAL,CAAemE,KAAf,EADF,GAEE,KAAKhC,UAAL,CAAgBzC,IAAhB,CAAqB2D,OAArB,CAA6B,UAAAe,GAAG;AAAA,mBAAI,MAAI,CAACpE,SAAL,CAAeqE,MAAf,CAAsBD,GAAtB,CAAJ;AAAA,WAAhC,CAFF;AAGD;AAzK2B;AAAA;AAAA,wCA2KTrB,KA3KS,EA2KMY,MA3KN,EA2K8B;AACxD,iBAAOA,MAAM,CAAChD,QAAd;AACD;AA7K2B;AAAA;AAAA,sCA+Kd2D,MA/Kc,EA+KWF,GA/KX,EA+K0B;AACpD,cAAMrB,KAAK,GAAG,KAAKd,SAAL,CAAee,SAAf,CAAyB,UAAAM,CAAC;AAAA,mBAAIA,CAAC,KAAKc,GAAV;AAAA,WAA1B,CAAd;AACA,eAAKnC,SAAL,CAAec,KAAf,EAAsB7B,MAAtB,GAA+BoD,MAAM,CAAC/B,KAAtC;AACA,eAAKjC,QAAL,CAAc4B,IAAd,CAAmB,KAAKD,SAAxB;AACD;AAnL2B;AAAA;AAAA,4BAqDP;AACnB,iBAAO,KAAKxB,OAAL,CAAaiD,MAAb,CAAoB,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAAC9C,OAAX;AAAA,WAA1B,EAA8CgB,GAA9C,CAAkD,UAAA8B,MAAM;AAAA,mBAAIA,MAAM,CAAChD,QAAX;AAAA,WAAxD,CAAP;AACD;AAvD2B;;AAAA;AAAA,O;;;uBAAjBR,iB,EAAiB,oI;AAAA,K;;;YAAjBA,iB;AAAiB,oC;AAAA;AAAA;0EA+CjB,wE,EAAc,I;;0EACd,8D,EAAS,I;;;;;;;;;;;;;kFAzDT,CACT;AACEoE,eAAO,EAAE,4FADX;AAEEC,gBAAQ,EAAE;AACRC,oBAAU,EAAE;AADJ;AAFZ,OADS,C;AAOV,e;AAAA,c;AAAA,g4J;AAAA;AAAA;AD9CH;;AAEE;;AACE;;AAGE;;AACE;;AAA4B;;AAAgB;;AAC5C;;AACF;;AAEA;;AACE;;AAAiC;;AAAK;;AACtC;;AAAqC;;AAAU;;AACjD;;AACF;;AACF;;AAEA;;AAIE;;AACE;;AACE;;AACE;;AACA;;AAEF;;AAEA;;AAcA;;AAME;;AACA;;AAIF;;AAEA;;AAEA;;AACE;;AACF;;AAEA;;AAME;;AACF;;AAEA;;AAAQ;AAAA,mBAAS,IAAAC,cAAA,EAAT;AAAyB,WAAzB;;AAON;;AACF;;AACF;;AAEA;;AAME;;AACE;;AAOA;;AAOF;;AAGA;;AACE;;AACA;;AAGF;;AAGA;;AAQA;;AACE;;AACA;;AAqBF;;AAGA;;AACE;;AACA;;AA6BF;;AAGA;;AACE;;AACA;;AASF;;AAEA;;AACA;;AAKF;;AAEA;;AACF;;AAEF;;AAEF;;AAEA;;AACE;;AAMF;;AAEA;;AACE;;AAUF;;;;;;AApOS;;AAAA,mHAAgD,WAAhD,EAAgD,oCAAhD;;AAKgB;;AAAA;;AAGM;;AAAA;;AAOJ;;AAAA,mHAAgD,WAAhD,EAAgD,oCAAhD;;AAOX;;AAAA;;AACA;;AAAA;;AAIH;;AAAA;;AAoBM;;AAAA;;AACF;;AAAA;;AASG;;AAAA;;AAGJ;;AAAA;;AAMI;;AAAA;;AAUA;;AAAA;;AAIP;;AAAA,0FAAQ,YAAR,EAAQ,cAAR;;AAgCS;;AAAA,2FAAwD,cAAxD,EAAwD,mBAAxD;;AAiFV;;AAAA;;AAEA;;AAAA;;AAMS;;AAAA,2GAAmC,UAAnC,EAAmC,YAAnC;;AAQsC;;AAAA;;;;;;mBCjL7C,CACV,mFADU,EAEV,8EAFU;;;AAaDvE,qBAAiB,6DAlB7B,6EAkB6B,GAAjBA,iBAAiB,CAAjB;;;;sEAAAA,iB,EAAiB;cAjB7B,uDAiB6B;eAjBnB;AACTwE,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD,CAHF;AAITC,oBAAU,EAAE,CACV,mFADU,EAEV,8EAFU,CAJH;AAQTC,mBAAS,EAAE,CACT;AACER,mBAAO,EAAE,4FADX;AAEEC,oBAAQ,EAAE;AACRC,wBAAU,EAAE;AADJ;AAFZ,WADS;AARF,S;AAiBmB,Q;;;;;;gBAY3B;;;gBAmCA,uD;iBAAU,wE,EAAc;AAAE,sBAAQ;AAAV,W;;;gBACxB,uD;iBAAU,8D,EAAS;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AChGtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAiDaO,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,gBAvBhB,CACP,4DADO,EAEP,+EAFO,EAGP,+FAHO,EAIP,qEAJO,EAKP,gGALO,EAMP,gHANO,EAOP,8EAPO,EAQP,sEARO,EASP,qEATO,EAUP,6EAVO,EAWP,qEAXO,EAYP,yEAZO,EAaP,qEAbO,EAcP,oEAdO,EAeP,2DAfO,EAgBP,2EAhBO,EAiBP,mEAjBO,EAkBP,2FAlBO,EAmBP,yEAnBO,EAoBP,sFApBO,CAuBgB;;;;0HAAdA,c,EAAc;AAAA,uBAxBV,sEAwBU;AAxBO,kBAE9B,4DAF8B,EAG9B,+EAH8B,EAI9B,+FAJ8B,EAK9B,qEAL8B,EAM9B,gGAN8B,EAO9B,gHAP8B,EAQ9B,8EAR8B,EAS9B,sEAT8B,EAU9B,qEAV8B,EAW9B,6EAX8B,EAY9B,qEAZ8B,EAa9B,yEAb8B,EAc9B,qEAd8B,EAe9B,oEAf8B,EAgB9B,2DAhB8B,EAiB9B,2EAjB8B,EAkB9B,mEAlB8B,EAmB9B,2FAnB8B,EAoB9B,yEApB8B,EAqB9B,sFArB8B;AAwBP,O;AAHF,K;;;;;sEAGZA,c,EAAc;cAzB1B,sDAyB0B;eAzBjB;AACRC,sBAAY,EAAE,CAAC,sEAAD,CADN;AAERnF,iBAAO,EAAE,CACP,4DADO,EAEP,+EAFO,EAGP,+FAHO,EAIP,qEAJO,EAKP,gGALO,EAMP,gHANO,EAOP,8EAPO,EAQP,sEARO,EASP,qEATO,EAUP,6EAVO,EAWP,qEAXO,EAYP,yEAZO,EAaP,qEAbO,EAcP,oEAdO,EAeP,2DAfO,EAgBP,2EAhBO,EAiBP,mEAjBO,EAkBP,2FAlBO,EAmBP,yEAnBO,EAoBP,sFApBO;AAFD,S;AAyBiB,Q;;;;;;;;;;;;;;;;;;ACjwC;;;;;;AAExC;;AAEkB;;AAAoE;;;;;;AAApE;;AAAA;;;;;;AAClB;;AAEkB;;AAAY;;;;;;AAoE9B;;AAAwE;;AAAe;;;;;;AACvF;;AAAwE;;AAAe;;;;QD1D9EoF,6B;AAoBX,6CAA4CC,QAA5C,EACoBC,SADpB,EAEoBC,EAFpB,EAEqC;AAAA;;AAFO,aAAAF,QAAA,GAAAA,QAAA;AACxB,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAC,EAAA,GAAAA,EAAA;AAjBpB,aAAAC,IAAA,GAA4B,QAA5B;AAEA,aAAAC,UAAA,GAAa,0EAAb;AACA,aAAAC,OAAA,GAAU,sEAAV;AAEA,aAAAC,OAAA,GAAU,sEAAV;AACA,aAAAC,UAAA,GAAa,+EAAb;AACA,aAAAlE,QAAA,GAAW,uEAAX;AAEA,aAAAmE,QAAA,GAAW,uEAAX;AACA,aAAAC,YAAA,GAAe,4EAAf;AACA,aAAAC,cAAA,GAAiB,+EAAjB;AACA,aAAAC,cAAA,GAAiB,+EAAjB;AACA,aAAA3E,OAAA,GAAU,sEAAV;AAKC;;;;mCAEU;AACT,cAAI,KAAKgE,QAAT,EAAmB;AACjB,iBAAKG,IAAL,GAAY,QAAZ;AACD,WAFD,MAEO;AACL,iBAAKH,QAAL,GAAgB,EAAhB;AACD;;AAED,eAAKY,IAAL,GAAY,KAAKV,EAAL,CAAQW,KAAR,CAAc;AACxB9C,cAAE,EAAE,CAACgC,6BAA6B,CAAChC,EAA9B,EAAD,CADoB;AAExB+C,oBAAQ,EAAE,KAAKd,QAAL,CAAcc,QAFA;AAGxBC,qBAAS,EAAE,CAAC,KAAKf,QAAL,CAAce,SAAd,IAA2B,EAA5B,CAHa;AAIxBC,oBAAQ,EAAE,CAAC,KAAKhB,QAAL,CAAcgB,QAAd,IAA0B,EAA3B,CAJc;AAKxBC,kBAAM,EAAE,KAAKjB,QAAL,CAAciB,MAAd,IAAwB,EALR;AAMxBC,gBAAI,EAAE,KAAKlB,QAAL,CAAckB,IAAd,IAAsB,EANJ;AAOxBC,mBAAO,EAAE,KAAKnB,QAAL,CAAcmB,OAAd,IAAyB,EAPV;AAQxBC,uBAAW,EAAE,KAAKpB,QAAL,CAAcoB,WAAd,IAA6B,EARlB;AASxBC,iBAAK,EAAE,KAAKrB,QAAL,CAAcqB,KAAd,IAAuB;AATN,WAAd,CAAZ;AAWD;;;+BAEM;AACL,cAAI,KAAKlB,IAAL,KAAc,QAAlB,EAA4B;AAC1B,iBAAKZ,cAAL;AACD,WAFD,MAEO,IAAI,KAAKY,IAAL,KAAc,QAAlB,EAA4B;AACjC,iBAAKmB,cAAL;AACD;AACF;;;yCAEgB;AACf,cAAM3E,QAAQ,GAAG,KAAKiE,IAAL,CAAUxD,KAA3B;;AAEA,cAAI,CAACT,QAAQ,CAACmE,QAAd,EAAwB;AACtBnE,oBAAQ,CAACmE,QAAT,GAAoB,0BAApB;AACD;;AAED,eAAKb,SAAL,CAAesB,KAAf,CAAqB5E,QAArB;AACD;;;yCAEgB;AACf,cAAMA,QAAQ,GAAG,KAAKiE,IAAL,CAAUxD,KAA3B;AACAT,kBAAQ,CAACoB,EAAT,GAAc,KAAKiC,QAAL,CAAcjC,EAA5B;AAEA,eAAKkC,SAAL,CAAesB,KAAf,CAAqB5E,QAArB;AACD;;;uCAEc;AACb,iBAAO,KAAKwD,IAAL,KAAc,QAArB;AACD;;;uCAEc;AACb,iBAAO,KAAKA,IAAL,KAAc,QAArB;AACD;;;;;;AA1EM,kCAAApC,EAAA,GAAK,GAAL;;;uBAFIgC,6B,EAA6B,gEAoBpB,wEApBoB,C,EAoBL,sI,EAAA,4H;AAAA,K;;;YApBxBA,6B;AAA6B,iD;AAAA,e;AAAA,c;AAAA,q5C;AAAA;AAAA;ACpB1C;;AAAM;AAAA,mBAAY,IAAAyB,IAAA,EAAZ;AAAkB,WAAlB;;AACJ;;AACE;;AAEA;;AAGA;;AAIA;;AACE;;AACF;;AAEA;;AACE;;AACF;;AACF;;AAEA;;AAEA;;AACE;;AACE;;AACE;;AAAW;;AAAU;;AACrB;;AAEA;;AACF;;AAEA;;AACE;;AAAW;;AAAS;;AACpB;;AAEA;;AACF;;AACF;;AAEA;;AACE;;AAAW;;AAAM;;AACjB;;AAEA;;AACF;;AAEA;;AACE;;AACE;;AAAW;;AAAO;;AAClB;;AAEA;;AACF;;AAEA;;AACE;;AAAW;;AAAI;;AACf;;AAEA;;AACF;;AACF;;AAEA;;AACE;;AAAW;;AAAY;;AACvB;;AAEA;;AACF;;AAEA;;AACE;;AAAW;;AAAK;;AAChB;;AACF;;AACF;;AAEA;;AACE;;AAAkD;;AAAM;;AACxD;;AACA;;AACF;;AACF;;AAEA;;AACE;;AACE;;AACA;;AAAM;;AAAK;;AACb;;AAEA;;AACE;;AACA;;AAAM;;AAAM;;AACd;;AAEA;;AACE;;AACA;;AAAM;;AAAM;;AACd;;AACF;;;;;;AAjG0B;;AAEjB;;AAAA;;AAED;;AAAA;;AAGA;;AAAA;;AAII;;AAAA;;AACI;;AAAA;;AAIA;;AAAA;;AAYE;;AAAA;;AAOA;;AAAA;;AAQF;;AAAA;;AAQE;;AAAA;;AAOA;;AAAA;;AAQF;;AAAA;;AAWJ;;AAAA;;AACA;;AAAA;;AAME;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;;;;;;;;sED1EDzB,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACTP,kBAAQ,EAAE,4BADD;AAETC,qBAAW,EAAE,yCAFJ;AAGTC,mBAAS,EAAE,CAAC,yCAAD;AAHF,S;AAK+B,Q;;;;kBAoB3B,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;;;;;AExCtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAkCa+B,0B;;;;;YAAAA;;;;yBAAAA,0B;AAA0B,O;AAAA,gBAlB5B,CACP,4DADO,EAEP,kEAFO,EAGP,qEAHO,EAIP,wEAJO,EAKP,sEALO,EAMP,wEANO,EAOP,oEAPO,EAQP,sEARO,EASP,wEATO,EAUP,qEAVO,EAWP,oEAXO,EAYP,2EAZO,CAkB4B;;;;0HAA1BA,0B,EAA0B;AAAA,uBAJtB,gGAIsB;AAJO,kBAb1C,4DAa0C,EAZ1C,kEAY0C,EAX1C,qEAW0C,EAV1C,wEAU0C,EAT1C,sEAS0C,EAR1C,wEAQ0C,EAP1C,oEAO0C,EAN1C,sEAM0C,EAL1C,wEAK0C,EAJ1C,qEAI0C,EAH1C,oEAG0C,EAF1C,2EAE0C,CAIP;AANnB,kBAIR,gGAJQ;AAMmB,O;AAFE,K;;;;;sEAE5BA,0B,EAA0B;cAnBtC,sDAmBsC;eAnB7B;AACR9G,iBAAO,EAAE,CACP,4DADO,EAEP,kEAFO,EAGP,qEAHO,EAIP,wEAJO,EAKP,sEALO,EAMP,wEANO,EAOP,oEAPO,EAQP,sEARO,EASP,wEATO,EAUP,qEAVO,EAWP,oEAXO,EAYP,2EAZO,CADD;AAeRmF,sBAAY,EAAE,CAAC,gGAAD,CAfN;AAgBR4B,yBAAe,EAAE,CAAC,gGAAD,CAhBT;AAiBR9G,iBAAO,EAAE,CAAC,gGAAD;AAjBD,S;AAmB6B,Q;;;;;;;;;;;;;;;;;;AClCvC;AAAA;;;AAAA;AAAA;AAAA;;QAAa+G,Q;AAYX,wBAAYhF,QAAZ,EAAsB;AAAA;;AACpB,aAAKiF,QAAL,GAAgBjF,QAAQ,CAACiF,QAAzB;AACA,aAAK7D,EAAL,GAAUpB,QAAQ,CAACoB,EAAnB;AACA,aAAK+C,QAAL,GAAgBnE,QAAQ,CAACmE,QAAzB;AACA,aAAKC,SAAL,GAAiBpE,QAAQ,CAACoE,SAA1B;AACA,aAAKC,QAAL,GAAgBrE,QAAQ,CAACqE,QAAzB;AACA,aAAKC,MAAL,GAActE,QAAQ,CAACsE,MAAvB;AACA,aAAKE,OAAL,GAAexE,QAAQ,CAACwE,OAAxB;AACA,aAAKD,IAAL,GAAYvE,QAAQ,CAACuE,IAArB;AACA,aAAKE,WAAL,GAAmBzE,QAAQ,CAACyE,WAA5B;AACA,aAAKS,IAAL,GAAYlF,QAAQ,CAACkF,IAArB;AACA,aAAK9F,MAAL,GAAcY,QAAQ,CAACZ,MAAvB;AACD;;;;4BAEU;AACT,cAAI+F,IAAI,GAAG,EAAX;;AAEA,cAAI,KAAKf,SAAL,IAAkB,KAAKC,QAA3B,EAAqC;AACnCc,gBAAI,GAAG,KAAKf,SAAL,GAAiB,GAAjB,GAAuB,KAAKC,QAAnC;AACD,WAFD,MAEO,IAAI,KAAKD,SAAT,EAAoB;AACzBe,gBAAI,GAAG,KAAKf,SAAZ;AACD,WAFM,MAEA,IAAI,KAAKC,QAAT,EAAmB;AACxBc,gBAAI,GAAG,KAAKd,QAAZ;AACD;;AAED,iBAAOc,IAAP;AACD,S;0BAEQ1E,K,EAAO,CACf;;;4BAEa;AACZ,2BAAU,KAAK6D,MAAf,eAA0B,KAAKE,OAA/B,cAA0C,KAAKD,IAA/C;AACD,S;0BAEW9D,K,EAAO,CAClB","file":"pages-apps-aio-table-aio-table-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VexRoutes } from '../../../../@vex/interfaces/vex-route.interface';\r\nimport { AioTableComponent } from './aio-table.component';\r\n\r\n\r\nconst routes: VexRoutes = [\r\n  {\r\n    path: '',\r\n    component: AioTableComponent,\r\n    data: {\r\n      toolbarShadowEnabled: true\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AioTableRoutingModule {\r\n}\r\n","<vex-page-layout>\r\n\r\n  <vex-page-layout-header class=\"pb-16\" fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n    <div [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n         [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n         class=\"w-full flex flex-col sm:flex-row justify-between\">\r\n      <div>\r\n        <h1 class=\"title mt-0 mb-1\">All-In-One Table</h1>\r\n        <vex-breadcrumbs [crumbs]=\"['Apps', 'All-In-One Table']\"></vex-breadcrumbs>\r\n      </div>\r\n\r\n      <mat-button-toggle-group [formControl]=\"layoutCtrl\" class=\"mt-4 sm:mt-0\">\r\n        <mat-button-toggle value=\"boxed\">BOXED</mat-button-toggle>\r\n        <mat-button-toggle value=\"fullwidth\">FULL-WIDTH</mat-button-toggle>\r\n      </mat-button-toggle-group>\r\n    </div>\r\n  </vex-page-layout-header>\r\n\r\n  <vex-page-layout-content [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n                           [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n                           class=\"-mt-6\">\r\n\r\n    <div class=\"card overflow-auto -mt-16\">\r\n      <div class=\"bg-app-bar px-6 h-16 border-b sticky left-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <h2 class=\"title my-0 ltr:pr-4 rtl:pl-4 ltr:mr-4 rtl:ml-4 ltr:border-r rtl:border-l\" fxFlex=\"none\" fxHide.xs>\r\n          <span *ngIf=\"selection.isEmpty()\">Customers</span>\r\n          <span *ngIf=\"selection.hasValue()\">{{ selection.selected.length }}\r\n            Customer<span *ngIf=\"selection.selected.length > 1\">s</span> selected</span>\r\n        </h2>\r\n\r\n        <div *ngIf=\"selection.hasValue()\" class=\"mr-4 pr-4 border-r\" fxFlex=\"none\">\r\n          <button (click)=\"deleteCustomers(selection.selected)\"\r\n                  color=\"primary\"\r\n                  mat-icon-button\r\n                  matTooltip=\"Delete selected\"\r\n                  type=\"button\">\r\n            <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n          </button>\r\n\r\n          <button color=\"primary\" mat-icon-button matTooltip=\"Another action\" type=\"button\">\r\n            <mat-icon [icIcon]=\"icFolder\"></mat-icon>\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"bg-card rounded-full border px-4\"\r\n             fxFlex=\"400px\"\r\n             fxFlex.lt-md=\"auto\"\r\n             fxHide.xs\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"start center\">\r\n          <ic-icon [icIcon]=\"icSearch\" size=\"20px\"></ic-icon>\r\n          <input [formControl]=\"searchCtrl\"\r\n                 class=\"px-4 py-3 border-0 outline-none w-full bg-transparent\"\r\n                 placeholder=\"Search...\"\r\n                 type=\"search\">\r\n        </div>\r\n\r\n        <span fxFlex></span>\r\n\r\n        <button class=\"ml-4\" fxFlex=\"none\" fxHide.gt-xs mat-icon-button type=\"button\">\r\n          <mat-icon [icIcon]=\"icSearch\"></mat-icon>\r\n        </button>\r\n\r\n        <button [matMenuTriggerFor]=\"columnFilterMenu\"\r\n                class=\"ml-4\"\r\n                fxFlex=\"none\"\r\n                mat-icon-button\r\n                matTooltip=\"Filter Columns\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icFilterList\"></mat-icon>\r\n        </button>\r\n\r\n        <button (click)=\"createCustomer()\"\r\n                class=\"ml-4\"\r\n                color=\"primary\"\r\n                fxFlex=\"none\"\r\n                mat-mini-fab\r\n                matTooltip=\"Add Customer\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icAdd\"></mat-icon>\r\n        </button>\r\n      </div>\r\n\r\n      <table @stagger [dataSource]=\"dataSource\" class=\"w-full\" mat-table matSort>\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n              The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n        <!-- Checkbox Column -->\r\n        <ng-container matColumnDef=\"checkbox\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                          [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" class=\"w-4\" mat-cell>\r\n            <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\r\n                          (click)=\"$event.stopPropagation()\"\r\n                          [checked]=\"selection.isSelected(row)\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Image Column -->\r\n        <ng-container matColumnDef=\"image\">\r\n          <th *matHeaderCellDef mat-header-cell></th>\r\n          <td *matCellDef=\"let row\" class=\"w-8 min-w-8 pr-0\" mat-cell>\r\n            <img [src]=\"row['imageSrc']\" class=\"avatar h-8 w-8 align-middle\">\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Text Columns -->\r\n        <ng-container *ngFor=\"let column of columns; trackBy: trackByProperty\">\r\n          <ng-container *ngIf=\"column.type === 'text'\" [matColumnDef]=\"column.property\">\r\n            <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header> {{ column.label }}</th>\r\n            <td *matCellDef=\"let row\" [ngClass]=\"column.cssClasses\" mat-cell>{{ row[column.property] }}</td>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Contact Column -->\r\n        <ng-container matColumnDef=\"contact\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div class=\"flex\">\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center hover:bg-hover text-primary bg-primary-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icPhone\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-teal bg-teal-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMail\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-green bg-green-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMap\" size=\"18px\"></mat-icon>\r\n              </a>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Label Column -->\r\n        <ng-container matColumnDef=\"labels\">\r\n          <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header>Labels</th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div (click)=\"$event.stopPropagation()\" fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\r\n              <div *ngFor=\"let label of row.labels\"\r\n                   [ngClass]=\"[label.textClass, label.bgClass]\"\r\n                   class=\"rounded px-2 py-1 font-medium text-xs\"\r\n                   fxFlex=\"none\">\r\n                {{ label.text }}\r\n              </div>\r\n              <div (click)=\"labelSelect.open()\"\r\n                   class=\"text-secondary bg-base text-hint cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                <ic-icon [icon]=\"icAdd\" size=\"18px\"></ic-icon>\r\n              </div>\r\n              <mat-select #labelSelect=\"matSelect\"\r\n                          (selectionChange)=\"onLabelChange($event, row)\"\r\n                          [value]=\"row.labels\"\r\n                          class=\"invisible w-0 h-0 text-sm\"\r\n                          fxFlex=\"0 1 0px\"\r\n                          multiple>\r\n                <mat-option *ngFor=\"let label of labels\" [value]=\"label\">\r\n                  <div [ngClass]=\"label.previewClass\"\r\n                       class=\"h-6 w-6 align-middle ltr:mr-2 rtl:ml-2 rounded inline-block\"></div>\r\n                  <span>{{ label.text }}</span>\r\n                </mat-option>\r\n              </mat-select>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Action Column -->\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" class=\"w-10 text-secondary\" mat-cell>\r\n            <button (click)=\"$event.stopPropagation()\"\r\n                    [matMenuTriggerData]=\"{ customer: row }\"\r\n                    [matMenuTriggerFor]=\"actionsMenu\"\r\n                    mat-icon-button\r\n                    type=\"button\">\r\n              <mat-icon [icIcon]=\"icMoreHoriz\"></mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr *matHeaderRowDef=\"visibleColumns\" mat-header-row></tr>\r\n        <tr (click)=\"updateCustomer(row)\"\r\n            *matRowDef=\"let row; columns: visibleColumns;\"\r\n            @fadeInUp\r\n            class=\"hover:bg-hover trans-ease-out cursor-pointer\"\r\n            mat-row></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" [pageSize]=\"pageSize\" class=\"sticky left-0\"></mat-paginator>\r\n    </div>\r\n\r\n  </vex-page-layout-content>\r\n\r\n</vex-page-layout>\r\n\r\n<mat-menu #columnFilterMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button (click)=\"toggleColumnVisibility(column, $event)\" *ngFor=\"let column of columns\"\r\n          class=\"checkbox-item mat-menu-item\">\r\n    <mat-checkbox (click)=\"$event.stopPropagation()\" [(ngModel)]=\"column.visible\" color=\"primary\">\r\n      {{ column.label }}\r\n    </mat-checkbox>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <ng-template let-customer=\"customer\" matMenuContent>\r\n    <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icEdit\"></mat-icon>\r\n      <span>Modify</span>\r\n    </button>\r\n    <button (click)=\"deleteCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Customer } from './interfaces/customer.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TableColumn } from '../../../../@vex/interfaces/table-column.interface';\nimport { aioTableData, aioTableLabels } from '../../../../static-data/aio-table-data';\nimport { CustomerCreateUpdateComponent } from './customer-create-update/customer-create-update.component';\nimport icEdit from '@iconify/icons-ic/twotone-edit';\nimport icDelete from '@iconify/icons-ic/twotone-delete';\nimport icSearch from '@iconify/icons-ic/twotone-search';\nimport icAdd from '@iconify/icons-ic/twotone-add';\nimport icFilterList from '@iconify/icons-ic/twotone-filter-list';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport icMoreHoriz from '@iconify/icons-ic/twotone-more-horiz';\nimport icFolder from '@iconify/icons-ic/twotone-folder';\nimport { fadeInUp400ms } from '../../../../@vex/animations/fade-in-up.animation';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldDefaultOptions } from '@angular/material/form-field';\nimport { stagger40ms } from '../../../../@vex/animations/stagger.animation';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MatSelectChange } from '@angular/material/select';\nimport icPhone from '@iconify/icons-ic/twotone-phone';\nimport icMail from '@iconify/icons-ic/twotone-mail';\nimport icMap from '@iconify/icons-ic/twotone-map';\n\n\n@UntilDestroy()\n@Component({\n  selector: 'vex-aio-table',\n  templateUrl: './aio-table.component.html',\n  styleUrls: ['./aio-table.component.scss'],\n  animations: [\n    fadeInUp400ms,\n    stagger40ms\n  ],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard'\n      } as MatFormFieldDefaultOptions\n    }\n  ]\n})\nexport class AioTableComponent implements OnInit, AfterViewInit {\n\n  layoutCtrl = new FormControl('boxed');\n\n  /**\n   * Simulating a service with HTTP that returns Observables\n   * You probably want to remove this and do all requests in a service with HTTP\n   */\n  subject$: ReplaySubject<Customer[]> = new ReplaySubject<Customer[]>(1);\n  data$: Observable<Customer[]> = this.subject$.asObservable();\n  customers: Customer[];\n\n  @Input()\n  columns: TableColumn<Customer>[] = [\n    { label: 'Checkbox', property: 'checkbox', type: 'checkbox', visible: true },\n    { label: 'Image', property: 'image', type: 'image', visible: true },\n    { label: 'Name', property: 'name', type: 'text', visible: true, cssClasses: ['font-medium'] },\n    { label: 'First Name', property: 'firstName', type: 'text', visible: false },\n    { label: 'Last Name', property: 'lastName', type: 'text', visible: false },\n    { label: 'Contact', property: 'contact', type: 'button', visible: true },\n    { label: 'Address', property: 'address', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Street', property: 'street', type: 'text', visible: false, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Zipcode', property: 'zipcode', type: 'text', visible: false, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'City', property: 'city', type: 'text', visible: false, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Phone', property: 'phoneNumber', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Labels', property: 'labels', type: 'button', visible: true },\n    { label: 'Actions', property: 'actions', type: 'button', visible: true }\n  ];\n  pageSize = 10;\n  pageSizeOptions: number[] = [5, 10, 20, 50];\n  dataSource: MatTableDataSource<Customer> | null;\n  selection = new SelectionModel<Customer>(true, []);\n  searchCtrl = new FormControl();\n\n  labels = aioTableLabels;\n\n  icPhone = icPhone;\n  icMail = icMail;\n  icMap = icMap;\n  icEdit = icEdit;\n  icSearch = icSearch;\n  icDelete = icDelete;\n  icAdd = icAdd;\n  icFilterList = icFilterList;\n  icMoreHoriz = icMoreHoriz;\n  icFolder = icFolder;\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  get visibleColumns() {\n    return this.columns.filter(column => column.visible).map(column => column.property);\n  }\n\n  /**\n   * Example on how to get data and pass it to the table - usually you would want a dedicated service with a HTTP request for this\n   * We are simulating this request here.\n   */\n  getData() {\n    return of(aioTableData.map(customer => new Customer(customer)));\n  }\n\n  ngOnInit() {\n    this.getData().subscribe(customers => {\n      this.subject$.next(customers);\n    });\n\n    this.dataSource = new MatTableDataSource();\n\n    this.data$.pipe(\n      filter<Customer[]>(Boolean)\n    ).subscribe(customers => {\n      this.customers = customers;\n      this.dataSource.data = customers;\n    });\n\n    this.searchCtrl.valueChanges.pipe(\n      untilDestroyed(this)\n    ).subscribe(value => this.onFilterChange(value));\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createCustomer() {\n    this.dialog.open(CustomerCreateUpdateComponent).afterClosed().subscribe((customer: Customer) => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (customer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.customers.unshift(new Customer(customer));\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  updateCustomer(customer: Customer) {\n    this.dialog.open(CustomerCreateUpdateComponent, {\n      data: customer\n    }).afterClosed().subscribe(updatedCustomer => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (updatedCustomer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === updatedCustomer.id);\n        this.customers[index] = new Customer(updatedCustomer);\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  deleteCustomer(customer: Customer) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    this.customers.splice(this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id), 1);\n    this.selection.deselect(customer);\n    this.subject$.next(this.customers);\n  }\n\n  deleteCustomers(customers: Customer[]) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    customers.forEach(c => this.deleteCustomer(c));\n  }\n\n  onFilterChange(value: string) {\n    if (!this.dataSource) {\n      return;\n    }\n    value = value.trim();\n    value = value.toLowerCase();\n    this.dataSource.filter = value;\n  }\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  trackByProperty<T>(index: number, column: TableColumn<T>) {\n    return column.property;\n  }\n\n  onLabelChange(change: MatSelectChange, row: Customer) {\n    const index = this.customers.findIndex(c => c === row);\n    this.customers[index].labels = change.value;\n    this.subject$.next(this.customers);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AioTableRoutingModule } from './aio-table-routing.module';\nimport { AioTableComponent } from './aio-table.component';\nimport { PageLayoutModule } from '../../../../@vex/components/page-layout/page-layout.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BreadcrumbsModule } from '../../../../@vex/components/breadcrumbs/breadcrumbs.module';\nimport { CustomerCreateUpdateModule } from './customer-create-update/customer-create-update.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconModule } from '@visurel/iconify-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContainerModule } from '../../../../@vex/directives/container/container.module';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\n\n@NgModule({\n  declarations: [AioTableComponent],\n  imports: [\n    CommonModule,\n    AioTableRoutingModule,\n    PageLayoutModule,\n    FlexLayoutModule,\n    BreadcrumbsModule,\n    CustomerCreateUpdateModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    IconModule,\n    FormsModule,\n    MatTooltipModule,\n    ReactiveFormsModule,\n    ContainerModule,\n    MatSelectModule,\n    MatButtonToggleModule\n  ]\n})\nexport class AioTableModule {\n}\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Customer } from '../interfaces/customer.model';\r\nimport icMoreVert from '@iconify/icons-ic/twotone-more-vert';\r\nimport icClose from '@iconify/icons-ic/twotone-close';\r\nimport icPrint from '@iconify/icons-ic/twotone-print';\r\nimport icDownload from '@iconify/icons-ic/twotone-cloud-download';\r\nimport icDelete from '@iconify/icons-ic/twotone-delete';\r\nimport icPhone from '@iconify/icons-ic/twotone-phone';\r\nimport icPerson from '@iconify/icons-ic/twotone-person';\r\nimport icMyLocation from '@iconify/icons-ic/twotone-my-location';\r\nimport icLocationCity from '@iconify/icons-ic/twotone-location-city';\r\nimport icEditLocation from '@iconify/icons-ic/twotone-edit-location';\r\n\r\n@Component({\r\n  selector: 'vex-customer-create-update',\r\n  templateUrl: './customer-create-update.component.html',\r\n  styleUrls: ['./customer-create-update.component.scss']\r\n})\r\nexport class CustomerCreateUpdateComponent implements OnInit {\r\n\r\n  static id = 100;\r\n\r\n  form: FormGroup;\r\n  mode: 'create' | 'update' = 'create';\r\n\r\n  icMoreVert = icMoreVert;\r\n  icClose = icClose;\r\n\r\n  icPrint = icPrint;\r\n  icDownload = icDownload;\r\n  icDelete = icDelete;\r\n\r\n  icPerson = icPerson;\r\n  icMyLocation = icMyLocation;\r\n  icLocationCity = icLocationCity;\r\n  icEditLocation = icEditLocation;\r\n  icPhone = icPhone;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public defaults: any,\r\n              private dialogRef: MatDialogRef<CustomerCreateUpdateComponent>,\r\n              private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.defaults) {\r\n      this.mode = 'update';\r\n    } else {\r\n      this.defaults = {} as Customer;\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      id: [CustomerCreateUpdateComponent.id++],\r\n      imageSrc: this.defaults.imageSrc,\r\n      firstName: [this.defaults.firstName || ''],\r\n      lastName: [this.defaults.lastName || ''],\r\n      street: this.defaults.street || '',\r\n      city: this.defaults.city || '',\r\n      zipcode: this.defaults.zipcode || '',\r\n      phoneNumber: this.defaults.phoneNumber || '',\r\n      notes: this.defaults.notes || ''\r\n    });\r\n  }\r\n\r\n  save() {\r\n    if (this.mode === 'create') {\r\n      this.createCustomer();\r\n    } else if (this.mode === 'update') {\r\n      this.updateCustomer();\r\n    }\r\n  }\r\n\r\n  createCustomer() {\r\n    const customer = this.form.value;\r\n\r\n    if (!customer.imageSrc) {\r\n      customer.imageSrc = 'assets/img/avatars/1.jpg';\r\n    }\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  updateCustomer() {\r\n    const customer = this.form.value;\r\n    customer.id = this.defaults.id;\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  isCreateMode() {\r\n    return this.mode === 'create';\r\n  }\r\n\r\n  isUpdateMode() {\r\n    return this.mode === 'update';\r\n  }\r\n}\r\n","<form (ngSubmit)=\"save()\" [formGroup]=\"form\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-dialog-title>\r\n    <img *ngIf=\"form.get('imageSrc').value\" [src]=\"form.get('imageSrc').value\" class=\"avatar mr-5\">\r\n\r\n    <h2 *ngIf=\"form.get('firstName').value || form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">{{ form.get('firstName').value + ' ' + form.get('lastName').value }}</h2>\r\n    <h2 *ngIf=\"!form.get('firstName').value && !form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">New Customer</h2>\r\n\r\n    <button [matMenuTriggerFor]=\"settingsMenu\" class=\"text-secondary\" mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icMoreVert\"></mat-icon>\r\n    </button>\r\n\r\n    <button class=\"text-secondary\" mat-dialog-close mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icClose\"></mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <mat-divider class=\"-mx-6 text-border\"></mat-divider>\r\n\r\n  <mat-dialog-content fxLayout=\"column\">\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"mt-6 flex-auto\">\r\n        <mat-label>First Name</mat-label>\r\n        <input cdkFocusInitial formControlName=\"firstName\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"sm:mt-6 sm:ml-6 flex-auto\">\r\n        <mat-label>Last Name</mat-label>\r\n        <input cdkFocusInitial formControlName=\"lastName\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Street</mat-label>\r\n      <input formControlName=\"street\" matInput>\r\n\r\n      <mat-icon [icIcon]=\"icEditLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field>\r\n\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Zipcode</mat-label>\r\n        <input formControlName=\"zipcode\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icMyLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"sm:ml-6 flex-auto\">\r\n        <mat-label>City</mat-label>\r\n        <input formControlName=\"city\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icLocationCity\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Phone Number</mat-label>\r\n      <input formControlName=\"phoneNumber\" matInput>\r\n\r\n      <mat-icon [icIcon]=\"icPhone\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Notes</mat-label>\r\n      <textarea formControlName=\"notes\" matInput></textarea>\r\n    </mat-form-field>\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button mat-dialog-close type=\"button\">CANCEL</button>\r\n    <button *ngIf=\"isCreateMode()\" color=\"primary\" mat-button type=\"submit\">CREATE CUSTOMER</button>\r\n    <button *ngIf=\"isUpdateMode()\" color=\"primary\" mat-button type=\"submit\">UPDATE CUSTOMER</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n\r\n<mat-menu #settingsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icPrint\"></mat-icon>\r\n    <span>Print</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDownload\"></mat-icon>\r\n    <span>Export</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { CustomerCreateUpdateComponent } from './customer-create-update.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatMenuModule,\r\n    IconModule,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [CustomerCreateUpdateComponent],\r\n  entryComponents: [CustomerCreateUpdateComponent],\r\n  exports: [CustomerCreateUpdateComponent]\r\n})\r\nexport class CustomerCreateUpdateModule {\r\n}\r\n","export class Customer {\r\n  id: number;\r\n  imageSrc: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  street: string;\r\n  zipcode: number;\r\n  city: string;\r\n  phoneNumber: string;\r\n  mail: string;\r\n  labels: any;\r\n  clientId:string;\r\n  constructor(customer) {\r\n    this.clientId = customer.clientId;\r\n    this.id = customer.id;\r\n    this.imageSrc = customer.imageSrc;\r\n    this.firstName = customer.firstName;\r\n    this.lastName = customer.lastName;\r\n    this.street = customer.street;\r\n    this.zipcode = customer.zipcode;\r\n    this.city = customer.city;\r\n    this.phoneNumber = customer.phoneNumber;\r\n    this.mail = customer.mail;\r\n    this.labels = customer.labels;\r\n  }\r\n\r\n  get name() {\r\n    let name = '';\r\n\r\n    if (this.firstName && this.lastName) {\r\n      name = this.firstName + ' ' + this.lastName;\r\n    } else if (this.firstName) {\r\n      name = this.firstName;\r\n    } else if (this.lastName) {\r\n      name = this.lastName;\r\n    }\r\n\r\n    return name;\r\n  }\r\n\r\n  set name(value) {\r\n  }\r\n\r\n  get address() {\r\n    return `${this.street}, ${this.zipcode} ${this.city}`;\r\n  }\r\n\r\n  set address(value) {\r\n  }\r\n}\r\n"]}