{"version":3,"sources":["webpack:///node_modules/@iconify/icons-ic/baseline-close.js","webpack:///node_modules/@iconify/icons-ic/baseline-done.js","webpack:///src/app/worker/jobnew/customer-create-update/customer-create-update.component.ts","webpack:///src/app/worker/jobnew/customer-create-update/customer-create-update.component.html","webpack:///src/app/worker/jobnew/customer-create-update/customer-create-update.module.ts","webpack:///src/app/worker/jobnew/jobnew-routing.module.ts","webpack:///src/app/worker/jobnew/jobnew.component.html","webpack:///src/app/worker/jobnew/jobnew.component.ts","webpack:///src/app/worker/jobnew/jobnew.module.ts"],"names":["data","exports","__esModule","CustomerCreateUpdateComponent","defaults","dialogRef","fb","mode","icMoreVert","icClose","icPrint","icDownload","icDelete","icPerson","icMyLocation","icLocationCity","icEditLocation","icPhone","console","log","form","group","id","invoiceId","timesheetId","invoiceDate","toString","Date","invoiceDueDate","_id","createCustomer","updateCustomer","customer","value","close","save","selector","templateUrl","styleUrls","CustomerCreateUpdateModule","imports","declarations","entryComponents","routes","path","component","toolbarShadowEnabled","JobnewRoutingModule","forChild","$event","stopPropagation","JobnewComponent","dialog","authService","route","layoutCtrl","baselineDone","baselineClose","subject$","data$","asObservable","columns","label","property","type","visible","cssClasses","pageSize","pageSizeOptions","selection","searchCtrl","labels","icMail","icMap","icEdit","icSearch","icAdd","icFilterList","icMoreHoriz","icFolder","setCurrentUser","getWorkerJob","currenctUser","subscribe","clients","map","client","clientes","next","getData","dataSource","pipe","Boolean","customers","valueChanges","onFilterChange","paginator","sort","open","afterClosed","addInvoice","res","openSnackbar","unshift","updatedCustomer","updateInvoice","index","findIndex","existingCustomer","splice","deselect","forEach","c","deleteCustomer","trim","toLowerCase","filter","column","event","stopImmediatePropagation","numSelected","selected","length","numRows","isAllSelected","clear","row","select","change","provide","useValue","appearance","animations","providers","JobnewModule"],"mappings":"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","file":"worker-jobnew-jobnew-module-es5.js","sourcesContent":["var data = {\n\t\"body\": \"<path d=\\\"M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12z\\\" fill=\\\"currentColor\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","var data = {\n\t\"body\": \"<path d=\\\"M9 16.2L4.8 12l-1.4 1.4L9 19L21 7l-1.4-1.4L9 16.2z\\\" fill=\\\"currentColor\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Customer } from '../interfaces/customer.model';\r\nimport icMoreVert from '@iconify/icons-ic/twotone-more-vert';\r\nimport icClose from '@iconify/icons-ic/twotone-close';\r\nimport icPrint from '@iconify/icons-ic/twotone-print';\r\nimport icDownload from '@iconify/icons-ic/twotone-cloud-download';\r\nimport icDelete from '@iconify/icons-ic/twotone-delete';\r\nimport icPhone from '@iconify/icons-ic/twotone-phone';\r\nimport icPerson from '@iconify/icons-ic/twotone-person';\r\nimport icMyLocation from '@iconify/icons-ic/twotone-my-location';\r\nimport icLocationCity from '@iconify/icons-ic/twotone-location-city';\r\nimport icEditLocation from '@iconify/icons-ic/twotone-edit-location';\r\nimport { Invoice } from 'src/app/models/invoice.model';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'vex-customer-create-update',\r\n  templateUrl: './customer-create-update.component.html',\r\n  styleUrls: ['./customer-create-update.component.scss']\r\n})\r\nexport class CustomerCreateUpdateComponent implements OnInit {\r\n\r\n  static id = 100;\r\n\r\n  form: FormGroup;\r\n  mode: 'create' | 'update' = 'create';\r\n\r\n  icMoreVert = icMoreVert;\r\n  icClose = icClose;\r\n\r\n  icPrint = icPrint;\r\n  icDownload = icDownload;\r\n  icDelete = icDelete;\r\n\r\n  icPerson = icPerson;\r\n  icMyLocation = icMyLocation;\r\n  icLocationCity = icLocationCity;\r\n  icEditLocation = icEditLocation;\r\n  icPhone = icPhone;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public defaults: any,\r\n              private dialogRef: MatDialogRef<CustomerCreateUpdateComponent>,\r\n              private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.defaults) {\r\n      this.mode = 'update';\r\n    } else {\r\n      this.defaults = {} as Invoice;\r\n    }\r\n    console.log('>>>>>>>')\r\n    console.log(this.defaults)\r\n    this.form = this.fb.group({\r\n      id: [CustomerCreateUpdateComponent.id++],\r\n      invoiceId: this.defaults.invoiceId || '',\r\n      timesheetId: this.defaults.timesheetId || '',\r\n      invoiceDate:  formatDate(this.defaults.invoiceDate, 'yyyy-MM-dd','en' ).toString()|| new Date(),\r\n      invoiceDueDate: formatDate(this.defaults.invoiceDueDate, 'yyyy-MM-dd','en' ).toString() || new Date(),\r\n      _id:[this.defaults._id]\r\n    });\r\n    console.log(this.form)\r\n  }\r\n\r\n  save() {\r\n    if (this.mode === 'create') {\r\n      this.createCustomer();\r\n    } else if (this.mode === 'update') {\r\n      this.updateCustomer();\r\n    }\r\n  }\r\n\r\n  createCustomer() {\r\n    const customer = this.form.value;\r\n\r\n    // if (!customer.imageSrc) {\r\n    //   customer.imageSrc = 'assets/img/avatars/1.jpg';\r\n    // }\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  updateCustomer() {\r\n    const customer = this.form.value;\r\n    customer.id = this.defaults.id;\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  isCreateMode() {\r\n    return this.mode === 'create';\r\n  }\r\n\r\n  isUpdateMode() {\r\n    return this.mode === 'update';\r\n  }\r\n}\r\n","<form (ngSubmit)=\"save()\" [formGroup]=\"form\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-dialog-title>\r\n    <!-- <img *ngIf=\"form.get('imageSrc').value\" [src]=\"form.get('imageSrc').value\" class=\"avatar mr-5\"> -->\r\n\r\n    <!-- <h2 *ngIf=\"form.get('firstName').value || form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">{{ form.get('firstName').value + ' ' + form.get('lastName').value }}</h2> -->\r\n    <h2 *ngIf=\"!form.get('invoiceId').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">New Invoice</h2>\r\n        <h2 *ngIf=\"form.get('invoiceId').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">Edit Invoice</h2>\r\n    <!-- <button [matMenuTriggerFor]=\"settingsMenu\" class=\"text-secondary\" mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icMoreVert\"></mat-icon>\r\n    </button> -->\r\n\r\n    <button class=\"text-secondary\" mat-dialog-close mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icClose\"></mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <mat-divider class=\"-mx-6 text-border\"></mat-divider>\r\n\r\n  <mat-dialog-content fxLayout=\"column\">\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Invoice Id</mat-label>\r\n        <input cdkFocusInitial formControlName=\"invoiceId\" matInput>\r\n        <!-- <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon> -->\r\n      </mat-form-field>\r\n    </div>\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Timesheet Id</mat-label>\r\n      <input formControlName=\"timesheetId\" matInput>\r\n\r\n      <!-- <mat-icon [icIcon]=\"icEditLocation\" class=\"mr-3\" matPrefix></mat-icon> -->\r\n    </mat-form-field>\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Invoice Date</mat-label>\r\n        <input type=\"date\" formControlName=\"invoiceDate\" matInput>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Invoice Due Date</mat-label>\r\n        <input type=\"date\" formControlName=\"invoiceDueDate\" matInput>\r\n      </mat-form-field>\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button mat-dialog-close type=\"button\">CANCEL</button>\r\n    <button *ngIf=\"isCreateMode()\" color=\"primary\" mat-button type=\"submit\">CREATE INVOICE</button>\r\n    <button *ngIf=\"isUpdateMode()\" color=\"primary\" mat-button type=\"submit\">UPDATE INVOICE</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n\r\n<mat-menu #settingsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <!-- <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icPrint\"></mat-icon>\r\n    <span>Print</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDownload\"></mat-icon>\r\n    <span>Export</span>\r\n  </button> -->\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { CustomerCreateUpdateComponent } from './customer-create-update.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatMenuModule,\r\n    IconModule,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [CustomerCreateUpdateComponent],\r\n  entryComponents: [CustomerCreateUpdateComponent],\r\n  exports: [CustomerCreateUpdateComponent]\r\n})\r\nexport class CustomerCreateUpdateModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VexRoutes } from '../../../@vex/interfaces/vex-route.interface';\r\nimport { JobnewComponent } from './jobnew.component';\r\n\r\n\r\nconst routes: VexRoutes = [\r\n  {\r\n    path: '',\r\n    component: JobnewComponent,\r\n    data: {\r\n      toolbarShadowEnabled: true\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class JobnewRoutingModule {\r\n}\r\n","<vex-page-layout>\r\n\r\n  <vex-page-layout-header class=\"pb-16\" fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n    <div [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n         [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n         class=\"w-full flex flex-col sm:flex-row justify-between\">\r\n      <div>\r\n        <h1 class=\"title mt-0 mb-1\">Jobs</h1>\r\n        <!-- <vex-breadcrumbs [crumbs]=\"['admin', 'invoices']\"></vex-breadcrumbs> -->\r\n      </div>\r\n    </div>\r\n  </vex-page-layout-header>\r\n\r\n  <vex-page-layout-content [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n                           [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n                           class=\"-mt-6\">\r\n\r\n    <div class=\"card overflow-auto -mt-16\">\r\n      <div class=\"bg-app-bar px-6 h-16 border-b sticky left-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <h2 class=\"title my-0 ltr:pr-4 rtl:pl-4 ltr:mr-4 rtl:ml-4 ltr:border-r rtl:border-l\" fxFlex=\"none\" fxHide.xs>\r\n          <span *ngIf=\"selection.isEmpty()\">Jobs</span>\r\n          <span *ngIf=\"selection.hasValue()\">{{ selection.selected.length }}\r\n            Job<span *ngIf=\"selection.selected.length > 1\">s</span> selected</span>\r\n        </h2>\r\n\r\n        <!-- <div *ngIf=\"selection.hasValue()\" class=\"mr-4 pr-4 border-r\" fxFlex=\"none\">\r\n          <button (click)=\"deleteCustomers(selection.selected)\"\r\n                  color=\"primary\"\r\n                  mat-icon-button\r\n                  matTooltip=\"Delete selected\"\r\n                  type=\"button\">\r\n            <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n          </button>\r\n        </div> -->\r\n\r\n        <div class=\"bg-card rounded-full border px-4\"\r\n             fxFlex=\"400px\"\r\n             fxFlex.lt-md=\"auto\"\r\n             fxHide.xs\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"start center\">\r\n          <ic-icon [icIcon]=\"icSearch\" size=\"20px\"></ic-icon>\r\n          <input [formControl]=\"searchCtrl\"\r\n                 class=\"px-4 py-3 border-0 outline-none w-full bg-transparent\"\r\n                 placeholder=\"Search...\"\r\n                 type=\"search\">\r\n        </div>\r\n\r\n        <span fxFlex></span>\r\n\r\n        <button class=\"ml-4\" fxFlex=\"none\" fxHide.gt-xs mat-icon-button type=\"button\">\r\n          <mat-icon [icIcon]=\"icSearch\"></mat-icon>\r\n        </button>\r\n\r\n        <button [matMenuTriggerFor]=\"columnFilterMenu\"\r\n                class=\"ml-4\"\r\n                fxFlex=\"none\"\r\n                mat-icon-button\r\n                matTooltip=\"Filter Columns\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icFilterList\"></mat-icon>\r\n        </button>\r\n\r\n        <!-- <button (click)=\"createCustomer()\"\r\n                class=\"ml-4\"\r\n                color=\"primary\"\r\n                fxFlex=\"none\"\r\n                mat-mini-fab\r\n                matTooltip=\"Add Customer\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icAdd\"></mat-icon>\r\n        </button> -->\r\n      </div>\r\n\r\n      <table @stagger [dataSource]=\"dataSource\" class=\"w-full\" mat-table matSort>\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n              The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n        <!-- Checkbox Column -->\r\n        <!-- <ng-container matColumnDef=\"checkbox\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                          [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" class=\"w-4\" mat-cell>\r\n            <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\r\n                          (click)=\"$event.stopPropagation()\"\r\n                          [checked]=\"selection.isSelected(row)\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Image Column -->\r\n        <!-- <ng-container matColumnDef=\"image\">\r\n          <th *matHeaderCellDef mat-header-cell></th>\r\n          <td *matCellDef=\"let row\" class=\"w-8 min-w-8 pr-0\" mat-cell>\r\n            <img [src]=\"row['imageSrc']\" class=\"avatar h-8 w-8 align-middle\">\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Text Columns -->\r\n        <ng-container *ngFor=\"let column of columns; trackBy: trackByProperty\">\r\n          <ng-container *ngIf=\"column.type === 'text'\" [matColumnDef]=\"column.property\">\r\n            <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header> {{ column.label }}</th>\r\n            <td *matCellDef=\"let row\" [ngClass]=\"column.cssClasses\" mat-cell>{{ row[column.property] }}</td>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Contact Column -->\r\n        <!-- <ng-container matColumnDef=\"contact\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div class=\"flex\">\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center hover:bg-hover text-primary bg-primary-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icPhone\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-teal bg-teal-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMail\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-green bg-green-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMap\" size=\"18px\"></mat-icon>\r\n              </a>\r\n            </div>\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Label Column -->\r\n        <ng-container matColumnDef=\"status\">\r\n          <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header>Status</th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\r\n              <div\r\n                   [ngClass]=\"[row.status.textClass, row.status.bgClass]\"\r\n                   class=\"rounded px-2 py-1 font-medium text-xs\"\r\n                   fxFlex=\"none\">\r\n                {{ row.status.text }}\r\n              </div>\r\n              <!-- <div (click)=\"labelSelect.open()\" -->\r\n                <!-- <div\r\n                   class=\"text-secondary bg-base text-hint cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                <ic-icon [icon]=\"icAdd\" size=\"18px\"></ic-icon>\r\n              </div> -->\r\n              <!-- <mat-select #labelSelect=\"matSelect\"\r\n                          (selectionChange)=\"onLabelChange($event, row)\"\r\n                          [value]=\"row.status\"\r\n                          class=\"invisible w-0 h-0 text-sm\"\r\n                          fxFlex=\"0 1 0px\"\r\n                          multiple>\r\n                <mat-option *ngFor=\"let label of labels\" [value]=\"label\">\r\n                  <div [ngClass]=\"label.previewClass\"\r\n                       class=\"h-6 w-6 align-middle ltr:mr-2 rtl:ml-2 rounded inline-block\"></div>\r\n                  <span>{{ label.text }}</span>\r\n                </mat-option>\r\n              </mat-select> -->\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Action Column -->\r\n        <!-- <ng-container matColumnDef=\"actions\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" class=\"w-10 text-secondary\" mat-cell>\r\n            <button (click)=\"$event.stopPropagation()\"\r\n                    [matMenuTriggerData]=\"{ customer: row }\"\r\n                    [matMenuTriggerFor]=\"actionsMenu\"\r\n                    mat-icon-button\r\n                    type=\"button\">\r\n              <mat-icon [icIcon]=\"icMoreHoriz\"></mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <tr *matHeaderRowDef=\"visibleColumns\" mat-header-row></tr>\r\n        <tr \r\n            *matRowDef=\"let row; columns: visibleColumns;\"\r\n            @fadeInUp\r\n            class=\"hover:bg-hover trans-ease-out cursor-pointer\"\r\n            mat-row></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" [pageSize]=\"pageSize\" class=\"sticky left-0\"></mat-paginator>\r\n    </div>\r\n\r\n  </vex-page-layout-content>\r\n\r\n</vex-page-layout>\r\n\r\n<mat-menu #columnFilterMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button (click)=\"toggleColumnVisibility(column, $event)\" *ngFor=\"let column of columns\"\r\n          class=\"checkbox-item mat-menu-item\">\r\n    <mat-checkbox (click)=\"$event.stopPropagation()\" [(ngModel)]=\"column.visible\" color=\"primary\">\r\n      {{ column.label }}\r\n    </mat-checkbox>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <ng-template let-customer=\"customer\" matMenuContent>\r\n    <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"baselineDone\"></mat-icon>\r\n      <span>Accept</span>\r\n    </button>\r\n    <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"baselineClose\"></mat-icon>\r\n      <span>Decline</span>\r\n    </button>\r\n    <!-- <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icEdit\"></mat-icon>\r\n      <span>Modify</span>\r\n    </button>\r\n    <button (click)=\"deleteCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n      <span>Delete</span>\r\n    </button> -->\r\n    <!-- <button (click)=\"pdfCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icPrint\"></mat-icon>\r\n      <span>Pdf</span>\r\n    </button> -->\r\n  </ng-template>\r\n</mat-menu>\r\n","import { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Customer } from './interfaces/customer.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TableColumn } from '../../../@vex/interfaces/table-column.interface';\nimport { aioTableData, aioTableLabels } from '../../../static-data/aio-table-data';\nimport { CustomerCreateUpdateComponent } from './customer-create-update/customer-create-update.component';\nimport icEdit from '@iconify/icons-ic/twotone-edit';\nimport baselineDone from '@iconify/icons-ic/baseline-done';\nimport baselineClose from '@iconify/icons-ic/baseline-close';\nimport icDelete from '@iconify/icons-ic/twotone-delete';\nimport icSearch from '@iconify/icons-ic/twotone-search';\nimport icAdd from '@iconify/icons-ic/twotone-add';\nimport icFilterList from '@iconify/icons-ic/twotone-filter-list';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport icMoreHoriz from '@iconify/icons-ic/twotone-more-horiz';\nimport icFolder from '@iconify/icons-ic/twotone-folder';\nimport { fadeInUp400ms } from '../../../@vex/animations/fade-in-up.animation';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldDefaultOptions } from '@angular/material/form-field';\nimport { stagger40ms } from '../../../@vex/animations/stagger.animation';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MatSelectChange } from '@angular/material/select';\nimport icPhone from '@iconify/icons-ic/twotone-phone';\nimport icMail from '@iconify/icons-ic/twotone-mail';\nimport icMap from '@iconify/icons-ic/twotone-map';\nimport { Invoice } from 'src/app/models/invoice.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport icPrint from '@iconify/icons-ic/twotone-print';\nimport { Job } from 'src/app/client/clients-dashboard/client-job-table/interfaces/job.model';\n\n\n@UntilDestroy()\n@Component({\n  selector: 'vex-jobnew',\n  templateUrl: './jobnew.component.html',\n  styleUrls: ['./jobnew.component.scss'],\n  animations: [\n    fadeInUp400ms,\n    stagger40ms\n  ],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard'\n      } as MatFormFieldDefaultOptions\n    }\n  ]\n})\nexport class JobnewComponent implements OnInit, AfterViewInit {\n\n  layoutCtrl = new FormControl('boxed');\n  icPrint = icPrint;\n  baselineDone = baselineDone;\n  baselineClose = baselineClose;\n  /**\n   * Simulating a service with HTTP that returns Observables\n   * You probably want to remove this and do all requests in a service with HTTP\n   */\n  subject$: ReplaySubject<Job[]> = new ReplaySubject<Job[]>(1);\n  data$: Observable<Job[]> = this.subject$.asObservable();\n  customers: Job[];\n\n  @Input()\n  columns: TableColumn<Job>[] = [\n    // { label: 'Checkbox', property: 'checkbox', type: 'checkbox', visible: true },\n    { label: 'Job ID', property: 'JobId', type: 'text', visible: true, cssClasses: ['font-medium'] },\n    { label: 'Client', property: 'client', type: 'text', visible: true, cssClasses: ['font-medium'] },\n    { label: 'Department', property: 'department', type: 'text', visible: true },\n    { label: 'Shift Date', property: 'shiftDateStr', type: 'text', visible: false },\n    { label: 'Start Time', property: 'startTime', type: 'text', visible: true },\n    { label: 'End Time', property: 'endTime', type: 'text', visible: true },\n    { label: 'Worker Allocation', property: 'totalStaff', type: 'text', visible: true },\n    { label: 'Status', property: 'status', type: 'button', visible: true },\n    { label: 'ID', property: '_id', type: 'button', visible: false },\n    // { label: 'Actions', property: 'actions', type: 'button', visible: true }\n  ];\n  pageSize = 10;\n  pageSizeOptions: number[] = [5, 10, 20, 50];\n  dataSource: MatTableDataSource<Job> | null;\n  selection = new SelectionModel<Job>(true, []);\n  searchCtrl = new FormControl();\n\n  labels = aioTableLabels;\n\n  icPhone = icPhone;\n  icMail = icMail;\n  icMap = icMap;\n  icEdit = icEdit;\n  icSearch = icSearch;\n  icDelete = icDelete;\n  icAdd = icAdd;\n  icFilterList = icFilterList;\n  icMoreHoriz = icMoreHoriz;\n  icFolder = icFolder;\n  userInfo :any;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(private dialog: MatDialog,\n    private authService:AuthService,\n    private route:Router) {\n  }\n\n  get visibleColumns() {\n    return this.columns.filter(column => column.visible).map(column => column.property);\n  }\n\n  /**\n   * Example on how to get data and pass it to the table - usually you would want a dedicated service with a HTTP request for this\n   * We are simulating this request here.\n   */\n  getData() {\n    this.authService.setCurrentUser();\n    this.authService.getWorkerJob(this.authService.currenctUser['_id']).subscribe((clients)=>{\n      of(clients.map(client =>new Job(client))).subscribe(clientes =>{\n        console.log('123213123')  \n        console.log(clientes)  \n        this.subject$.next(clientes)\n      });\n    })\n  }\n\n  ngOnInit() {\n    this.getData();\n    // this.getData().subscribe(customers => {\n    //   this.subject$.next(customers);\n    // });\n\n    this.dataSource = new MatTableDataSource();\n\n    this.data$.pipe(\n      filter<Job[]>(Boolean)\n    ).subscribe(customers => {\n      this.customers = customers;\n      this.dataSource.data = customers;\n    });\n\n    this.searchCtrl.valueChanges.pipe(\n      untilDestroyed(this)\n    ).subscribe(value => this.onFilterChange(value));\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createCustomer() {\n    this.dialog.open(CustomerCreateUpdateComponent).afterClosed().subscribe((customer: Job) => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (customer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.authService.addInvoice(customer).subscribe((res)=>{\n          console.log('addInvoice')\n          this.authService.openSnackbar('Added Invoice Successfully ');\n        })\n        this.customers.unshift(new Job(customer));\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  updateCustomer(customer: Job) {\n    this.dialog.open(CustomerCreateUpdateComponent, {\n      data: customer\n    }).afterClosed().subscribe(updatedCustomer => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (updatedCustomer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.authService.updateInvoice(updatedCustomer).subscribe((res)=>{\n          console.log('updateInvoice')\n          this.authService.openSnackbar('Changed Invoice Successfully ');\n        })\n        const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === updatedCustomer.id);\n        this.customers[index] = new Job(updatedCustomer);\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  deleteCustomer(customer: Job) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    this.customers.splice(this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id), 1);\n    this.selection.deselect(customer);\n    this.subject$.next(this.customers);\n  }\n\n  deleteCustomers(customers: Job[]) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    customers.forEach(c => this.deleteCustomer(c));\n  }\n\n  onFilterChange(value: string) {\n    if (!this.dataSource) {\n      return;\n    }\n    value = value.trim();\n    value = value.toLowerCase();\n    this.dataSource.filter = value;\n  }\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  trackByProperty<T>(index: number, column: TableColumn<T>) {\n    return column.property;\n  }\n\n  onLabelChange(change: MatSelectChange, row: Job) {\n    // const index = this.customers.findIndex(c => c === row);\n    // this.customers[index].labels = change.value;\n    // this.subject$.next(this.customers);\n  }\n  // pdfCustomer(user:Job){\n  //   this.route.navigate(['/admin/invoices/pdf',user.invoiceId]);\n  // }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { JobnewRoutingModule } from './jobnew-routing.module';\nimport { JobnewComponent } from './jobnew.component';\nimport { PageLayoutModule } from '../../../@vex/components/page-layout/page-layout.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BreadcrumbsModule } from '../../../@vex/components/breadcrumbs/breadcrumbs.module';\nimport { CustomerCreateUpdateModule } from './customer-create-update/customer-create-update.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconModule } from '@visurel/iconify-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContainerModule } from '../../../@vex/directives/container/container.module';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\n\n@NgModule({\n  declarations: [JobnewComponent],\n  imports: [\n    CommonModule,\n    JobnewRoutingModule,\n    PageLayoutModule,\n    FlexLayoutModule,\n    BreadcrumbsModule,\n    CustomerCreateUpdateModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    IconModule,\n    FormsModule,\n    MatTooltipModule,\n    ReactiveFormsModule,\n    ContainerModule,\n    MatSelectModule,\n    MatButtonToggleModule\n  ]\n})\nexport class JobnewModule {\n}\n"]}