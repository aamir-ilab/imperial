{"version":3,"sources":["webpack:///src/app/client/settings/subaccounts/customer-create-update/customer-create-update.component.ts","webpack:///src/app/client/settings/subaccounts/customer-create-update/customer-create-update.component.html","webpack:///src/app/client/settings/subaccounts/customer-create-update/customer-create-update.module.ts","webpack:///src/app/client/settings/subaccounts/subaccounts-routing.module.ts","webpack:///src/app/client/settings/subaccounts/subaccounts.component.html","webpack:///src/app/client/settings/subaccounts/subaccounts.component.ts","webpack:///src/app/client/settings/subaccounts/subaccounts.module.ts"],"names":["CustomerCreateUpdateComponent","defaults","dialogRef","fb","mode","icMoreVert","icClose","icPrint","icDownload","icDelete","icPerson","icMyLocation","icLocationCity","icEditLocation","icPhone","form","group","id","emailAddress","firstName","department","clientType","clientStatus","lastName","phoneNumber","createCustomer","updateCustomer","customer","value","close","_id","save","selector","templateUrl","styleUrls","CustomerCreateUpdateModule","imports","declarations","entryComponents","exports","routes","path","component","data","toolbarShadowEnabled","SubaccountsRoutingModule","forChild","selection","$event","stopPropagation","SubaccountsComponent","dialog","authService","router","layoutCtrl","subject$","data$","asObservable","columns","label","property","type","visible","cssClasses","pageSize","pageSizeOptions","searchCtrl","labels","icMail","icMap","icEdit","icSearch","icAdd","icFilterList","icMoreHoriz","icFolder","currenctUser","setCurrentUser","currentUser","getTypeSubUsers","subscribe","clients","map","client","clientes","console","log","next","alert","navigate","getData","dataSource","pipe","Boolean","customers","valueChanges","onFilterChange","paginator","sort","open","afterClosed","parentId","register","res","openSnackbar","unshift","updatedCustomer","updateUser","index","findIndex","existingCustomer","splice","deselect","custer","forEach","c","deleteCustomer","trim","toLowerCase","filter","column","event","stopImmediatePropagation","numSelected","selected","length","numRows","isAllSelected","clear","row","select","provide","useValue","appearance","animations","providers","SubaccountsModule"],"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","file":"client-settings-subaccounts-subaccounts-module-es5.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Customer } from '../interfaces/customer.model';\r\nimport icMoreVert from '@iconify/icons-ic/twotone-more-vert';\r\nimport icClose from '@iconify/icons-ic/twotone-close';\r\nimport icPrint from '@iconify/icons-ic/twotone-print';\r\nimport icDownload from '@iconify/icons-ic/twotone-cloud-download';\r\nimport icDelete from '@iconify/icons-ic/twotone-delete';\r\nimport icPhone from '@iconify/icons-ic/twotone-phone';\r\nimport icPerson from '@iconify/icons-ic/twotone-person';\r\nimport icMyLocation from '@iconify/icons-ic/twotone-my-location';\r\nimport icLocationCity from '@iconify/icons-ic/twotone-location-city';\r\nimport icEditLocation from '@iconify/icons-ic/twotone-edit-location';\r\nimport { Client } from 'src/app/models/client.model';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'vex-customer-create-update',\r\n  templateUrl: './customer-create-update.component.html',\r\n  styleUrls: ['./customer-create-update.component.scss']\r\n})\r\nexport class CustomerCreateUpdateComponent implements OnInit {\r\n\r\n  static id = 100;\r\n\r\n  form: FormGroup;\r\n  mode: 'create' | 'update' = 'create';\r\n\r\n  icMoreVert = icMoreVert;\r\n  icClose = icClose;\r\n\r\n  icPrint = icPrint;\r\n  icDownload = icDownload;\r\n  icDelete = icDelete;\r\n\r\n  icPerson = icPerson;\r\n  icMyLocation = icMyLocation;\r\n  icLocationCity = icLocationCity;\r\n  icEditLocation = icEditLocation;\r\n  icPhone = icPhone;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public defaults: any,\r\n              private dialogRef: MatDialogRef<CustomerCreateUpdateComponent>,\r\n              private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.defaults) {\r\n      this.mode = 'update';\r\n    } else {\r\n      this.defaults = {} as Client;\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      id: [CustomerCreateUpdateComponent.id++],\r\n      emailAddress: [this.defaults.emailAddress || ''],\r\n      firstName: [this.defaults.firstName || ''],\r\n      department: [this.defaults.department || 'Housekeeping'],\r\n      clientType: [this.defaults.clientType || 'User'],\r\n      clientStatus: [this.defaults.clientStatus || 'Active'],\r\n      lastName: [this.defaults.lastName || ''],\r\n      phoneNumber: this.defaults.phoneNumber || '',\r\n    });\r\n  }\r\n\r\n  save() {\r\n    if (this.mode === 'create') {\r\n      this.createCustomer();\r\n    } else if (this.mode === 'update') {\r\n      this.updateCustomer();\r\n    }\r\n  }\r\n\r\n  createCustomer() {\r\n    const customer = this.form.value;\r\n    // if (!customer.imageSrc) {\r\n    //   customer.imageSrc = 'assets/img/avatars/1.jpg';\r\n    // }\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  updateCustomer() {\r\n    const customer = this.form.value;\r\n    customer.id = this.defaults.id;\r\n    customer._id = this.defaults._id;\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  isCreateMode() {\r\n    return this.mode === 'create';\r\n  }\r\n\r\n  isUpdateMode() {\r\n    return this.mode === 'update';\r\n  }\r\n}\r\n","<form (ngSubmit)=\"save()\" [formGroup]=\"form\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-dialog-title>\r\n    <h2 *ngIf=\"form.get('firstName').value || form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">{{ form.get('firstName').value + ' ' + form.get('lastName').value }}</h2>\r\n    <h2 *ngIf=\"!form.get('firstName').value && !form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">New Client</h2>\r\n\r\n    <!-- <button [matMenuTriggerFor]=\"settingsMenu\" class=\"text-secondary\" mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icMoreVert\"></mat-icon>\r\n    </button> -->\r\n\r\n    <button class=\"text-secondary\" mat-dialog-close mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icClose\"></mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <mat-divider class=\"-mx-6 text-border\"></mat-divider>\r\n\r\n  <mat-dialog-content fxLayout=\"column\">\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"mt-6 flex-auto\">\r\n        <mat-label>First Name</mat-label>\r\n        <input cdkFocusInitial formControlName=\"firstName\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"sm:mt-6 sm:ml-6 flex-auto\">\r\n        <mat-label>Last Name</mat-label>\r\n        <input cdkFocusInitial formControlName=\"lastName\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Email</mat-label>\r\n      <input formControlName=\"emailAddress\" matInput>\r\n\r\n      <mat-icon [icIcon]=\"icPhone\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field>\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Department</mat-label>\r\n      <!-- <input formControlName=\"department\" matInput> -->\r\n      <mat-select formControlName=\"department\">\r\n        <mat-option value=\"Housekeeping\">Housekeeping</mat-option>\r\n        <mat-option value=\"Food and Beverage\">Food and Beverage</mat-option>\r\n        <mat-option value=\"Back of House\">Back of House</mat-option>\r\n      </mat-select>\r\n      <mat-icon [icIcon]=\"icEditLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field>\r\n\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Account Type</mat-label>\r\n        <!-- <input formControlName=\"clientType\" matInput> -->\r\n        <mat-select formControlName=\"clientType\">\r\n          <mat-option value=\"User\">User</mat-option>\r\n          <mat-option value=\"Admin\">Admin</mat-option>\r\n        </mat-select>\r\n        <mat-icon [icIcon]=\"icMyLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"sm:ml-6 flex-auto\">\r\n        <mat-label>Status</mat-label>\r\n        <!-- <input formControlName=\"clientStatus\" matInput> -->\r\n        <mat-select formControlName=\"clientStatus\">\r\n          <mat-option value=\"Active\">Active</mat-option>\r\n          <mat-option value=\"Suspended\">Suspended</mat-option>\r\n        </mat-select>\r\n        <mat-icon [icIcon]=\"icLocationCity\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Phone Number</mat-label>\r\n      <input formControlName=\"phoneNumber\" matInput>\r\n\r\n      <mat-icon [icIcon]=\"icPhone\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field>\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button mat-dialog-close type=\"button\">CANCEL</button>\r\n    <button *ngIf=\"isCreateMode()\" color=\"primary\" mat-button type=\"submit\">CREATE Client</button>\r\n    <button *ngIf=\"isUpdateMode()\" color=\"primary\" mat-button type=\"submit\">UPDATE Client</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n\r\n<mat-menu #settingsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icPrint\"></mat-icon>\r\n    <span>Print</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDownload\"></mat-icon>\r\n    <span>Export</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { CustomerCreateUpdateComponent } from './customer-create-update.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatMenuModule,\r\n    IconModule,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [CustomerCreateUpdateComponent],\r\n  entryComponents: [CustomerCreateUpdateComponent],\r\n  exports: [CustomerCreateUpdateComponent]\r\n})\r\nexport class CustomerCreateUpdateModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VexRoutes } from '../../../../@vex/interfaces/vex-route.interface';\r\nimport { SubaccountsComponent } from './subaccounts.component';\r\n\r\n\r\nconst routes: VexRoutes = [\r\n  {\r\n    path: '',\r\n    component: SubaccountsComponent,\r\n    data: {\r\n      toolbarShadowEnabled: true\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SubaccountsRoutingModule {\r\n}\r\n","<vex-page-layout>\r\n\r\n  <vex-page-layout-header class=\"pb-16\" fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n    <div [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n         [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n         class=\"w-full flex flex-col sm:flex-row justify-between\">\r\n      <div>\r\n        <h1 class=\"title mt-0 mb-1\">User Manage</h1>\r\n        <!-- <vex-breadcrumbs [crumbs]=\"['Apps', 'All-In-One Table']\"></vex-breadcrumbs> -->\r\n      </div>\r\n\r\n      <!-- <mat-button-toggle-group [formControl]=\"layoutCtrl\" class=\"mt-4 sm:mt-0\">\r\n        <mat-button-toggle value=\"boxed\">BOXED</mat-button-toggle>\r\n        <mat-button-toggle value=\"fullwidth\">FULL-WIDTH</mat-button-toggle>\r\n      </mat-button-toggle-group> -->\r\n    </div>\r\n  </vex-page-layout-header>\r\n\r\n  <vex-page-layout-content [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n                           [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n                           class=\"-mt-6\">\r\n\r\n    <div class=\"card overflow-auto -mt-16\">\r\n      <div class=\"bg-app-bar px-6 h-16 border-b sticky left-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <h2 class=\"title my-0 ltr:pr-4 rtl:pl-4 ltr:mr-4 rtl:ml-4 ltr:border-r rtl:border-l\" fxFlex=\"none\" fxHide.xs>\r\n          <span *ngIf=\"selection.isEmpty()\">User Manage</span>\r\n          <span *ngIf=\"selection.hasValue()\">{{ selection.selected.length }}\r\n            User<span *ngIf=\"selection.selected.length > 1\">s</span> selected</span>\r\n        </h2>\r\n\r\n        <div *ngIf=\"selection.hasValue()\" class=\"mr-4 pr-4 border-r\" fxFlex=\"none\">\r\n          <button (click)=\"deleteCustomers(selection.selected)\"\r\n                  color=\"primary\"\r\n                  mat-icon-button\r\n                  matTooltip=\"Delete selected\"\r\n                  type=\"button\">\r\n            <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n          </button>\r\n\r\n          <!-- <button color=\"primary\" mat-icon-button matTooltip=\"Another action\" type=\"button\">\r\n            <mat-icon [icIcon]=\"icFolder\"></mat-icon>\r\n          </button> -->\r\n        </div>\r\n\r\n        <div class=\"bg-card rounded-full border px-4\"\r\n             fxFlex=\"400px\"\r\n             fxFlex.lt-md=\"auto\"\r\n             fxHide.xs\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"start center\">\r\n          <ic-icon [icIcon]=\"icSearch\" size=\"20px\"></ic-icon>\r\n          <input [formControl]=\"searchCtrl\"\r\n                 class=\"px-4 py-3 border-0 outline-none w-full bg-transparent\"\r\n                 placeholder=\"Search...\"\r\n                 type=\"search\">\r\n        </div>\r\n\r\n        <span fxFlex></span>\r\n\r\n        <button class=\"ml-4\" fxFlex=\"none\" fxHide.gt-xs mat-icon-button type=\"button\">\r\n          <mat-icon [icIcon]=\"icSearch\"></mat-icon>\r\n        </button>\r\n\r\n        <button [matMenuTriggerFor]=\"columnFilterMenu\"\r\n                class=\"ml-4\"\r\n                fxFlex=\"none\"\r\n                mat-icon-button\r\n                matTooltip=\"Filter Columns\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icFilterList\"></mat-icon>\r\n        </button>\r\n\r\n        <button (click)=\"createCustomer()\"\r\n                class=\"ml-4\"\r\n                color=\"primary\"\r\n                fxFlex=\"none\"\r\n                mat-mini-fab\r\n                matTooltip=\"Add Client\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icAdd\"></mat-icon>\r\n        </button>\r\n      </div>\r\n\r\n      <table @stagger [dataSource]=\"dataSource\" class=\"w-full\" mat-table matSort>\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n              The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n        <!-- Checkbox Column -->\r\n        <ng-container matColumnDef=\"checkbox\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                          [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" class=\"w-4\" mat-cell>\r\n            <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\r\n                          (click)=\"$event.stopPropagation()\"\r\n                          [checked]=\"selection.isSelected(row)\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Image Column -->\r\n        <!-- <ng-container matColumnDef=\"image\">\r\n          <th *matHeaderCellDef mat-header-cell></th>\r\n          <td *matCellDef=\"let row\" class=\"w-8 min-w-8 pr-0\" mat-cell>\r\n            <img [src]=\"row['imageSrc']\" class=\"avatar h-8 w-8 align-middle\">\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Text Columns -->\r\n        <ng-container *ngFor=\"let column of columns; trackBy: trackByProperty\">\r\n          <ng-container *ngIf=\"column.type === 'text'\" [matColumnDef]=\"column.property\">\r\n            <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header> {{ column.label }}</th>\r\n            <td *matCellDef=\"let row\" [ngClass]=\"column.cssClasses\" mat-cell>{{ row[column.property] }}</td>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Contact Column -->\r\n        <ng-container matColumnDef=\"contact\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div class=\"flex\">\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center hover:bg-hover text-primary bg-primary-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icPhone\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-teal bg-teal-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMail\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-green bg-green-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMap\" size=\"18px\"></mat-icon>\r\n              </a>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Label Column -->\r\n        <ng-container matColumnDef=\"clientStatus\">\r\n          <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header>Status</th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\r\n              <div *ngIf=\"row.clientStatus == 'Active'\" \r\n                   [ngClass]=\"['text-green  ', 'bg-green-light']\"\r\n                   class=\"rounded px-2 py-1 font-medium text-xs\"\r\n                   fxFlex=\"none\">\r\n                   Active\r\n              </div>\r\n              <div *ngIf=\"row.clientStatus == 'Suspended'\" \r\n                   [ngClass]=\"['text-purple', 'bg-purple-light']\"\r\n                   class=\"rounded px-2 py-1 font-medium text-xs\"\r\n                   fxFlex=\"none\">\r\n                   Suspended\r\n              </div>\r\n              <!-- <div (click)=\"labelSelect.open()\"\r\n                   class=\"text-secondary bg-base text-hint cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                <ic-icon [icon]=\"icAdd\" size=\"18px\"></ic-icon>\r\n              </div>\r\n              <mat-select #labelSelect=\"matSelect\"\r\n                          (selectionChange)=\"onLabelChange($event, row)\"\r\n                          [value]=\"row.labels\"\r\n                          class=\"invisible w-0 h-0 text-sm\"\r\n                          fxFlex=\"0 1 0px\"\r\n                          multiple>\r\n                <mat-option *ngFor=\"let label of labels\" [value]=\"label\">\r\n                  <div [ngClass]=\"label.previewClass\"\r\n                       class=\"h-6 w-6 align-middle ltr:mr-2 rtl:ml-2 rounded inline-block\"></div>\r\n                  <span>{{ label.text }}</span>\r\n                </mat-option>\r\n              </mat-select> -->\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Action Column -->\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" class=\"w-10 text-secondary\" mat-cell>\r\n            <button (click)=\"$event.stopPropagation()\"\r\n                    [matMenuTriggerData]=\"{ customer: row }\"\r\n                    [matMenuTriggerFor]=\"actionsMenu\"\r\n                    mat-icon-button\r\n                    type=\"button\">\r\n              <mat-icon [icIcon]=\"icMoreHoriz\"></mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr *matHeaderRowDef=\"visibleColumns\" mat-header-row></tr>\r\n        <tr (click)=\"updateCustomer(row)\"\r\n            *matRowDef=\"let row; columns: visibleColumns;\"\r\n            @fadeInUp\r\n            class=\"hover:bg-hover trans-ease-out cursor-pointer\"\r\n            mat-row></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" [pageSize]=\"pageSize\" class=\"sticky left-0\"></mat-paginator>\r\n    </div>\r\n\r\n  </vex-page-layout-content>\r\n\r\n</vex-page-layout>\r\n\r\n<mat-menu #columnFilterMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button (click)=\"toggleColumnVisibility(column, $event)\" *ngFor=\"let column of columns\"\r\n          class=\"checkbox-item mat-menu-item\">\r\n    <mat-checkbox (click)=\"$event.stopPropagation()\" [(ngModel)]=\"column.visible\" color=\"primary\">\r\n      {{ column.label }}\r\n    </mat-checkbox>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <ng-template let-customer=\"customer\" matMenuContent>\r\n    <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icEdit\"></mat-icon>\r\n      <span>Modify</span>\r\n    </button>\r\n    <button (click)=\"deleteCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n    <button (click)=\"transferMasterAdmin(customer)\" mat-menu-item>\r\n      <!-- <mat-icon [icIcon]=\"icDelete\"></mat-icon> -->\r\n      <span>Transfer Master Admin</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Customer } from './interfaces/customer.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TableColumn } from '../../../../@vex/interfaces/table-column.interface';\nimport { aioTableData, aioTableLabels, clientStatusLabels } from '../../../../static-data/aio-table-data';\nimport { CustomerCreateUpdateComponent } from './customer-create-update/customer-create-update.component';\nimport icEdit from '@iconify/icons-ic/twotone-edit';\nimport icDelete from '@iconify/icons-ic/twotone-delete';\nimport icSearch from '@iconify/icons-ic/twotone-search';\nimport icAdd from '@iconify/icons-ic/twotone-add';\nimport icFilterList from '@iconify/icons-ic/twotone-filter-list';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport icMoreHoriz from '@iconify/icons-ic/twotone-more-horiz';\nimport icFolder from '@iconify/icons-ic/twotone-folder';\nimport { fadeInUp400ms } from '../../../../@vex/animations/fade-in-up.animation';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldDefaultOptions } from '@angular/material/form-field';\nimport { stagger40ms } from '../../../../@vex/animations/stagger.animation';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MatSelectChange } from '@angular/material/select';\nimport icPhone from '@iconify/icons-ic/twotone-phone';\nimport icMail from '@iconify/icons-ic/twotone-mail';\nimport icMap from '@iconify/icons-ic/twotone-map';\nimport { Client } from 'src/app/models/client.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n\n@UntilDestroy()\n@Component({\n  selector: 'vex-subaccounts',\n  templateUrl: './subaccounts.component.html',\n  styleUrls: ['./subaccounts.component.scss'],\n  animations: [\n    fadeInUp400ms,\n    stagger40ms\n  ],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard'\n      } as MatFormFieldDefaultOptions\n    }\n  ]\n})\nexport class SubaccountsComponent implements OnInit, AfterViewInit {\n\n  layoutCtrl = new FormControl('boxed');\n\n  /**\n   * Simulating a service with HTTP that returns Observables\n   * You probably want to remove this and do all requests in a service with HTTP\n   */\n  subject$: ReplaySubject<Client[]> = new ReplaySubject<Client[]>(1);\n  data$: Observable<Client[]> = this.subject$.asObservable();\n  customers: Client[];\n\n  @Input()\n  columns: TableColumn<Client>[] = [\n    { label: 'Checkbox', property: 'checkbox', type: 'checkbox', visible: true },\n    { label: 'Name', property: 'name', type: 'text', visible: true, cssClasses: ['font-medium'] },\n    { label: 'First Name', property: 'firstName', type: 'text', visible: false },\n    { label: 'Last Name', property: 'lastName', type: 'text', visible: false },\n    { label: 'Email', property: 'emailAddress', type: 'text', visible: true },\n    { label: 'Phone Number', property: 'phoneNumber', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Department', property: 'department', type: 'text', visible: false, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Account Type', property: 'clientType', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Status', property: 'clientStatus', type: 'button', visible: true },\n    { label: 'Actions', property: 'actions', type: 'button', visible: true }\n  ];\n  pageSize = 10;\n  pageSizeOptions: number[] = [5, 10, 20, 50];\n  dataSource: MatTableDataSource<Client> | null;\n  selection = new SelectionModel<Client>(true, []);\n  searchCtrl = new FormControl();\n\n  labels = clientStatusLabels;\n\n  icPhone = icPhone;\n  icMail = icMail;\n  icMap = icMap;\n  icEdit = icEdit;\n  icSearch = icSearch;\n  icDelete = icDelete;\n  icAdd = icAdd;\n  icFilterList = icFilterList;\n  icMoreHoriz = icMoreHoriz;\n  icFolder = icFolder;\n  currentUser;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(private dialog: MatDialog,\n    private authService:AuthService,\n    private router:Router) {\n      if(!this.authService.currenctUser)\n         this.authService.setCurrentUser();\n      this.currentUser = this.authService.currenctUser;\n  }\n\n  get visibleColumns() {\n    return this.columns.filter(column => column.visible).map(column => column.property);\n  }\n\n  /**\n   * Example on how to get data and pass it to the table - usually you would want a dedicated service with a HTTP request for this\n   * We are simulating this request here.\n   */\n  getData() {\n    this.authService.getTypeSubUsers(this.currentUser._id).subscribe((clients)=>{\n      of(clients.map(client =>new Client(client))).subscribe(clientes =>{\n        console.log('123213123')  \n        console.log(clientes)  \n        this.subject$.next(clientes)\n      });\n    })// return of(aioTableData.map(customer => new Client(customer)));\n  }\n\n  ngOnInit() {\n    if(!this.authService.currenctUser)\n    this.authService.setCurrentUser();\n    this.currentUser = this.authService.currenctUser;\n    if(this.currentUser.clientType != 'Master Admin')\n      {\n        alert(\"You can't access into the this page \");\n        this.router.navigate(['/client/companydetails']);\n      }\n    this.getData();\n    // this.getData().subscribe(customers => {\n    //   this.subject$.next(customers);\n    // });\n\n    this.dataSource = new MatTableDataSource();\n\n    this.data$.pipe(\n      filter<Client[]>(Boolean)\n    ).subscribe(customers => {\n      this.customers = customers;\n      this.dataSource.data = customers;\n    });\n\n    this.searchCtrl.valueChanges.pipe(\n      untilDestroyed(this)\n    ).subscribe(value => this.onFilterChange(value));\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createCustomer() {\n    this.dialog.open(CustomerCreateUpdateComponent).afterClosed().subscribe((customer: Client) => {\n      /**\n       * Client is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (customer) {\n        customer.parentId = this.currentUser._id;\n        this.authService.register(customer, 'Client').subscribe((res)=>{\n          console.log('new created client')\n          this.authService.openSnackbar('New Sub Client Added!');\n        })\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.customers.unshift(new Client(customer));\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  updateCustomer(customer: Client) {\n    this.dialog.open(CustomerCreateUpdateComponent, {\n      data: customer\n    }).afterClosed().subscribe(updatedCustomer => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (updatedCustomer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        updatedCustomer.parentId = this.currentUser._id;\n        this.authService.updateUser(updatedCustomer).subscribe((res)=>{\n          this.authService.openSnackbar('Updated Successfully!')\n        })\n        const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === updatedCustomer.id);\n        this.customers[index] = new Client(updatedCustomer);\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  deleteCustomer(customer: Client) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    this.customers.splice(this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id), 1);\n    this.selection.deselect(customer);\n    this.subject$.next(this.customers);\n  }\n  transferMasterAdmin(custer:Client){\n\n  }\n  deleteCustomers(customers: Client[]) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    customers.forEach(c => this.deleteCustomer(c));\n  }\n\n  onFilterChange(value: string) {\n    if (!this.dataSource) {\n      return;\n    }\n    value = value.trim();\n    value = value.toLowerCase();\n    this.dataSource.filter = value;\n  }\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  trackByProperty<T>(index: number, column: TableColumn<T>) {\n    return column.property;\n  }\n\n  // onLabelChange(change: MatSelectChange, row: Client) {\n  //   const index = this.customers.findIndex(c => c === row);\n  //   this.customers[index].labels = change.value;\n  //   this.subject$.next(this.customers);\n  // }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SubaccountsRoutingModule } from './subaccounts-routing.module';\nimport { SubaccountsComponent } from './subaccounts.component';\nimport { PageLayoutModule } from '../../../../@vex/components/page-layout/page-layout.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BreadcrumbsModule } from '../../../../@vex/components/breadcrumbs/breadcrumbs.module';\nimport { CustomerCreateUpdateModule } from './customer-create-update/customer-create-update.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconModule } from '@visurel/iconify-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContainerModule } from '../../../../@vex/directives/container/container.module';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\n\n@NgModule({\n  declarations: [SubaccountsComponent],\n  imports: [\n    CommonModule,\n    SubaccountsRoutingModule,\n    PageLayoutModule,\n    FlexLayoutModule,\n    BreadcrumbsModule,\n    CustomerCreateUpdateModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    IconModule,\n    FormsModule,\n    MatTooltipModule,\n    ReactiveFormsModule,\n    ContainerModule,\n    MatSelectModule,\n    MatButtonToggleModule\n  ]\n})\nexport class SubaccountsModule {\n}\n"]}