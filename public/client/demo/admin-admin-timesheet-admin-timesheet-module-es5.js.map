{"version":3,"sources":["webpack:///src/app/admin/admin-timesheet/add-timesheet/add-timesheet.component.ts","webpack:///src/app/admin/admin-timesheet/add-timesheet/add-timesheet.component.html","webpack:///src/app/admin/admin-timesheet/add-timesheet/add-timesheet.module.ts","webpack:///src/app/admin/admin-timesheet/admin-timesheet-routing.module.ts","webpack:///src/app/admin/admin-timesheet/admin-timesheet.component.html","webpack:///src/app/admin/admin-timesheet/admin-timesheet.component.ts","webpack:///src/app/admin/admin-timesheet/admin-timesheet.module.ts","webpack:///src/app/admin/admin-timesheet/customer-create-update/customer-create-update.component.ts","webpack:///src/app/admin/admin-timesheet/customer-create-update/customer-create-update.component.html","webpack:///src/app/admin/admin-timesheet/customer-create-update/customer-create-update.module.ts"],"names":["AddTimesheetComponent","defaults","dialogRef","fb","authService","mode","icMoreVert","icClose","icPrint","icDownload","icDelete","icPerson","icMyLocation","icLocationCity","icEditLocation","icPhone","console","log","timesheets","timesheetId","AllUser","setAllUser","tempArr","workerId","forEach","obj","accountType","push","profilePhoto","id","_id","form","group","createCustomer","updateCustomer","customer","value","imageSrc","close","number","items","i","setStatusJob","subscribe","res","openSnackbar","save","setSubmit","selector","templateUrl","styleUrls","AddTimesheetModule","imports","declarations","entryComponents","exports","routes","path","component","data","toolbarShadowEnabled","AdminTimesheetRoutingModule","forChild","selection","$event","stopPropagation","AdminTimesheetComponent","dialog","layoutCtrl","subject$","data$","asObservable","columns","label","property","type","visible","cssClasses","pageSize","pageSizeOptions","searchCtrl","labels","icMail","icMap","icEdit","icSearch","icAdd","icFilterList","icMoreHoriz","icFolder","getTypeJobs","clients","map","client","clientes","next","currenctUser","setCurrentUser","currentUser","getData","dataSource","pipe","Boolean","customers","valueChanges","onFilterChange","paginator","sort","open","afterClosed","unshift","updatedCustomer","index","findIndex","existingCustomer","splice","deselect","c","deleteCustomer","trim","toLowerCase","filter","column","event","stopImmediatePropagation","numSelected","selected","length","numRows","isAllSelected","clear","row","select","change","setStatus","provide","useValue","appearance","animations","providers","AdminTimesheetModule","CustomerCreateUpdateComponent","firstName","lastName","street","city","zipcode","phoneNumber","notes","CustomerCreateUpdateModule"],"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","file":"admin-admin-timesheet-admin-timesheet-module-es5.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Customer } from '../interfaces/customer.model';\r\nimport icMoreVert from '@iconify/icons-ic/twotone-more-vert';\r\nimport icClose from '@iconify/icons-ic/twotone-close';\r\nimport icPrint from '@iconify/icons-ic/twotone-print';\r\nimport icDownload from '@iconify/icons-ic/twotone-cloud-download';\r\nimport icDelete from '@iconify/icons-ic/twotone-delete';\r\nimport icPhone from '@iconify/icons-ic/twotone-phone';\r\nimport icPerson from '@iconify/icons-ic/twotone-person';\r\nimport icMyLocation from '@iconify/icons-ic/twotone-my-location';\r\nimport icLocationCity from '@iconify/icons-ic/twotone-location-city';\r\nimport { Job } from 'src/app/client/clients-dashboard/client-job-table/interfaces/job.model';\r\nimport icEditLocation from '@iconify/icons-ic/twotone-edit-location';\r\nimport { Timesheet } from 'src/app/models/timesheet.model';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'vex-add-timesheet',\r\n  templateUrl: './add-timesheet.component.html',\r\n  styleUrls: ['./add-timesheet.component.scss']\r\n})\r\nexport class AddTimesheetComponent implements OnInit {\r\n\r\n  static id = 100;\r\n\r\n  form: FormGroup;\r\n  mode: 'create' | 'update' = 'create';\r\n\r\n  icMoreVert = icMoreVert;\r\n  icClose = icClose;\r\n\r\n  icPrint = icPrint;\r\n  icDownload = icDownload;\r\n  icDelete = icDelete;\r\n\r\n  icPerson = icPerson;\r\n  icMyLocation = icMyLocation;\r\n  icLocationCity = icLocationCity;\r\n  icEditLocation = icEditLocation;\r\n  icPhone = icPhone;\r\n  timesheets:any[];\r\n  user:any;\r\n  workerId:any;\r\n  constructor(@Inject(MAT_DIALOG_DATA) public defaults: any,\r\n              private dialogRef: MatDialogRef<AddTimesheetComponent>,\r\n              private fb: FormBuilder,\r\n              private authService:AuthService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    console.log('000000')\r\n    console.log(this.defaults);\r\n      this.timesheets = this.defaults.timesheetId;\r\n\r\n    if(!this.authService.AllUser)\r\n      this.authService.setAllUser();\r\n    console.log('<><><><><><><><><><><<><><><><><><><><>')\r\n    console.log(this.authService.AllUser)\r\n    var tempArr = this.authService.AllUser;\r\n    this.workerId = [];\r\n    tempArr.forEach(obj =>{\r\n      if(obj.accountType == 'Worker')\r\n        this.workerId.push({profilePhoto:obj.profilePhoto, workerId:obj.workerId, id:obj._id});\r\n    });\r\n    if (this.defaults) {\r\n      this.mode = 'update';\r\n    } else {\r\n      this.defaults = {} as Job;\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      id: [AddTimesheetComponent.id++],\r\n      // imageSrc: this.defaults.imageSrc,\r\n      workerId:'',\r\n      // firstName: [this.defaults.firstName || ''],\r\n      // lastName: [this.defaults.lastName || ''],\r\n      // street: this.defaults.street || '',\r\n      // city: this.defaults.city || '',\r\n      // zipcode: this.defaults.zipcode || '',\r\n      // phoneNumber: this.defaults.phoneNumber || '',\r\n      // notes: this.defaults.notes || ''\r\n    });\r\n  }\r\n\r\n  save() {\r\n    if (this.mode === 'create') {\r\n      this.createCustomer();\r\n    } else if (this.mode === 'update') {\r\n      this.updateCustomer();\r\n    }\r\n  }\r\n\r\n  createCustomer() {\r\n    const customer = this.form.value;\r\n\r\n    if (!customer.imageSrc) {\r\n      customer.imageSrc = 'assets/img/avatars/1.jpg';\r\n    }\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  updateCustomer() {\r\n    const customer = this.form.value;\r\n    customer.id = this.defaults.id;\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  isCreateMode() {\r\n    return this.mode === 'create';\r\n  }\r\n\r\n  isUpdateMode() {\r\n    return this.mode === 'update';\r\n  }\r\n  createRange(number){\r\n  var items: number[] = [];\r\n  for(var i = 1; i <= number; i++){\r\n     items.push(i);\r\n  }\r\n  return items;\r\n  }\r\n  setSubmit(){\r\n    this.authService.setStatusJob(this.defaults.id, 'Submitted').subscribe((res)=>{\r\n      console.log(res);\r\n      this.authService.openSnackbar('Submitted Successfully!');\r\n    })\r\n    this.dialogRef.close(this.defaults);\r\n  }\r\n}\r\n","<form (ngSubmit)=\"save()\" [formGroup]=\"form\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-dialog-title>\r\n    <!-- <img *ngIf=\"form.get('imageSrc').value\" [src]=\"form.get('imageSrc').value\" class=\"avatar mr-5\"> -->\r\n\r\n    <!-- <h2 *ngIf=\"form.get('firstName').value || form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">{{ form.get('firstName').value + ' ' + form.get('lastName').value }}</h2> -->\r\n    <!-- <h2 *ngIf=\"!form.get('firstName').value && !form.get('lastName').value\" -->\r\n    <h2 \r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">Time Sheets</h2>\r\n\r\n    <button class=\"text-secondary\" mat-dialog-close mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icClose\"></mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <mat-divider class=\"-mx-6 text-border\"></mat-divider>\r\n\r\n  <mat-dialog-content fxLayout=\"column\">\r\n   <!--  <div class=\"flex flex-col sm:flex-row\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n       <img \r\n              *ngIf=\"user\"\r\n              [matTooltip]=\"user.workerId\"\r\n             [src]=\"user.profilePhoto\"\r\n             class=\"avatar\"\r\n             fxFlex=\"none\">\r\n         <div (click)=\"memberSelect.open()\"\r\n        <div \r\n             class=\"avatar text-secondary bg-app-bar cursor-pointer\"\r\n             fxFlex=\"none\"\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\">\r\n          <ic-icon [icon]=\"icAdd\" size=\"24px\"></ic-icon>\r\n        </div>\r\n        <mat-select #memberSelect=\"matSelect\"\r\n                    class=\"invisible w-0 h-0 text-sm\"\r\n                    formControlName=\"workerId\"\r\n                    fxFlex=\"0 1 0px\"\r\n                    [(ngModel)]=\"user\"\r\n        >\r\n          <mat-option *ngFor=\"let userA of workerId\" [value]=\"user\">\r\n            <img [src]=\"userA.profilePhoto\" class=\"avatar h-6 w-6 align-middle inline-block ltr:mr-2 rtl:ml-2\">\r\n            <span>{{ user.workerId }}</span>\r\n          </mat-option>\r\n        </mat-select>\r\n      </div> -->\r\n\r\n      <!-- <mat-form-field class=\"sm:mt-6 sm:ml-6 flex-auto\">\r\n        <mat-label>Last Name</mat-label>\r\n        <input cdkFocusInitial formControlName=\"lastName\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div> -->\r\n\r\n    <!-- <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Street</mat-label>\r\n      <input formControlName=\"street\" matInput>\r\n\r\n      <mat-icon [icIcon]=\"icEditLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field> -->\r\n    <div class=\"flex flex-col sm:flex-row\"*ngFor=\"let item of timesheets\" >\r\n      <mat-form-field appearance=\"standard\"class=\"flex-auto\">\r\n        <mat-label>Time</mat-label>\r\n        <input  [value]=\"defaults.startTime + 'h ~ '+ defaults.endTime +'h '\" matInput readonly>\r\n      </mat-form-field>\r\n      <!-- <mat-form-field class=\"sm:ml-3 flex-auto\">\r\n          <mat-select\r\n            >\r\n            <mat-option *ngFor=\"let userA of workerId\" [value]=\"user\">\r\n            <img [src]=\"userA.profilePhoto\" class=\"avatar h-6 w-6 align-middle inline-block ltr:mr-2 rtl:ml-2\">\r\n            <span>{{ user.workerId }}</span>\r\n            </mat-option>\r\n            </mat-select>\r\n      </mat-form-field> -->\r\n      <mat-form-field appearance=\"standard\" class=\"sm:ml-3 flex-auto\">\r\n        <mat-label>Timesheet ID</mat-label>\r\n        <input  [value]=\"item.timesheetId\"matInput readonly>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"standard\" class=\"sm:ml-3 flex-auto\">\r\n        <mat-label>Department</mat-label>\r\n        <input  [value]=\"defaults.department\"matInput readonly>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"standard\"class=\"sm:ml-3 flex-auto\">\r\n        <mat-label>Role</mat-label>\r\n        <input  [value]=\"defaults.role\" matInput readonly>\r\n      </mat-form-field>\r\n      <div class=\"sm:ml-3 flex-auto\"style=\"margin-top:21px\" >\r\n        <img [src]=\"item.profilePhoto\" class=\"avatar h-6 w-6 align-middle inline-block ltr:mr-2 rtl:ml-2\">\r\n        <span>{{ item.workerIdName }}</span>\r\n      </div>\r\n    </div>\r\n    <!-- <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Zipcode</mat-label>\r\n        <input formControlName=\"zipcode\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icMyLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"sm:ml-6 flex-auto\">\r\n        <mat-label>City</mat-label>\r\n        <input formControlName=\"city\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icLocationCity\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div> -->\r\n\r\n    <!-- <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Phone Number</mat-label>\r\n      <input formControlName=\"phoneNumber\" matInput>\r\n\r\n      <mat-icon [icIcon]=\"icPhone\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field> -->\r\n\r\n    <!-- <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Notes</mat-label>\r\n      <textarea formControlName=\"notes\" matInput></textarea>\r\n    </mat-form-field> -->\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button mat-dialog-close type=\"button\">CANCEL</button>\r\n    <!-- <button *ngIf=\"isUpdateMode()\" color=\"primary\" mat-button type=\"submit\">UPDATE CUSTOMER</button> -->\r\n    <button color=\"primary\" [disabled]=\"defaults.statusStr != 'Pending'\"(click)=\"setSubmit()\"mat-button type=\"button\">SUBMIT</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AddTimesheetComponent } from './add-timesheet.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatMenuModule,\r\n    IconModule,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [AddTimesheetComponent],\r\n  entryComponents: [AddTimesheetComponent],\r\n  exports: [AddTimesheetComponent]\r\n})\r\nexport class AddTimesheetModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VexRoutes } from '../../../@vex/interfaces/vex-route.interface';\r\nimport { AdminTimesheetComponent } from './admin-timesheet.component';\r\n\r\n\r\nconst routes: VexRoutes = [\r\n  {\r\n    path: '',\r\n    component: AdminTimesheetComponent,\r\n    data: {\r\n      toolbarShadowEnabled: true\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AdminTimesheetRoutingModule {\r\n}\r\n","<vex-page-layout>\r\n\r\n  <vex-page-layout-header class=\"pb-16\" fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n    <div [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n         [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n         class=\"w-full flex flex-col sm:flex-row justify-between\">\r\n      <div>\r\n        <h1 class=\"title mt-0 mb-1\">Timesheet</h1>\r\n        <!-- <vex-breadcrumbs [crumbs]=\"['Apps', 'All-In-One Table']\"></vex-breadcrumbs> -->\r\n      </div>\r\n\r\n      <!-- <mat-button-toggle-group [formControl]=\"layoutCtrl\" class=\"mt-4 sm:mt-0\">\r\n        <mat-button-toggle value=\"boxed\">BOXED</mat-button-toggle>\r\n        <mat-button-toggle value=\"fullwidth\">FULL-WIDTH</mat-button-toggle>\r\n      </mat-button-toggle-group> -->\r\n    </div>\r\n  </vex-page-layout-header>\r\n\r\n  <vex-page-layout-content [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n                           [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n                           class=\"-mt-6\">\r\n\r\n    <div class=\"card overflow-auto -mt-16\">\r\n      <div class=\"bg-app-bar px-6 h-16 border-b sticky left-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <h2 class=\"title my-0 ltr:pr-4 rtl:pl-4 ltr:mr-4 rtl:ml-4 ltr:border-r rtl:border-l\" fxFlex=\"none\" fxHide.xs>\r\n          <span *ngIf=\"selection.isEmpty()\">Timesheets</span>\r\n          <span *ngIf=\"selection.hasValue()\">{{ selection.selected.length }}\r\n            Timesheet<span *ngIf=\"selection.selected.length > 1\">s</span> selected</span>\r\n        </h2>\r\n\r\n        <div *ngIf=\"selection.hasValue()\" class=\"mr-4 pr-4 border-r\" fxFlex=\"none\">\r\n          <button (click)=\"deleteCustomers(selection.selected)\"\r\n                  color=\"primary\"\r\n                  mat-icon-button\r\n                  matTooltip=\"Delete selected\"\r\n                  type=\"button\">\r\n            <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n          </button>\r\n\r\n          <!-- <button color=\"primary\" mat-icon-button matTooltip=\"Another action\" type=\"button\">\r\n            <mat-icon [icIcon]=\"icFolder\"></mat-icon>\r\n          </button> -->\r\n        </div>\r\n\r\n        <div class=\"bg-card rounded-full border px-4\"\r\n             fxFlex=\"400px\"\r\n             fxFlex.lt-md=\"auto\"\r\n             fxHide.xs\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"start center\">\r\n          <ic-icon [icIcon]=\"icSearch\" size=\"20px\"></ic-icon>\r\n          <input [formControl]=\"searchCtrl\"\r\n                 class=\"px-4 py-3 border-0 outline-none w-full bg-transparent\"\r\n                 placeholder=\"Search...\"\r\n                 type=\"search\">\r\n        </div>\r\n\r\n        <span fxFlex></span>\r\n\r\n        <button class=\"ml-4\" fxFlex=\"none\" fxHide.gt-xs mat-icon-button type=\"button\">\r\n          <mat-icon [icIcon]=\"icSearch\"></mat-icon>\r\n        </button>\r\n\r\n        <button [matMenuTriggerFor]=\"columnFilterMenu\"\r\n                class=\"ml-4\"\r\n                fxFlex=\"none\"\r\n                mat-icon-button\r\n                matTooltip=\"Filter Columns\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icFilterList\"></mat-icon>\r\n        </button>\r\n\r\n        <!-- <button (click)=\"createCustomer()\"\r\n                class=\"ml-4\"\r\n                color=\"primary\"\r\n                fxFlex=\"none\"\r\n                mat-mini-fab\r\n                matTooltip=\"Add Customer\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icAdd\"></mat-icon>\r\n        </button> -->\r\n      </div>\r\n\r\n      <table @stagger [dataSource]=\"dataSource\" class=\"w-full\" mat-table matSort>\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n              The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n        <!-- Checkbox Column -->\r\n        <ng-container matColumnDef=\"checkbox\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                          [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" class=\"w-4\" mat-cell>\r\n            <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\r\n                          (click)=\"$event.stopPropagation()\"\r\n                          [checked]=\"selection.isSelected(row)\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Image Column -->\r\n        <!-- <ng-container matColumnDef=\"image\">\r\n          <th *matHeaderCellDef mat-header-cell></th>\r\n          <td *matCellDef=\"let row\" class=\"w-8 min-w-8 pr-0\" mat-cell>\r\n            <img [src]=\"row['imageSrc']\" class=\"avatar h-8 w-8 align-middle\">\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Text Columns -->\r\n        <ng-container *ngFor=\"let column of columns; trackBy: trackByProperty\">\r\n          <ng-container *ngIf=\"column.type === 'text'\" [matColumnDef]=\"column.property\">\r\n            <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header> {{ column.label }}</th>\r\n            <td *matCellDef=\"let row\" [ngClass]=\"column.cssClasses\" mat-cell>{{ row[column.property] }}</td>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Contact Column -->\r\n        <ng-container matColumnDef=\"contact\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div class=\"flex\">\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center hover:bg-hover text-primary bg-primary-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icPhone\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-teal bg-teal-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMail\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-green bg-green-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMap\" size=\"18px\"></mat-icon>\r\n              </a>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Label Column -->\r\n        <ng-container matColumnDef=\"status\">\r\n          <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header>Status</th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div (click)=\"$event.stopPropagation()\" fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\r\n              <div [ngClass]=\"[row.status.textClass, row.status.bgClass]\"\r\n                   class=\"rounded px-2 py-1 font-medium text-xs\"\r\n                   fxFlex=\"none\">\r\n                   {{row.status.text}}\r\n              </div>\r\n              <!-- <div (click)=\"labelSelect.open()\"\r\n                   class=\"text-green bg-green-light cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                  Accept\r\n              </div>\r\n              <div (click)=\"labelSelect.open()\"\r\n                   class=\"text-secondary bg-secondary-light text-hint cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                  No\r\n              </div> -->\r\n              <!-- <div (click)=\"labelSelect.open()\"\r\n                   class=\"text-secondary bg-base text-hint cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                <ic-icon [icon]=\"icAdd\" size=\"18px\"></ic-icon>\r\n              </div>\r\n              <mat-select #labelSelect=\"matSelect\"\r\n                          (selectionChange)=\"onLabelChange($event, row)\"\r\n                          [value]=\"row.labels\"\r\n                          class=\"invisible w-0 h-0 text-sm\"\r\n                          fxFlex=\"0 1 0px\"\r\n                          multiple>\r\n                <mat-option *ngFor=\"let label of labels\" [value]=\"label\">\r\n                  <div [ngClass]=\"label.previewClass\"\r\n                       class=\"h-6 w-6 align-middle ltr:mr-2 rtl:ml-2 rounded inline-block\"></div>\r\n                  <span>{{ label.text }}</span>\r\n                </mat-option>\r\n              </mat-select> -->\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Action Column -->\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" class=\"w-10 text-secondary\" mat-cell>\r\n            <button (click)=\"$event.stopPropagation()\"\r\n                    [matMenuTriggerData]=\"{ customer: row }\"\r\n                    [matMenuTriggerFor]=\"actionsMenu\"\r\n                    mat-icon-button\r\n                    type=\"button\">\r\n              <mat-icon [icIcon]=\"icMoreHoriz\"></mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr *matHeaderRowDef=\"visibleColumns\" mat-header-row></tr>\r\n        <!-- <tr (click)=\"updateCustomer(row)\" -->\r\n        <tr (click)=\"confirmJob(row)\"\r\n            *matRowDef=\"let row; columns: visibleColumns;\"\r\n            @fadeInUp\r\n            class=\"hover:bg-hover trans-ease-out cursor-pointer\"\r\n            mat-row></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" [pageSize]=\"pageSize\" class=\"sticky left-0\"></mat-paginator>\r\n    </div>\r\n\r\n  </vex-page-layout-content>\r\n\r\n</vex-page-layout>\r\n\r\n<mat-menu #columnFilterMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button (click)=\"toggleColumnVisibility(column, $event)\" *ngFor=\"let column of columns\"\r\n          class=\"checkbox-item mat-menu-item\">\r\n    <mat-checkbox (click)=\"$event.stopPropagation()\" [(ngModel)]=\"column.visible\" color=\"primary\">\r\n      {{ column.label }}\r\n    </mat-checkbox>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <ng-template let-customer=\"customer\" matMenuContent>\r\n    <button (click)=\"acceptJob(customer)\" *ngIf=\"customer.statusStr == 'Pending'\" mat-menu-item>\r\n      <span>Accept</span>\r\n    </button>\r\n    <button (click)=\"confirmJob(customer)\" *ngIf=\"customer.statusStr == 'In Progress'\" mat-menu-item>\r\n      <span>Confirm</span>\r\n    </button>\r\n    <button (click)=\"cancelJob(customer)\" *ngIf=\"customer.statusStr != 'Cancelled'\"mat-menu-item>\r\n      <span>Cancel</span>\r\n    </button>\r\n    <!-- <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icEdit\"></mat-icon>\r\n      <span>Modify</span>\r\n    </button> -->\r\n    <!-- <button (click)=\"deleteCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n      <span>Delete</span>\r\n    </button> -->\r\n  </ng-template>\r\n</mat-menu>\r\n","import { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Customer } from './interfaces/customer.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TableColumn } from '../../../@vex/interfaces/table-column.interface';\nimport { aioTableData, aioTableLabels } from '../../../static-data/aio-table-data';\nimport { CustomerCreateUpdateComponent } from './customer-create-update/customer-create-update.component';\nimport icEdit from '@iconify/icons-ic/twotone-edit';\nimport icDelete from '@iconify/icons-ic/twotone-delete';\nimport icSearch from '@iconify/icons-ic/twotone-search';\nimport icAdd from '@iconify/icons-ic/twotone-add';\nimport icFilterList from '@iconify/icons-ic/twotone-filter-list';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport icMoreHoriz from '@iconify/icons-ic/twotone-more-horiz';\nimport icFolder from '@iconify/icons-ic/twotone-folder';\nimport { fadeInUp400ms } from '../../../@vex/animations/fade-in-up.animation';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldDefaultOptions } from '@angular/material/form-field';\nimport { stagger40ms } from '../../../@vex/animations/stagger.animation';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MatSelectChange } from '@angular/material/select';\nimport icPhone from '@iconify/icons-ic/twotone-phone';\nimport icMail from '@iconify/icons-ic/twotone-mail';\nimport icMap from '@iconify/icons-ic/twotone-map';\nimport { Timesheet } from 'src/app/models/timesheet.model';\nimport { Job } from 'src/app/client/clients-dashboard/client-job-table/interfaces/job.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { AddTimesheetComponent } from './add-timesheet/add-timesheet.component';\n\n\n@UntilDestroy()\n@Component({\n  selector: 'vex-admin-timesheet',\n  templateUrl: './admin-timesheet.component.html',\n  styleUrls: ['./admin-timesheet.component.scss'],\n  animations: [\n    fadeInUp400ms,\n    stagger40ms\n  ],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard'\n      } as MatFormFieldDefaultOptions\n    }\n  ]\n})\nexport class AdminTimesheetComponent implements OnInit, AfterViewInit {\n\n  layoutCtrl = new FormControl('boxed');\n\n  /**\n   * Simulating a service with HTTP that returns Observables\n   * You probably want to remove this and do all requests in a service with HTTP\n   */\n  subject$: ReplaySubject<Job[]> = new ReplaySubject<Job[]>(1);\n  data$: Observable<Job[]> = this.subject$.asObservable();\n  customers: Job[];\n\n  @Input()\n  columns: TableColumn<Job>[] = [\n    { label: 'Client', property: 'client', type: 'text', visible: true },\n    { label: 'Department', property: 'department', type: 'text', visible: true },\n    { label: 'Role', property: 'role', type: 'text', visible: false },\n    { label: 'Shift Date', property: 'shiftDateStr', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Total Staff', property: 'totalStaff', type: 'text', visible: true, cssClasses: ['text-secondary', 'font-medium'] },\n    { label: 'Status', property: 'status', type: 'button', visible: true },\n    { label: 'Actions', property: 'actions', type: 'button', visible: true }\n  ];\n  pageSize = 10;\n  pageSizeOptions: number[] = [5, 10, 20, 50];\n  dataSource: MatTableDataSource<Job> | null;\n  selection = new SelectionModel<Job>(true, []);\n  searchCtrl = new FormControl();\n\n  labels = aioTableLabels;\n\n  icPhone = icPhone;\n  icMail = icMail;\n  icMap = icMap;\n  icEdit = icEdit;\n  icSearch = icSearch;\n  icDelete = icDelete;\n  icAdd = icAdd;\n  icFilterList = icFilterList;\n  icMoreHoriz = icMoreHoriz;\n  icFolder = icFolder;\n  currentUser;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(private dialog: MatDialog,\n    private authService:AuthService) {\n  }\n\n  get visibleColumns() {\n    return this.columns.filter(column => column.visible).map(column => column.property);\n  }\n\n  /**\n   * Example on how to get data and pass it to the table - usually you would want a dedicated service with a HTTP request for this\n   * We are simulating this request here.\n   */\n  getData() {\n    this.authService.getTypeJobs().subscribe((clients)=>{\n      of(clients.map(client =>new Job(client))).subscribe(clientes =>{\n        console.log('123213123')  \n        console.log(clientes)  \n        this.subject$.next(clientes)\n      });\n    })\n  }\n\n  ngOnInit() {\n    if(!this.authService.currenctUser)\n    this.authService.setCurrentUser();\n    this.currentUser = this.authService.currenctUser;\n    this.getData();\n\n    this.dataSource = new MatTableDataSource();\n\n    this.data$.pipe(\n      filter<Job[]>(Boolean)\n    ).subscribe(customers => {\n      this.customers = customers;\n      this.dataSource.data = customers;\n    });\n\n    this.searchCtrl.valueChanges.pipe(\n      untilDestroyed(this)\n    ).subscribe(value => this.onFilterChange(value));\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createCustomer() {\n    this.dialog.open(CustomerCreateUpdateComponent).afterClosed().subscribe((customer: Job) => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (customer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.customers.unshift(new Job(customer));\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  updateCustomer(customer: Job) {\n    this.dialog.open(CustomerCreateUpdateComponent, {\n      data: customer\n    }).afterClosed().subscribe(updatedCustomer => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (updatedCustomer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === updatedCustomer.id);\n        this.customers[index] = new Job(updatedCustomer);\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  deleteCustomer(customer: Job) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    this.customers.splice(this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id), 1);\n    this.selection.deselect(customer);\n    this.subject$.next(this.customers);\n  }\n\n  deleteCustomers(customers: Job[]) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    customers.forEach(c => this.deleteCustomer(c));\n  }\n\n  onFilterChange(value: string) {\n    if (!this.dataSource) {\n      return;\n    }\n    value = value.trim();\n    value = value.toLowerCase();\n    this.dataSource.filter = value;\n  }\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  trackByProperty<T>(index: number, column: TableColumn<T>) {\n    return column.property;\n  }\n\n  onLabelChange(change: MatSelectChange, row: Job) {\n    const index = this.customers.findIndex(c => c === row);\n    // this.customers[index].labels = change.value;\n    this.subject$.next(this.customers);\n  }\n  acceptJob(customer:Job){\n    this.authService.setStatusJob(customer.id,'In Progress').subscribe((res)=>{\n      console.log(res)\n      this.authService.openSnackbar('status has updated successfully');\n    });\n    const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id);\n    customer.setStatus('In Progress');\n    this.customers[index] = customer;\n    this.subject$.next(this.customers)\n\n  }\n  confirmJob(customer:Job){\n    this.dialog.open(AddTimesheetComponent,{\n      data: customer\n    }).afterClosed().subscribe((customer: Job) => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (customer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id);\n        customer.setStatus('Submitted');\n        this.customers[index] = customer;\n        this.subject$.next(this.customers)\n      }\n    });\n  }\n  cancelJob(customer:Job){\n    this.authService.setStatusJob(customer.id,'Cancelled').subscribe((res)=>{\n      console.log(res)\n      this.authService.openSnackbar('status has updated successfully');\n    });\n    const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id);\n    customer.setStatus('Cancelled');\n    this.customers[index] = customer;\n    this.subject$.next(this.customers)\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminTimesheetRoutingModule } from './admin-timesheet-routing.module';\nimport { AdminTimesheetComponent } from './admin-timesheet.component';\nimport { PageLayoutModule } from '../../../@vex/components/page-layout/page-layout.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BreadcrumbsModule } from '../../../@vex/components/breadcrumbs/breadcrumbs.module';\nimport { CustomerCreateUpdateModule } from './customer-create-update/customer-create-update.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconModule } from '@visurel/iconify-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContainerModule } from '../../../@vex/directives/container/container.module';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { AddTimesheetModule } from './add-timesheet/add-timesheet.module';\n\n\n@NgModule({\n  declarations: [AdminTimesheetComponent],\n  imports: [\n    CommonModule,\n    AdminTimesheetRoutingModule,\n    PageLayoutModule,\n    FlexLayoutModule,\n    BreadcrumbsModule,\n    CustomerCreateUpdateModule,\n    AddTimesheetModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    IconModule,\n    FormsModule,\n    MatTooltipModule,\n    ReactiveFormsModule,\n    ContainerModule,\n    MatSelectModule,\n    MatButtonToggleModule\n  ]\n})\nexport class AdminTimesheetModule {\n}\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Customer } from '../interfaces/customer.model';\r\nimport icMoreVert from '@iconify/icons-ic/twotone-more-vert';\r\nimport icClose from '@iconify/icons-ic/twotone-close';\r\nimport icPrint from '@iconify/icons-ic/twotone-print';\r\nimport icDownload from '@iconify/icons-ic/twotone-cloud-download';\r\nimport icDelete from '@iconify/icons-ic/twotone-delete';\r\nimport icPhone from '@iconify/icons-ic/twotone-phone';\r\nimport icPerson from '@iconify/icons-ic/twotone-person';\r\nimport icMyLocation from '@iconify/icons-ic/twotone-my-location';\r\nimport icLocationCity from '@iconify/icons-ic/twotone-location-city';\r\nimport icEditLocation from '@iconify/icons-ic/twotone-edit-location';\r\n\r\n@Component({\r\n  selector: 'vex-customer-create-update',\r\n  templateUrl: './customer-create-update.component.html',\r\n  styleUrls: ['./customer-create-update.component.scss']\r\n})\r\nexport class CustomerCreateUpdateComponent implements OnInit {\r\n\r\n  static id = 100;\r\n\r\n  form: FormGroup;\r\n  mode: 'create' | 'update' = 'create';\r\n\r\n  icMoreVert = icMoreVert;\r\n  icClose = icClose;\r\n\r\n  icPrint = icPrint;\r\n  icDownload = icDownload;\r\n  icDelete = icDelete;\r\n\r\n  icPerson = icPerson;\r\n  icMyLocation = icMyLocation;\r\n  icLocationCity = icLocationCity;\r\n  icEditLocation = icEditLocation;\r\n  icPhone = icPhone;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public defaults: any,\r\n              private dialogRef: MatDialogRef<CustomerCreateUpdateComponent>,\r\n              private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.defaults) {\r\n      this.mode = 'update';\r\n    } else {\r\n      this.defaults = {} as Customer;\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      id: [CustomerCreateUpdateComponent.id++],\r\n      imageSrc: this.defaults.imageSrc,\r\n      firstName: [this.defaults.firstName || ''],\r\n      lastName: [this.defaults.lastName || ''],\r\n      street: this.defaults.street || '',\r\n      city: this.defaults.city || '',\r\n      zipcode: this.defaults.zipcode || '',\r\n      phoneNumber: this.defaults.phoneNumber || '',\r\n      notes: this.defaults.notes || ''\r\n    });\r\n  }\r\n\r\n  save() {\r\n    if (this.mode === 'create') {\r\n      this.createCustomer();\r\n    } else if (this.mode === 'update') {\r\n      this.updateCustomer();\r\n    }\r\n  }\r\n\r\n  createCustomer() {\r\n    const customer = this.form.value;\r\n\r\n    if (!customer.imageSrc) {\r\n      customer.imageSrc = 'assets/img/avatars/1.jpg';\r\n    }\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  updateCustomer() {\r\n    const customer = this.form.value;\r\n    customer.id = this.defaults.id;\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  isCreateMode() {\r\n    return this.mode === 'create';\r\n  }\r\n\r\n  isUpdateMode() {\r\n    return this.mode === 'update';\r\n  }\r\n}\r\n","<form (ngSubmit)=\"save()\" [formGroup]=\"form\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-dialog-title>\r\n    <img *ngIf=\"form.get('imageSrc').value\" [src]=\"form.get('imageSrc').value\" class=\"avatar mr-5\">\r\n\r\n    <h2 *ngIf=\"form.get('firstName').value || form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">{{ form.get('firstName').value + ' ' + form.get('lastName').value }}</h2>\r\n    <h2 *ngIf=\"!form.get('firstName').value && !form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">New Customer</h2>\r\n\r\n    <!-- <button [matMenuTriggerFor]=\"settingsMenu\" class=\"text-secondary\" mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icMoreVert\"></mat-icon>\r\n    </button> -->\r\n\r\n    <button class=\"text-secondary\" mat-dialog-close mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icClose\"></mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <mat-divider class=\"-mx-6 text-border\"></mat-divider>\r\n\r\n  <mat-dialog-content fxLayout=\"column\">\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"mt-6 flex-auto\">\r\n        <mat-label>First Name</mat-label>\r\n        <input cdkFocusInitial formControlName=\"firstName\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"sm:mt-6 sm:ml-6 flex-auto\">\r\n        <mat-label>Last Name</mat-label>\r\n        <input cdkFocusInitial formControlName=\"lastName\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Street</mat-label>\r\n      <input formControlName=\"street\" matInput>\r\n\r\n      <mat-icon [icIcon]=\"icEditLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field>\r\n\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Zipcode</mat-label>\r\n        <input formControlName=\"zipcode\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icMyLocation\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"sm:ml-6 flex-auto\">\r\n        <mat-label>City</mat-label>\r\n        <input formControlName=\"city\" matInput>\r\n\r\n        <mat-icon [icIcon]=\"icLocationCity\" class=\"mr-3\" matPrefix></mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Phone Number</mat-label>\r\n      <input formControlName=\"phoneNumber\" pattern=\"[0-9]*\" minlength=\"10\"maxlength=\"14\"onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\"  matInput>\r\n\r\n      <mat-icon [icIcon]=\"icPhone\" class=\"mr-3\" matPrefix></mat-icon>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Notes</mat-label>\r\n      <textarea formControlName=\"notes\" matInput></textarea>\r\n    </mat-form-field>\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button mat-dialog-close type=\"button\">CANCEL</button>\r\n    <button *ngIf=\"isCreateMode()\" color=\"primary\" mat-button type=\"submit\">CREATE CUSTOMER</button>\r\n    <button *ngIf=\"isUpdateMode()\" color=\"primary\" mat-button type=\"submit\">UPDATE CUSTOMER</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n\r\n<mat-menu #settingsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icPrint\"></mat-icon>\r\n    <span>Print</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDownload\"></mat-icon>\r\n    <span>Export</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { CustomerCreateUpdateComponent } from './customer-create-update.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatMenuModule,\r\n    IconModule,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [CustomerCreateUpdateComponent],\r\n  entryComponents: [CustomerCreateUpdateComponent],\r\n  exports: [CustomerCreateUpdateComponent]\r\n})\r\nexport class CustomerCreateUpdateModule {\r\n}\r\n"]}