{"version":3,"sources":["webpack:///src/app/admin/clients/clients-routing.module.ts","webpack:///src/app/admin/clients/clients.component.ts","webpack:///src/app/admin/clients/clients.component.html","webpack:///src/app/admin/clients/clients.module.ts"],"names":["routes","path","component","data","toolbarShadowEnabled","ClientsRoutingModule","forChild","imports","exports","selection","$event","stopPropagation","ClientsComponent","dialog","authService","layoutCtrl","subject$","data$","asObservable","columns","label","property","type","visible","cssClasses","pageSize","pageSizeOptions","searchCtrl","labels","icPhone","icMail","icMap","icEdit","icSearch","icDelete","icAdd","icFilterList","icMoreHoriz","icFolder","getTypeUsers","subscribe","clients","map","client","clientes","console","log","next","getData","dataSource","pipe","Boolean","valueChanges","value","onFilterChange","paginator","sort","open","afterClosed","register","res","openSnackbar","unshift","updatedClient","updateUser","index","findIndex","existingClient","id","deleteUser","splice","deselect","forEach","c","deleteClient","trim","toLowerCase","filter","column","event","stopImmediatePropagation","numSelected","selected","length","numRows","isAllSelected","clear","row","select","change","provide","useValue","appearance","createClient","selector","templateUrl","styleUrls","animations","providers","ClientsModule","declarations"],"mappings":"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","file":"admin-clients-clients-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VexRoutes } from '../../../@vex/interfaces/vex-route.interface';\r\nimport { ClientsComponent } from './clients.component';\r\n\r\n\r\nconst routes: VexRoutes = [\r\n  {\r\n    path: '',\r\n    component: ClientsComponent,\r\n    data: {\r\n      toolbarShadowEnabled: true\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ClientsRoutingModule {\r\n}\r\n","import { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n// import { client } from './interfaces/client.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TableColumn } from '../../../@vex/interfaces/table-column.interface';\nimport { aioTableData, aioTableLabels } from '../../../static-data/aio-table-data';\nimport { ClientCreateUpdateComponent } from './client-create-update/client-create-update.component';\nimport icEdit from '@iconify/icons-ic/twotone-edit';\nimport icDelete from '@iconify/icons-ic/twotone-delete';\nimport icSearch from '@iconify/icons-ic/twotone-search';\nimport icAdd from '@iconify/icons-ic/twotone-add';\nimport icFilterList from '@iconify/icons-ic/twotone-filter-list';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport icMoreHoriz from '@iconify/icons-ic/twotone-more-horiz';\nimport icFolder from '@iconify/icons-ic/twotone-folder';\nimport { fadeInUp400ms } from '../../../@vex/animations/fade-in-up.animation';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldDefaultOptions } from '@angular/material/form-field';\nimport { stagger40ms } from '../../../@vex/animations/stagger.animation';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MatSelectChange } from '@angular/material/select';\nimport icPhone from '@iconify/icons-ic/twotone-phone';\nimport icMail from '@iconify/icons-ic/twotone-mail';\nimport icMap from '@iconify/icons-ic/twotone-map';\nimport { Client } from 'src/app/models/client.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\n\n\n@UntilDestroy()\n@Component({\n  selector: 'vex-clients',\n  templateUrl: './clients.component.html',\n  styleUrls: ['./clients.component.scss'],\n  animations: [\n    fadeInUp400ms,\n    stagger40ms\n  ],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard'\n      } as MatFormFieldDefaultOptions\n    }\n  ]\n})\nexport class ClientsComponent implements OnInit, AfterViewInit {\n\n  layoutCtrl = new FormControl('boxed');\n\n  /**\n   * Simulating a service with HTTP that returns Observables\n   * You probably want to remove this and do all requests in a service with HTTP\n   */\n  subject$: ReplaySubject<Client[]> = new ReplaySubject<Client[]>(1);\n  data$: Observable<Client[]> = this.subject$.asObservable();\n  clients: Client[];\n\n  @Input()\n  columns: TableColumn<Client>[] = [\n    { label: 'Checkbox', property: 'checkbox', type: 'checkbox', visible: true },\n    // { label: 'Image', property: 'profilePhoto', type: 'image', visible: true },\n    { label: 'Name', property: 'name', type: 'text', visible: true, cssClasses: ['font-medium'] },\n    { label: 'First Name', property: 'firstName', type: 'text', visible: false },\n    { label: 'Last Name', property: 'lastName', type: 'text', visible: false },\n    { label: 'Email', property: 'emailAddress', type: 'text', visible: true },\n    { label: 'Company Name', property: 'companyName', type: 'text', visible: true },\n    { label: 'Company Address', property: 'companyAddress', type: 'text', visible: true },\n    { label: 'Company PhoneNumber', property: 'companyPhoneNumber', type: 'text', visible: true },\n    { label: 'Email Address AccountsTeam', property: 'emailAddressAccountsTeam', type: 'text', visible: false },\n    { label: 'VATNumber', property: 'VATNumber', type: 'text', visible: false },\n    { label: 'CompanyRegNumber', property: 'companyRegNumber', type: 'text', visible: false },\n    { label: 'Position', property: 'position', type: 'text', visible: true },\n    { label: 'Actions', property: 'actions', type: 'button', visible: true },\n    { label: 'ID', property: '_id', type: 'button', visible: false }\n  ];\n  pageSize = 10;\n  pageSizeOptions: number[] = [5, 10, 20, 50];\n  dataSource: MatTableDataSource<Client> | null;\n  selection = new SelectionModel<Client>(true, []);\n  searchCtrl = new FormControl();\n\n  labels = aioTableLabels;\n\n  icPhone = icPhone;\n  icMail = icMail;\n  icMap = icMap;\n  icEdit = icEdit;\n  icSearch = icSearch;\n  icDelete = icDelete;\n  icAdd = icAdd;\n  icFilterList = icFilterList;\n  icMoreHoriz = icMoreHoriz;\n  icFolder = icFolder;\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(private dialog: MatDialog,\n    private authService:AuthService) {\n  }\n\n  get visibleColumns() {\n    return this.columns.filter(column => column.visible).map(column => column.property);\n  }\n\n  /**\n   * Example on how to get data and pass it to the table - usually you would want a dedicated service with a HTTP request for this\n   * We are simulating this request here.\n   */\n  getData() {\n    this.authService.getTypeUsers('Client').subscribe((clients)=>{\n      of(clients.map(client =>new Client(client))).subscribe(clientes =>{\n        console.log('123213123')  \n        console.log(clientes)  \n        this.subject$.next(clientes)\n      });\n    })\n    // return of(aioTableData.map(client => new Client(client)));\n  }\n\n  ngOnInit() {\n    this.getData();\n\n    this.dataSource = new MatTableDataSource();\n\n    this.data$.pipe(\n      filter<Client[]>(Boolean)\n    ).subscribe(clients => {\n      this.clients = clients;\n      this.dataSource.data = clients;\n    });\n\n    this.searchCtrl.valueChanges.pipe(\n      untilDestroyed(this)\n    ).subscribe(value => this.onFilterChange(value));\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createClient() {\n    this.dialog.open(ClientCreateUpdateComponent).afterClosed().subscribe((client: Client) => {\n      /**\n       * Client is the updated client (if the user pressed Save - otherwise it's null)\n       */\n      if (client) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.authService.register(client, 'Client').subscribe((res)=>{\n          console.log('new created client')\n          this.authService.openSnackbar('New Client Added!');\n        })\n        this.clients.unshift(new Client(client));\n        this.subject$.next(this.clients);\n      }\n    });\n  }\n\n  updateClient(client: Client) {\n    this.dialog.open(ClientCreateUpdateComponent, {\n      data: client\n    }).afterClosed().subscribe(updatedClient => {\n      /**\n       * Client is the updated client (if the user pressed Save - otherwise it's null)\n       */\n      if (updatedClient) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        console.log('********')\n        console.log(updatedClient)\n        this.authService.updateUser(updatedClient).subscribe((res =>{\n            this.authService.openSnackbar('Updated Successfully!')\n        }))\n        const index = this.clients.findIndex((existingClient) => existingClient.id === updatedClient.id);\n        this.clients[index] = new Client(updatedClient);\n        this.subject$.next(this.clients);\n      }\n    });\n  }\n\n  deleteClient(client: Client) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n      this.authService.deleteUser(client,'Client').subscribe((res =>{\n      this.authService.openSnackbar('Removed Successfully!')\n  }))\n    this.clients.splice(this.clients.findIndex((existingClient) => existingClient.id === client.id), 1);\n    this.selection.deselect(client);\n    this.subject$.next(this.clients);\n  }\n\n  deleteClients(clients: Client[]) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    clients.forEach(c =>{\n      this.authService.deleteUser(c,'Client').subscribe((res) =>{\n        console.log(res);\n        // this.authService.openSnackbar('Removed Successfully!')\n    })});\n        // this.authService.openSnackbar('Removed Successfully!')\n\n    clients.forEach(c => this.deleteClient(c));\n  }\n\n  onFilterChange(value: string) {\n    if (!this.dataSource) {\n      return;\n    }\n    value = value.trim();\n    value = value.toLowerCase();\n    this.dataSource.filter = value;\n  }\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  trackByProperty<T>(index: number, column: TableColumn<T>) {\n    return column.property;\n  }\n\n  onLabelChange(change: MatSelectChange, row: Client) {\n    const index = this.clients.findIndex(c => c === row);\n    // this.clients[index].labels = change.value;\n    this.subject$.next(this.clients);\n  }\n\n}\n","<vex-page-layout>\r\n\r\n  <vex-page-layout-header class=\"pb-16\" fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n    <div [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n         [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n         class=\"w-full flex flex-col sm:flex-row justify-between\">\r\n      <div>\r\n        <h1 class=\"title mt-0 mb-1\">Clients Management</h1>\r\n        <!-- <vex-breadcrumbs [crumbs]=\"['admin', 'clients']\"></vex-breadcrumbs> -->\r\n      </div>\r\n\r\n      <!-- <mat-button-toggle-group [formControl]=\"layoutCtrl\" class=\"mt-4 sm:mt-0\">\r\n        <mat-button-toggle value=\"boxed\">BOXED</mat-button-toggle>\r\n        <mat-button-toggle value=\"fullwidth\">FULL-WIDTH</mat-button-toggle>\r\n      </mat-button-toggle-group> -->\r\n    </div>\r\n  </vex-page-layout-header>\r\n\r\n  <vex-page-layout-content [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n                           [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n                           class=\"-mt-6\">\r\n\r\n    <div class=\"card overflow-auto -mt-16\">\r\n      <div class=\"bg-app-bar px-6 h-16 border-b sticky left-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <h2 class=\"title my-0 ltr:pr-4 rtl:pl-4 ltr:mr-4 rtl:ml-4 ltr:border-r rtl:border-l\" fxFlex=\"none\" fxHide.xs>\r\n          <span *ngIf=\"selection.isEmpty()\">Clients</span>\r\n          <span *ngIf=\"selection.hasValue()\">{{ selection.selected.length }}\r\n            Client<span *ngIf=\"selection.selected.length > 1\">s</span> selected</span>\r\n        </h2>\r\n\r\n        <div *ngIf=\"selection.hasValue()\" class=\"mr-4 pr-4 border-r\" fxFlex=\"none\">\r\n          <button (click)=\"deleteClients(selection.selected)\"\r\n                  color=\"primary\"\r\n                  mat-icon-button\r\n                  matTooltip=\"Delete selected\"\r\n                  type=\"button\">\r\n            <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n          </button>\r\n\r\n          <button color=\"primary\" mat-icon-button matTooltip=\"Another action\" type=\"button\">\r\n            <mat-icon [icIcon]=\"icFolder\"></mat-icon>\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"bg-card rounded-full border px-4\"\r\n             fxFlex=\"400px\"\r\n             fxFlex.lt-md=\"auto\"\r\n             fxHide.xs\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"start center\">\r\n          <ic-icon [icIcon]=\"icSearch\" size=\"20px\"></ic-icon>\r\n          <input [formControl]=\"searchCtrl\"\r\n                 class=\"px-4 py-3 border-0 outline-none w-full bg-transparent\"\r\n                 placeholder=\"Search...\"\r\n                 type=\"search\">\r\n        </div>\r\n\r\n        <span fxFlex></span>\r\n\r\n        <button class=\"ml-4\" fxFlex=\"none\" fxHide.gt-xs mat-icon-button type=\"button\">\r\n          <mat-icon [icIcon]=\"icSearch\"></mat-icon>\r\n        </button>\r\n\r\n        <button [matMenuTriggerFor]=\"columnFilterMenu\"\r\n                class=\"ml-4\"\r\n                fxFlex=\"none\"\r\n                mat-icon-button\r\n                matTooltip=\"Filter Columns\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icFilterList\"></mat-icon>\r\n        </button>\r\n\r\n        <button (click)=\"createClient()\"\r\n                class=\"ml-4\"\r\n                color=\"primary\"\r\n                fxFlex=\"none\"\r\n                mat-mini-fab\r\n                matTooltip=\"Add Client\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icAdd\"></mat-icon>\r\n        </button>\r\n      </div>\r\n\r\n      <table @stagger [dataSource]=\"dataSource\" class=\"w-full\" mat-table matSort>\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n              The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n        <!-- Checkbox Column -->\r\n        <ng-container matColumnDef=\"checkbox\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                          [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" class=\"w-4\" mat-cell>\r\n            <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\r\n                          (click)=\"$event.stopPropagation()\"\r\n                          [checked]=\"selection.isSelected(row)\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Image Column -->\r\n        <ng-container matColumnDef=\"image\">\r\n          <th *matHeaderCellDef mat-header-cell></th>\r\n          <td *matCellDef=\"let row\" class=\"w-8 min-w-8 pr-0\" mat-cell>\r\n            <!-- <img [src]=\"row['profilePhoto']\" class=\"avatar h-8 w-8 align-middle\"> -->\r\n            <img src=\"assets/img/avatars/1.jpg\" class=\"avatar h-8 w-8 align-middle\">\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Text Columns -->\r\n        <ng-container *ngFor=\"let column of columns; trackBy: trackByProperty\">\r\n          <ng-container *ngIf=\"column.type === 'text'\" [matColumnDef]=\"column.property\">\r\n            <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header> {{ column.label }}</th>\r\n            <td *matCellDef=\"let row\" [ngClass]=\"column.cssClasses\" mat-cell>{{ row[column.property] }}</td>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Contact Column -->\r\n        <ng-container matColumnDef=\"contact\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div class=\"flex\">\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center hover:bg-hover text-primary bg-primary-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icPhone\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-teal bg-teal-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMail\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-green bg-green-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMap\" size=\"18px\"></mat-icon>\r\n              </a>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Label Column -->\r\n        <ng-container matColumnDef=\"labels\">\r\n          <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header>Labels</th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div (click)=\"$event.stopPropagation()\" fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\r\n              <div *ngFor=\"let label of row.labels\"\r\n                   [ngClass]=\"[label.textClass, label.bgClass]\"\r\n                   class=\"rounded px-2 py-1 font-medium text-xs\"\r\n                   fxFlex=\"none\">\r\n                {{ label.text }}\r\n              </div>\r\n              <div (click)=\"labelSelect.open()\"\r\n                   class=\"text-secondary bg-base text-hint cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                <ic-icon [icon]=\"icAdd\" size=\"18px\"></ic-icon>\r\n              </div>\r\n              <mat-select #labelSelect=\"matSelect\"\r\n                          (selectionChange)=\"onLabelChange($event, row)\"\r\n                          [value]=\"row.labels\"\r\n                          class=\"invisible w-0 h-0 text-sm\"\r\n                          fxFlex=\"0 1 0px\"\r\n                          multiple>\r\n                <mat-option *ngFor=\"let label of labels\" [value]=\"label\">\r\n                  <div [ngClass]=\"label.previewClass\"\r\n                       class=\"h-6 w-6 align-middle ltr:mr-2 rtl:ml-2 rounded inline-block\"></div>\r\n                  <span>{{ label.text }}</span>\r\n                </mat-option>\r\n              </mat-select>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Action Column -->\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" class=\"w-10 text-secondary\" mat-cell>\r\n            <button (click)=\"$event.stopPropagation()\"\r\n                    [matMenuTriggerData]=\"{ client: row }\"\r\n                    [matMenuTriggerFor]=\"actionsMenu\"\r\n                    mat-icon-button\r\n                    type=\"button\">\r\n              <mat-icon [icIcon]=\"icMoreHoriz\"></mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr *matHeaderRowDef=\"visibleColumns\" mat-header-row></tr>\r\n        <tr (click)=\"updateClient(row)\"\r\n            *matRowDef=\"let row; columns: visibleColumns;\"\r\n            @fadeInUp\r\n            class=\"hover:bg-hover trans-ease-out cursor-pointer\"\r\n            mat-row></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" [pageSize]=\"pageSize\" class=\"sticky left-0\"></mat-paginator>\r\n    </div>\r\n\r\n  </vex-page-layout-content>\r\n\r\n</vex-page-layout>\r\n\r\n<mat-menu #columnFilterMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button (click)=\"toggleColumnVisibility(column, $event)\" *ngFor=\"let column of columns\"\r\n          class=\"checkbox-item mat-menu-item\">\r\n    <mat-checkbox (click)=\"$event.stopPropagation()\" [(ngModel)]=\"column.visible\" color=\"primary\">\r\n      {{ column.label }}\r\n    </mat-checkbox>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <ng-template let-client=\"client\" matMenuContent>\r\n    <button (click)=\"updateClient(client)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icEdit\"></mat-icon>\r\n      <span>Modify</span>\r\n    </button>\r\n    <button (click)=\"deleteClient(client)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ClientsRoutingModule } from './clients-routing.module';\nimport { ClientsComponent } from './clients.component';\nimport { PageLayoutModule } from '../../../@vex/components/page-layout/page-layout.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BreadcrumbsModule } from '../../../@vex/components/breadcrumbs/breadcrumbs.module';\nimport { ClientCreateUpdateModule } from './client-create-update/client-create-update.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconModule } from '@visurel/iconify-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContainerModule } from '../../../@vex/directives/container/container.module';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\n\n@NgModule({\n  declarations: [ClientsComponent],\n  imports: [\n    CommonModule,\n    ClientsRoutingModule,\n    PageLayoutModule,\n    FlexLayoutModule,\n    BreadcrumbsModule,\n    ClientCreateUpdateModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    IconModule,\n    FormsModule,\n    MatTooltipModule,\n    ReactiveFormsModule,\n    ContainerModule,\n    MatSelectModule,\n    MatButtonToggleModule,\n  ]\n})\nexport class ClientsModule {\n}\n"]}