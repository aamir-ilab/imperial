{"version":3,"sources":["webpack:///src/app/client/invoices/customer-create-update/customer-create-update.component.ts","webpack:///src/app/client/invoices/customer-create-update/customer-create-update.component.html","webpack:///src/app/client/invoices/customer-create-update/customer-create-update.module.ts","webpack:///src/app/client/invoices/invoices-routing.module.ts","webpack:///src/app/client/invoices/invoices.component.html","webpack:///src/app/client/invoices/invoices.component.ts","webpack:///src/app/client/invoices/invoices.module.ts"],"names":["CustomerCreateUpdateComponent","defaults","dialogRef","fb","mode","icMoreVert","icClose","icPrint","icDownload","icDelete","icPerson","icMyLocation","icLocationCity","icEditLocation","icPhone","console","log","form","group","id","invoiceId","timesheetId","invoiceDate","toString","Date","invoiceDueDate","_id","createCustomer","updateCustomer","customer","value","close","save","selector","templateUrl","styleUrls","CustomerCreateUpdateModule","imports","declarations","entryComponents","exports","routes","path","component","data","toolbarShadowEnabled","InvoicesRoutingModule","forChild","$event","stopPropagation","InvoicesComponent","dialog","authService","route","layoutCtrl","subject$","data$","asObservable","columns","label","property","type","visible","cssClasses","pageSize","pageSizeOptions","selection","searchCtrl","labels","icMail","icMap","icEdit","icSearch","icAdd","icFilterList","icMoreHoriz","icFolder","getAllInvoices","subscribe","clients","map","client","clientes","next","getData","dataSource","pipe","Boolean","customers","valueChanges","onFilterChange","paginator","sort","open","afterClosed","addInvoice","res","openSnackbar","unshift","updatedCustomer","updateInvoice","index","findIndex","existingCustomer","splice","deselect","forEach","c","deleteCustomer","trim","toLowerCase","filter","column","event","stopImmediatePropagation","numSelected","selected","length","numRows","isAllSelected","clear","row","select","change","user","navigate","provide","useValue","appearance","animations","providers","InvoicesModule"],"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","file":"client-invoices-invoices-module-es5.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Customer } from '../interfaces/customer.model';\r\nimport icMoreVert from '@iconify/icons-ic/twotone-more-vert';\r\nimport icClose from '@iconify/icons-ic/twotone-close';\r\nimport icPrint from '@iconify/icons-ic/twotone-print';\r\nimport icDownload from '@iconify/icons-ic/twotone-cloud-download';\r\nimport icDelete from '@iconify/icons-ic/twotone-delete';\r\nimport icPhone from '@iconify/icons-ic/twotone-phone';\r\nimport icPerson from '@iconify/icons-ic/twotone-person';\r\nimport icMyLocation from '@iconify/icons-ic/twotone-my-location';\r\nimport icLocationCity from '@iconify/icons-ic/twotone-location-city';\r\nimport icEditLocation from '@iconify/icons-ic/twotone-edit-location';\r\nimport { Invoice } from 'src/app/models/invoice.model';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'vex-customer-create-update',\r\n  templateUrl: './customer-create-update.component.html',\r\n  styleUrls: ['./customer-create-update.component.scss']\r\n})\r\nexport class CustomerCreateUpdateComponent implements OnInit {\r\n\r\n  static id = 100;\r\n\r\n  form: FormGroup;\r\n  mode: 'create' | 'update' = 'create';\r\n\r\n  icMoreVert = icMoreVert;\r\n  icClose = icClose;\r\n\r\n  icPrint = icPrint;\r\n  icDownload = icDownload;\r\n  icDelete = icDelete;\r\n\r\n  icPerson = icPerson;\r\n  icMyLocation = icMyLocation;\r\n  icLocationCity = icLocationCity;\r\n  icEditLocation = icEditLocation;\r\n  icPhone = icPhone;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public defaults: any,\r\n              private dialogRef: MatDialogRef<CustomerCreateUpdateComponent>,\r\n              private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.defaults) {\r\n      this.mode = 'update';\r\n    } else {\r\n      this.defaults = {} as Invoice;\r\n    }\r\n    console.log('>>>>>>>')\r\n    console.log(this.defaults)\r\n    this.form = this.fb.group({\r\n      id: [CustomerCreateUpdateComponent.id++],\r\n      invoiceId: this.defaults.invoiceId || '',\r\n      timesheetId: this.defaults.timesheetId || '',\r\n      invoiceDate:  formatDate(this.defaults.invoiceDate, 'yyyy-MM-dd','en' ).toString()|| new Date(),\r\n      invoiceDueDate: formatDate(this.defaults.invoiceDueDate, 'yyyy-MM-dd','en' ).toString() || new Date(),\r\n      _id:[this.defaults._id]\r\n    });\r\n    console.log(this.form)\r\n  }\r\n\r\n  save() {\r\n    if (this.mode === 'create') {\r\n      this.createCustomer();\r\n    } else if (this.mode === 'update') {\r\n      this.updateCustomer();\r\n    }\r\n  }\r\n\r\n  createCustomer() {\r\n    const customer = this.form.value;\r\n\r\n    // if (!customer.imageSrc) {\r\n    //   customer.imageSrc = 'assets/img/avatars/1.jpg';\r\n    // }\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  updateCustomer() {\r\n    const customer = this.form.value;\r\n    customer.id = this.defaults.id;\r\n\r\n    this.dialogRef.close(customer);\r\n  }\r\n\r\n  isCreateMode() {\r\n    return this.mode === 'create';\r\n  }\r\n\r\n  isUpdateMode() {\r\n    return this.mode === 'update';\r\n  }\r\n}\r\n","<form (ngSubmit)=\"save()\" [formGroup]=\"form\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-dialog-title>\r\n    <!-- <img *ngIf=\"form.get('imageSrc').value\" [src]=\"form.get('imageSrc').value\" class=\"avatar mr-5\"> -->\r\n\r\n    <!-- <h2 *ngIf=\"form.get('firstName').value || form.get('lastName').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">{{ form.get('firstName').value + ' ' + form.get('lastName').value }}</h2> -->\r\n    <h2 *ngIf=\"!form.get('invoiceId').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">New Invoice</h2>\r\n        <h2 *ngIf=\"form.get('invoiceId').value\"\r\n        class=\"headline m-0\"\r\n        fxFlex=\"auto\">Edit Invoice</h2>\r\n    <!-- <button [matMenuTriggerFor]=\"settingsMenu\" class=\"text-secondary\" mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icMoreVert\"></mat-icon>\r\n    </button> -->\r\n\r\n    <button class=\"text-secondary\" mat-dialog-close mat-icon-button type=\"button\">\r\n      <mat-icon [icIcon]=\"icClose\"></mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <mat-divider class=\"-mx-6 text-border\"></mat-divider>\r\n\r\n  <mat-dialog-content fxLayout=\"column\">\r\n    <div class=\"flex flex-col sm:flex-row\">\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Invoice Id</mat-label>\r\n        <input cdkFocusInitial formControlName=\"invoiceId\" matInput>\r\n        <!-- <mat-icon [icIcon]=\"icPerson\" class=\"mr-3\" matPrefix></mat-icon> -->\r\n      </mat-form-field>\r\n    </div>\r\n    <mat-form-field class=\"flex-auto\">\r\n      <mat-label>Timesheet Id</mat-label>\r\n      <input formControlName=\"timesheetId\" matInput>\r\n\r\n      <!-- <mat-icon [icIcon]=\"icEditLocation\" class=\"mr-3\" matPrefix></mat-icon> -->\r\n    </mat-form-field>\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Invoice Date</mat-label>\r\n        <input type=\"date\" formControlName=\"invoiceDate\" matInput>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"flex-auto\">\r\n        <mat-label>Invoice Due Date</mat-label>\r\n        <input type=\"date\" formControlName=\"invoiceDueDate\" matInput>\r\n      </mat-form-field>\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button mat-dialog-close type=\"button\">CANCEL</button>\r\n    <button *ngIf=\"isCreateMode()\" color=\"primary\" mat-button type=\"submit\">CREATE INVOICE</button>\r\n    <button *ngIf=\"isUpdateMode()\" color=\"primary\" mat-button type=\"submit\">UPDATE INVOICE</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n\r\n<mat-menu #settingsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <!-- <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icPrint\"></mat-icon>\r\n    <span>Print</span>\r\n  </button>\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDownload\"></mat-icon>\r\n    <span>Export</span>\r\n  </button> -->\r\n\r\n  <button mat-menu-item>\r\n    <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { CustomerCreateUpdateComponent } from './customer-create-update.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { IconModule } from '@visurel/iconify-angular';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatMenuModule,\r\n    IconModule,\r\n    MatDividerModule\r\n  ],\r\n  declarations: [CustomerCreateUpdateComponent],\r\n  entryComponents: [CustomerCreateUpdateComponent],\r\n  exports: [CustomerCreateUpdateComponent]\r\n})\r\nexport class CustomerCreateUpdateModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { VexRoutes } from '../../../@vex/interfaces/vex-route.interface';\r\nimport { InvoicesComponent } from './invoices.component';\r\n\r\n\r\nconst routes: VexRoutes = [\r\n  {\r\n    path: '',\r\n    component: InvoicesComponent,\r\n    data: {\r\n      toolbarShadowEnabled: true\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class InvoicesRoutingModule {\r\n}\r\n","<vex-page-layout>\r\n\r\n  <vex-page-layout-header class=\"pb-16\" fxLayout=\"column\" fxLayoutAlign=\"center start\">\r\n    <div [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n         [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n         class=\"w-full flex flex-col sm:flex-row justify-between\">\r\n      <div>\r\n        <h1 class=\"title mt-0 mb-1\">Invoices</h1>\r\n        <!-- <vex-breadcrumbs [crumbs]=\"['admin', 'invoices']\"></vex-breadcrumbs> -->\r\n      </div>\r\n    </div>\r\n  </vex-page-layout-header>\r\n\r\n  <vex-page-layout-content [class.container]=\"layoutCtrl.value === 'boxed'\"\r\n                           [class.px-gutter]=\"layoutCtrl.value === 'fullwidth'\"\r\n                           class=\"-mt-6\">\r\n\r\n    <div class=\"card overflow-auto -mt-16\">\r\n      <div class=\"bg-app-bar px-6 h-16 border-b sticky left-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <h2 class=\"title my-0 ltr:pr-4 rtl:pl-4 ltr:mr-4 rtl:ml-4 ltr:border-r rtl:border-l\" fxFlex=\"none\" fxHide.xs>\r\n          <span *ngIf=\"selection.isEmpty()\">Invoices</span>\r\n          <span *ngIf=\"selection.hasValue()\">{{ selection.selected.length }}\r\n            Invoice<span *ngIf=\"selection.selected.length > 1\">s</span> selected</span>\r\n        </h2>\r\n\r\n        <!-- <div *ngIf=\"selection.hasValue()\" class=\"mr-4 pr-4 border-r\" fxFlex=\"none\">\r\n          <button (click)=\"deleteCustomers(selection.selected)\"\r\n                  color=\"primary\"\r\n                  mat-icon-button\r\n                  matTooltip=\"Delete selected\"\r\n                  type=\"button\">\r\n            <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n          </button>\r\n        </div> -->\r\n\r\n        <div class=\"bg-card rounded-full border px-4\"\r\n             fxFlex=\"400px\"\r\n             fxFlex.lt-md=\"auto\"\r\n             fxHide.xs\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"start center\">\r\n          <ic-icon [icIcon]=\"icSearch\" size=\"20px\"></ic-icon>\r\n          <input [formControl]=\"searchCtrl\"\r\n                 class=\"px-4 py-3 border-0 outline-none w-full bg-transparent\"\r\n                 placeholder=\"Search...\"\r\n                 type=\"search\">\r\n        </div>\r\n\r\n        <span fxFlex></span>\r\n\r\n        <button class=\"ml-4\" fxFlex=\"none\" fxHide.gt-xs mat-icon-button type=\"button\">\r\n          <mat-icon [icIcon]=\"icSearch\"></mat-icon>\r\n        </button>\r\n\r\n        <button [matMenuTriggerFor]=\"columnFilterMenu\"\r\n                class=\"ml-4\"\r\n                fxFlex=\"none\"\r\n                mat-icon-button\r\n                matTooltip=\"Filter Columns\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icFilterList\"></mat-icon>\r\n        </button>\r\n\r\n        <!-- <button (click)=\"createCustomer()\"\r\n                class=\"ml-4\"\r\n                color=\"primary\"\r\n                fxFlex=\"none\"\r\n                mat-mini-fab\r\n                matTooltip=\"Add Customer\"\r\n                type=\"button\">\r\n          <mat-icon [icIcon]=\"icAdd\"></mat-icon>\r\n        </button> -->\r\n      </div>\r\n\r\n      <table @stagger [dataSource]=\"dataSource\" class=\"w-full\" mat-table matSort>\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n              The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n        <!-- Checkbox Column -->\r\n        <!-- <ng-container matColumnDef=\"checkbox\">\r\n          <th *matHeaderCellDef mat-header-cell>\r\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                          [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </th>\r\n          <td *matCellDef=\"let row\" class=\"w-4\" mat-cell>\r\n            <mat-checkbox (change)=\"$event ? selection.toggle(row) : null\"\r\n                          (click)=\"$event.stopPropagation()\"\r\n                          [checked]=\"selection.isSelected(row)\"\r\n                          color=\"primary\">\r\n            </mat-checkbox>\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Image Column -->\r\n        <!-- <ng-container matColumnDef=\"image\">\r\n          <th *matHeaderCellDef mat-header-cell></th>\r\n          <td *matCellDef=\"let row\" class=\"w-8 min-w-8 pr-0\" mat-cell>\r\n            <img [src]=\"row['imageSrc']\" class=\"avatar h-8 w-8 align-middle\">\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Text Columns -->\r\n        <ng-container *ngFor=\"let column of columns; trackBy: trackByProperty\">\r\n          <ng-container *ngIf=\"column.type === 'text'\" [matColumnDef]=\"column.property\">\r\n            <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header> {{ column.label }}</th>\r\n            <td *matCellDef=\"let row\" [ngClass]=\"column.cssClasses\" mat-cell>{{ row[column.property] }}</td>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Contact Column -->\r\n        <!-- <ng-container matColumnDef=\"contact\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div class=\"flex\">\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center hover:bg-hover text-primary bg-primary-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icPhone\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-teal bg-teal-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMail\" size=\"18px\"></mat-icon>\r\n              </a>\r\n\r\n              <a (click)=\"$event.stopPropagation()\"\r\n                 class=\"w-8 h-8 leading-none flex items-center justify-center ml-1 hover:bg-hover text-green bg-green-light\"\r\n                 mat-icon-button>\r\n                <mat-icon [icIcon]=\"icMap\" size=\"18px\"></mat-icon>\r\n              </a>\r\n            </div>\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Label Column -->\r\n        <!-- <ng-container matColumnDef=\"labels\">\r\n          <th *matHeaderCellDef class=\"uppercase\" mat-header-cell mat-sort-header>Labels</th>\r\n          <td *matCellDef=\"let row\" mat-cell>\r\n            <div (click)=\"$event.stopPropagation()\" fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\r\n              <div *ngFor=\"let label of row.labels\"\r\n                   [ngClass]=\"[label.textClass, label.bgClass]\"\r\n                   class=\"rounded px-2 py-1 font-medium text-xs\"\r\n                   fxFlex=\"none\">\r\n                {{ label.text }}\r\n              </div>\r\n              <div (click)=\"labelSelect.open()\"\r\n                   class=\"text-secondary bg-base text-hint cursor-pointer hover:bg-hover\"\r\n                   fxFlex=\"none\"\r\n                   fxLayout=\"row\"\r\n                   fxLayoutAlign=\"center center\">\r\n                <ic-icon [icon]=\"icAdd\" size=\"18px\"></ic-icon>\r\n              </div>\r\n              <mat-select #labelSelect=\"matSelect\"\r\n                          (selectionChange)=\"onLabelChange($event, row)\"\r\n                          [value]=\"row.labels\"\r\n                          class=\"invisible w-0 h-0 text-sm\"\r\n                          fxFlex=\"0 1 0px\"\r\n                          multiple>\r\n                <mat-option *ngFor=\"let label of labels\" [value]=\"label\">\r\n                  <div [ngClass]=\"label.previewClass\"\r\n                       class=\"h-6 w-6 align-middle ltr:mr-2 rtl:ml-2 rounded inline-block\"></div>\r\n                  <span>{{ label.text }}</span>\r\n                </mat-option>\r\n              </mat-select>\r\n            </div>\r\n          </td>\r\n        </ng-container> -->\r\n\r\n        <!-- Action Column -->\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th *matHeaderCellDef mat-header-cell mat-sort-header></th>\r\n          <td *matCellDef=\"let row\" class=\"w-10 text-secondary\" mat-cell>\r\n            <button (click)=\"$event.stopPropagation()\"\r\n                    [matMenuTriggerData]=\"{ customer: row }\"\r\n                    [matMenuTriggerFor]=\"actionsMenu\"\r\n                    mat-icon-button\r\n                    type=\"button\">\r\n              <mat-icon [icIcon]=\"icMoreHoriz\"></mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr *matHeaderRowDef=\"visibleColumns\" mat-header-row></tr>\r\n        <tr \r\n            *matRowDef=\"let row; columns: visibleColumns;\"\r\n            @fadeInUp\r\n            class=\"hover:bg-hover trans-ease-out cursor-pointer\"\r\n            mat-row></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" [pageSize]=\"pageSize\" class=\"sticky left-0\"></mat-paginator>\r\n    </div>\r\n\r\n  </vex-page-layout-content>\r\n\r\n</vex-page-layout>\r\n\r\n<mat-menu #columnFilterMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <button (click)=\"toggleColumnVisibility(column, $event)\" *ngFor=\"let column of columns\"\r\n          class=\"checkbox-item mat-menu-item\">\r\n    <mat-checkbox (click)=\"$event.stopPropagation()\" [(ngModel)]=\"column.visible\" color=\"primary\">\r\n      {{ column.label }}\r\n    </mat-checkbox>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\" yPosition=\"below\">\r\n  <ng-template let-customer=\"customer\" matMenuContent>\r\n    <!-- <button (click)=\"updateCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icEdit\"></mat-icon>\r\n      <span>Modify</span>\r\n    </button>\r\n    <button (click)=\"deleteCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icDelete\"></mat-icon>\r\n      <span>Delete</span>\r\n    </button> -->\r\n    <button (click)=\"pdfCustomer(customer)\" mat-menu-item>\r\n      <mat-icon [icIcon]=\"icPrint\"></mat-icon>\r\n      <span>Pdf</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Customer } from './interfaces/customer.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TableColumn } from '../../../@vex/interfaces/table-column.interface';\nimport { aioTableData, aioTableLabels } from '../../../static-data/aio-table-data';\nimport { CustomerCreateUpdateComponent } from './customer-create-update/customer-create-update.component';\nimport icEdit from '@iconify/icons-ic/twotone-edit';\nimport icDelete from '@iconify/icons-ic/twotone-delete';\nimport icSearch from '@iconify/icons-ic/twotone-search';\nimport icAdd from '@iconify/icons-ic/twotone-add';\nimport icFilterList from '@iconify/icons-ic/twotone-filter-list';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport icMoreHoriz from '@iconify/icons-ic/twotone-more-horiz';\nimport icFolder from '@iconify/icons-ic/twotone-folder';\nimport { fadeInUp400ms } from '../../../@vex/animations/fade-in-up.animation';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldDefaultOptions } from '@angular/material/form-field';\nimport { stagger40ms } from '../../../@vex/animations/stagger.animation';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { MatSelectChange } from '@angular/material/select';\nimport icPhone from '@iconify/icons-ic/twotone-phone';\nimport icMail from '@iconify/icons-ic/twotone-mail';\nimport icMap from '@iconify/icons-ic/twotone-map';\nimport { Invoice } from 'src/app/models/invoice.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport icPrint from '@iconify/icons-ic/twotone-print';\n\n\n@UntilDestroy()\n@Component({\n  selector: 'vex-invoices',\n  templateUrl: './invoices.component.html',\n  styleUrls: ['./invoices.component.scss'],\n  animations: [\n    fadeInUp400ms,\n    stagger40ms\n  ],\n  providers: [\n    {\n      provide: MAT_FORM_FIELD_DEFAULT_OPTIONS,\n      useValue: {\n        appearance: 'standard'\n      } as MatFormFieldDefaultOptions\n    }\n  ]\n})\nexport class InvoicesComponent implements OnInit, AfterViewInit {\n\n  layoutCtrl = new FormControl('boxed');\n  icPrint = icPrint;\n  /**\n   * Simulating a service with HTTP that returns Observables\n   * You probably want to remove this and do all requests in a service with HTTP\n   */\n  subject$: ReplaySubject<Invoice[]> = new ReplaySubject<Invoice[]>(1);\n  data$: Observable<Invoice[]> = this.subject$.asObservable();\n  customers: Invoice[];\n\n  @Input()\n  columns: TableColumn<Customer>[] = [\n    // { label: 'Checkbox', property: 'checkbox', type: 'checkbox', visible: true },\n    { label: 'Invoice ID', property: 'invoiceId', type: 'text', visible: true, cssClasses: ['font-medium'] },\n    { label: 'Timesheet ID', property: 'timesheetId', type: 'text', visible: true },\n    { label: 'Client Name', property: 'clientName', type: 'text', visible: false },\n    { label: 'Invoice Date', property: 'invoiceDateStr', type: 'text', visible: true },\n    { label: 'Invoice Due Date', property: 'invoiceDueDateStr', type: 'text', visible: true },\n    { label: 'Actions', property: 'actions', type: 'button', visible: true }\n  ];\n  pageSize = 10;\n  pageSizeOptions: number[] = [5, 10, 20, 50];\n  dataSource: MatTableDataSource<Invoice> | null;\n  selection = new SelectionModel<Invoice>(true, []);\n  searchCtrl = new FormControl();\n\n  labels = aioTableLabels;\n\n  icPhone = icPhone;\n  icMail = icMail;\n  icMap = icMap;\n  icEdit = icEdit;\n  icSearch = icSearch;\n  icDelete = icDelete;\n  icAdd = icAdd;\n  icFilterList = icFilterList;\n  icMoreHoriz = icMoreHoriz;\n  icFolder = icFolder;\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(private dialog: MatDialog,\n    private authService:AuthService,\n    private route:Router) {\n  }\n\n  get visibleColumns() {\n    return this.columns.filter(column => column.visible).map(column => column.property);\n  }\n\n  /**\n   * Example on how to get data and pass it to the table - usually you would want a dedicated service with a HTTP request for this\n   * We are simulating this request here.\n   */\n  getData() {\n    this.authService.getAllInvoices().subscribe((clients)=>{\n      of(clients.map(client =>new Invoice(client))).subscribe(clientes =>{\n        console.log('123213123')  \n        console.log(clientes)  \n        this.subject$.next(clientes)\n      });\n    })\n  }\n\n  ngOnInit() {\n    this.getData();\n    // this.getData().subscribe(customers => {\n    //   this.subject$.next(customers);\n    // });\n\n    this.dataSource = new MatTableDataSource();\n\n    this.data$.pipe(\n      filter<Invoice[]>(Boolean)\n    ).subscribe(customers => {\n      this.customers = customers;\n      this.dataSource.data = customers;\n    });\n\n    this.searchCtrl.valueChanges.pipe(\n      untilDestroyed(this)\n    ).subscribe(value => this.onFilterChange(value));\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createCustomer() {\n    this.dialog.open(CustomerCreateUpdateComponent).afterClosed().subscribe((customer: Invoice) => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (customer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.authService.addInvoice(customer).subscribe((res)=>{\n          console.log('addInvoice')\n          this.authService.openSnackbar('Added Invoice Successfully ');\n        })\n        this.customers.unshift(new Invoice(customer));\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  updateCustomer(customer: Invoice) {\n    this.dialog.open(CustomerCreateUpdateComponent, {\n      data: customer\n    }).afterClosed().subscribe(updatedCustomer => {\n      /**\n       * Customer is the updated customer (if the user pressed Save - otherwise it's null)\n       */\n      if (updatedCustomer) {\n        /**\n         * Here we are updating our local array.\n         * You would probably make an HTTP request here.\n         */\n        this.authService.updateInvoice(updatedCustomer).subscribe((res)=>{\n          console.log('updateInvoice')\n          this.authService.openSnackbar('Changed Invoice Successfully ');\n        })\n        const index = this.customers.findIndex((existingCustomer) => existingCustomer.id === updatedCustomer.id);\n        this.customers[index] = new Invoice(updatedCustomer);\n        this.subject$.next(this.customers);\n      }\n    });\n  }\n\n  deleteCustomer(customer: Invoice) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    this.customers.splice(this.customers.findIndex((existingCustomer) => existingCustomer.id === customer.id), 1);\n    this.selection.deselect(customer);\n    this.subject$.next(this.customers);\n  }\n\n  deleteCustomers(customers: Invoice[]) {\n    /**\n     * Here we are updating our local array.\n     * You would probably make an HTTP request here.\n     */\n    customers.forEach(c => this.deleteCustomer(c));\n  }\n\n  onFilterChange(value: string) {\n    if (!this.dataSource) {\n      return;\n    }\n    value = value.trim();\n    value = value.toLowerCase();\n    this.dataSource.filter = value;\n  }\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  trackByProperty<T>(index: number, column: TableColumn<T>) {\n    return column.property;\n  }\n\n  onLabelChange(change: MatSelectChange, row: Invoice) {\n    // const index = this.customers.findIndex(c => c === row);\n    // this.customers[index].labels = change.value;\n    // this.subject$.next(this.customers);\n  }\n  pdfCustomer(user:Invoice){\n    this.route.navigate(['/admin/invoices/pdf',user.invoiceId]);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { InvoicesRoutingModule } from './invoices-routing.module';\nimport { InvoicesComponent } from './invoices.component';\nimport { PageLayoutModule } from '../../../@vex/components/page-layout/page-layout.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BreadcrumbsModule } from '../../../@vex/components/breadcrumbs/breadcrumbs.module';\nimport { CustomerCreateUpdateModule } from './customer-create-update/customer-create-update.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconModule } from '@visurel/iconify-angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContainerModule } from '../../../@vex/directives/container/container.module';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\n\n@NgModule({\n  declarations: [InvoicesComponent],\n  imports: [\n    CommonModule,\n    InvoicesRoutingModule,\n    PageLayoutModule,\n    FlexLayoutModule,\n    BreadcrumbsModule,\n    CustomerCreateUpdateModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    IconModule,\n    FormsModule,\n    MatTooltipModule,\n    ReactiveFormsModule,\n    ContainerModule,\n    MatSelectModule,\n    MatButtonToggleModule\n  ]\n})\nexport class InvoicesModule {\n}\n"]}