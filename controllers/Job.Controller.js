var mongoose = require('mongoose'),
passport = require('passport');
const Job = mongoose.model('Job');
const DefaultRates = mongoose.model('DefaultRates');
const CustomRates = mongoose.model('CustomRates');
const WorkerRates = mongoose.model('WorkerRates');
const Timesheet = mongoose.model('Timesheet');
const User = mongoose.model('User');
const Invoice = mongoose.model('Invoice');
const InvoiceInfo = mongoose.model('InvoiceInfo');
const Payroll=  mongoose.model('Payroll');
const Payslip=  mongoose.model('Payslip');
var handlebars = require('handlebars');
var ejs = require('ejs');
var fs = require('fs');
const puppeteer = require('puppeteer')
var moment = require('moment');
path = require('path');
var dateFormat = require("dateformat");
var nodemailer = require('nodemailer');
var transport = nodemailer.createTransport({
  host: "smtp.mailtrap.io",
  port: 2525,
  auth: {
    user: "1e2f9060589485", //generated by Mailtrap
    pass: "d3a29e8e580090" //generated by Mailtrap
  }
});

var readHTMLFile = function(path, callback) {
  fs.readFile(path, {encoding: 'utf-8'}, function (err, html) {
      if (err) {
          throw err;
          callback(err);
      }
      else {
          callback(null, html);
      }
  });
};
exports.register = (req, res) => {
  let job_id, timesheet_id;
  Job.findOne({}).then(client => {
    delete req.body._id;
    console.log('create job req', req.body);
    const newClient = new Job(req.body);
    const timesheet = new Timesheet(req.body);
    newClient.statusStr = 'In Progress';
    Job.countDocuments({}, function(err, c) {
      console.log('count', c);
      console.log('newClient', newClient)
      newClient.id = c + 1;
      if(newClient.id < 10)
      newClient.JobId = 'JOB000' + newClient.id;
      else if(this.id < 100)
      newClient.JobId = 'JOB00' + newClient.id;
      else if(this.id < 1000)
      newClient.JobId = 'JOB0'+newClient.id;
      else
        newClient.JobId = 'JOB'+ newClient.id.toString();
      newClient.timesheetId = timesheet._id;
      newClient.totalStaff = 0;
      let departments = [];
      newClient.shifts.forEach(element => {
        for (let i = 0; i < element.total; i++) {
          element.workers[i] = {
            role: element.role,
            startTime: element.startTime,
            endTime: element.endTime
          }
        }
        newClient.shifts.workers = element.workers;
        newClient.totalStaff += element.total;
        departments.push(element.department);
      });
      newClient.save((err) => {
        if (err) {
          console.log(err)
          res.status(500).json(err);
        } else {
          console.log('newJob', newClient);
          job_id = newClient._id;
          console.log('job_id', job_id);
          //  create timesheet for given job
          Timesheet.findOne({}).then(client => {
            delete req.body._id;
            console.log('create job req', req.body);
            // const timesheet = new Timesheet(req.body);
            timesheet.statusStr = 'In Progress';
            Timesheet.countDocuments({}, function(err, c) {
              console.log(req.body)
              console.log(timesheet)
              console.log('location count document')
              timesheet.id = c + 1;
              if(timesheet.id < 10)
              timesheet.timesheetId = 'TS000' + timesheet.id;
              else if(this.id < 100)
              timesheet.timesheetId = 'TS00' + timesheet.id;
              else if(this.id < 1000)
              timesheet.timesheetId = 'TS0'+timesheet.id;
              else
              timesheet.timesheetId = 'TS'+ timesheet.id.toString();
              timesheet.JobId_Id = job_id;
              timesheet.totalStaff = newClient.totalStaff;
              timesheet.departments = departments.join(' / ');
              console.log('departments', timesheet.departments);
              timesheet.save((err) => {
                if (err) {
                  console.log(err)
                } else {
                  timesheet_id = timesheet._id;
                }
              });
            })
          });
          if(req.body.accountType == 'Client'){
            User.findById(req.body.clientId, function(err, user) {
              if (!user)
                res.status(404).send("data is not found");
              else {
                readHTMLFile((path.join(__dirname, '../public/pages/AdminJobNotification.php')), function(err, html) {
                  console.log('==found==', user)
                  const name = user.firstName + ' ' + user.lastName ;
                  const shiftdate = dateFormat(req.body.shiftDate, "fullDate").toString();
                  console.log('==shiftdate==', shiftdate)
                  var template = handlebars.compile(html);
                  var replacements = {
                    name: name,
                    shiftdate:shiftdate,
                    totalStaff: newClient.totalStaff,
                  };
                  console.log('replacements', replacements);
                  var htmlToSend = template(replacements);
                  var mailOptions = {
                      from: 'my@email.com',
                      to : 'admin@admin.com',
                      subject : 'New job request from '+name,
                      html : htmlToSend
                    };
                    transport.sendMail(mailOptions, function (error, info) {
                    if (error) {
                      if (error) {
                        console.log(error);
                        return res.status(401).json(error)
                      }
                    }
                  });
                });
              }
            })
          }
          // res.status(200).json(newClient);
          Job.findOne({id:newClient.id}).populate('clientId').exec(function (err, client){
            if (err) return res.json(err, 400);
            res.status(200).json(client);
          });
        }
      });
    })
  });

};
exports.updateJob = (req, res) => {

  console.log('updateJob', req.body);

  Job.findById(req.body._id, function(err, client) {
      if (!client)
        res.status(404).send("data is not found");
      else {
        console.log('old client', client.shifts[0].workers)
        const oldshifts = client.shifts;
        // const workers = [];
        Object.assign(client, req.body);
        client.totalStaff = 0;
        // if(oldshifts.length > client.shifts.length ){
          console.log('==shift length==', oldshifts.length, client.shifts.length);
          client.shifts.forEach((element, x) => {
            for (let i = 0; i < element.total; i++) {

              element.workers[i] = {
                role: element.role,
                startTime: element.startTime,
                endTime: element.endTime,
                workerId: oldshifts[x] && oldshifts[x].workers[i] && oldshifts[x].workers[i].workerId ? oldshifts[x].workers[i].workerId : null
              }
            }
            client.shifts.workers = element.workers;
            console.log('shift element', client.shifts.workers);
            client.totalStaff += element.total;
          });
        // }
        client.save().then(client => {
          Timesheet.findById(client.timesheetId, function(err, timesheet) {
            if (!timesheet)
              res.status(404).send("timesheet is not found");
            else {
              console.log('timesheet', timesheet)
              let timesheetObj = {
                shiftDate: req.body.shiftDate,
                // shifts: client.shifts,
                // workers: workers,
                totalStaff: client.totalStaff,
              }
              Object.assign(timesheet, timesheetObj);
              timesheet.save().then(timesheet => {
                console.log('timesheet updated', timesheet);
              })
              .catch(err => {
                res.status(400).send(err);
              });
            }
          })
          Job.findOne({id:client.id}).populate('clientId').exec(function (err, client){
            if (err) return res.json(err, 400);
            else
              res.status(200).json(client);
          });
          // res.status(200).json(client);
        })
        .catch(err => {
          res.status(400).send(err);
        });
      }
  });
};
exports.setJobWorkers = (req, res) => {
  console.log('--setJobWorkers--',req.body.data);
  Job.findOne({id:req.body.data.job_id}, function(err, client) {
    if (!client){
        console.log('data is not found')
        res.status(404).send("data is not found");
    }
    else {
      client.totalStaff = 0;
      client.shifts.forEach((element, i) => {
        console.log('--worker--', element._id, req.body.data.shiftId,  element._id == req.body.data.shiftId)
        if(element._id == req.body.data.shiftId){
          console.log('--workers--', req.body.data.workers);
          client.shifts[i].workers = req.body.data.workers;
          client.shifts[i].total = req.body.data.workers.length;
        }

        client.totalStaff += client.shifts[i].total;

      });

      client.save().then(client => {
        console.log('--client save--', client)
        const workers = [];
        Timesheet.findById(client.timesheetId, function(err, timesheet) {
          if (!timesheet)
            res.status(404).send("timesheet is not found");
          else {
            console.log('timesheet', timesheet)
            client.shifts.forEach(shift => {
              shift.workers.forEach(element => {
                if(element.workerId != null){
                  workers.push(element);
                }
              });
            });
            console.log('--workers--', workers);
            timesheet.workers = workers;
            timesheet.totalStaff = client.totalStaff;
            timesheet.save().then(timesheet => {
              console.log('timesheet updated', timesheet)
            });
          }
        })
        // res.status(200).json(client);
        Job.findOne({id:req.body.data.job_id}).populate('clientId').exec(function (err, client){
          if (err) return res.json(err, 400);
          res.status(200).json(client);
        });
      })
      .catch(err => {
          res.status(400).send("Update not possible");
      });

    }
  });
};
exports.getAll = (req, res) => {
  console.log('--req--', req.body.id)
  Job.find({clientId:req.body.id}).sort({ 'createdAt': -1 }).populate(['clientId','timesheetId']).exec(function(err, client) {
      if (err) {
          console.log(err);
      } else {
          res.json(client);
      }
  })
}
exports.getClientTimesheets = (req, res) => {
  console.log('--req--', req.body.id)
  Timesheet.find({clientId:req.body.id}).sort({ 'createdAt': -1 }).populate(['JobId_Id','clientId','workers.workerId']).exec(function(err, client) {
      if (err) {
          console.log(err);
      } else {
          res.json(client);
      }
  })
}
exports.getAllJob = (req, res) => {
  Job.find({}).sort({ 'createdAt': -1 }).populate({
      path: 'clientId',
      model: 'User'
  }).
  populate({
      path: 'timesheetId',
      model: 'Timesheet',
      populate: {
          path: 'workerId',
          model: 'User'
      }
  }).exec(function(err, client) {
      if (err) {
          console.log(err);
      } else {
          res.json(client);
      }
  })
}
exports.getAllJobs = (req, res) => {

  Job.find({}).sort({ 'createdAt': -1 }).populate(['clientId','timesheetId', 'shifts.workers.workerId']).exec(function(err, client) {
      if (err) {
        console.log('err',err);
      } else {

        res.json(client);
      }
  });
}
exports.getAllTimesheets = (req, res) => {

  Timesheet.find({}).sort({ 'createdAt': -1 }).populate(['JobId_Id','clientId','workers.workerId']).exec(function(err, client) {
      if (err) {
        console.log('err',err);
      } else {

        res.json(client);
      }
  });
}
exports.setTimesheetDraft = (req, res) => {
  console.log('setTimesheetDraft', req.body)
  Timesheet.findById(req.body.id, function(err, timesheet) {
    if (!timesheet)
      res.status(404).send("data is not found");
    else {
      timesheet.workers = req.body.workers;
      timesheet.save().then(timesheet => {
        Timesheet.findOne({id:timesheet.id}).populate('workers.workerId').exec(function (err, client){
          if (err) return res.json(err, 400);
          res.status(200).json(client);
        });
      })
      .catch(err => {
        res.status(400).send("Update not possible");
      });
    }
  });
};
exports.updateTimesheet = (req, res) => {
  console.log('updateTimesheet', req.body)
  Timesheet.findById(req.body.id, function(err, timesheet) {
    if (!timesheet)
      res.status(404).send("data is not found");
    else {
      timesheet.statusStr = req.body.status;
      timesheet.workers = req.body.workers;
      timesheet.save().then(timesheet => {
        Job.findOne({timesheetId : req.body.id}, function(err, Job) {
          if (!Job)
            res.status(404).send("data is not found");
          else {
            Job.statusStr = req.body.status;
            Job.save().then(Job => {
              console.log('Job updated', Job)
            });
          }
        });
        res.status(200).json(timesheet);
      })
      .catch(err => {
        res.status(400).send("Update not possible");
      });
    }
  });
};
////////////////////////////
function comparer(otherArray){
  return function(current){
    return otherArray.filter(function(other){
      return other.role == current.role && other.startTime == current.startTime && other.endTime == current.endTime && other.workerId == current.workerId
    }).length == 0;
  }
}
////////////////////////////
exports.emailshiftDetail = (req, res) => {
  console.log('--email obj--', req.body);
  console.log('--email old obj--', req.body.old_Data.shift.workers);
  var a = req.body.workers;
  var b = req.body.old_Data.shift.workers;
  var onlyInReq = a.filter(comparer(b));
  var onlyInOld = b.filter(comparer(a));

  result = onlyInReq.concat(onlyInOld);
  console.log('onlyInReq', onlyInReq, onlyInReq.length);
  console.log('onlyInOld', onlyInOld, onlyInOld.length);
  console.log('equal', JSON.stringify(onlyInReq) === JSON.stringify(onlyInOld));
  console.log('obj old obj diff', result);

  let job;
  Job.findOne({id: req.body.data.id}).then(client => {
    if (client) {
        job = client;
        console.log('==job==', job);
        // no diffreance in shift details
        if(job){
          req.body.workers.forEach(worker => {
            User.findById(worker.workerId, function(err, user) {
              if (!user)
                res.status(404).send("data is not found");
              else {
                readHTMLFile((path.join(__dirname, '../public/pages/ShiftDetails.php')), function(err, html) {
                  console.log('==found==', user)
                  const name = user.forename + ' ' + user.surename ;
                  const shiftdate = dateFormat(req.body.data.shiftDate, "fullDate").toString();
                  var template = handlebars.compile(html);
                  var replacements = {};
                  if(job.additionalInformation !== '' && job.locationShift !== ''){
                    replacements = {
                      name: name,
                      shiftdate:shiftdate,
                      worker: worker,
                      data: req.body.data,
                      location:job.locationShift ? job.locationShift : '',
                      comments:job.additionalInformation ? job.additionalInformation : '',
                      commentString:'Comments:',
                      locationString:'Location:',
                    };
                  }
                  else if(job.additionalInformation !== '' && job.locationShift === '') {
                    replacements = {
                      name: name,
                      shiftdate:shiftdate,
                      worker: worker,
                      data: req.body.data,
                      comments:job.additionalInformation,
                      commentString:'Comments:',
                    };
                  }
                  else if(job.additionalInformation === '' && job.locationShift !== '') {
                    replacements = {
                      name: name,
                      shiftdate:shiftdate,
                      worker: worker,
                      data: req.body.data,
                      location:job.locationShift,
                      locationString:'Location:',
                    };
                  }
                  else{
                    replacements = {
                      name: name,
                      shiftdate:shiftdate,
                      worker: worker,
                      data: req.body.data
                    };
                  }
                  var htmlToSend = template(replacements);
                  var mailOptions = {
                      from: 'my@email.com',
                      to : user.emailAddress,
                      subject : 'You have been assigned a new shift (ID #'+job.JobId+')',
                      html : htmlToSend
                    };
                    transport.sendMail(mailOptions, function (error, info) {
                    if (error) {
                      console.log(error);
                      return res.status(401).json(error)
                    }
                    else{
                      return res.status(200).json('email sent');
                    }
                  });
                });
              }
            });
          });
        }
    } else {
      res.status(404).send("data is not found");
    }
  });
}
exports.setStatusJob = (req, res) => {
  console.log('setStatusJob')
  console.log(req.body)
  Job.findOne({id:req.body.id}, function(err, client) {
      if (!client)
          res.status(404).send("data is not found");
      else {
          // Object.assign(client, req.body);
          if(req.body.status == 1 || req.body.status == 2 || req.body.status == 3 ){
              if(req.body.status == 1){
               client.statusStr = 'In Progress';
              }else if(req.body.status == 2){
                  client.statusStr = 'Timesheet Submitted';
              }else if(req.body.status == 3){
                  client.statusStr = 'Completed';
              }
          }else{
              client.statusStr = req.body.status;
          }

          client.save().then(client => {
            console.log(':client._id', client._id)
            Timesheet.findOne({JobId_Id:client._id}, function(err, timesheet) {
              if (!timesheet)
                res.status(404).send("data is not found");
              else {
                console.log('client.statusStr', client.statusStr)
                timesheet.statusStr = client.statusStr;
                timesheet.save().then(timesheet => {
                  console.log("Updated");
                }).catch(err => {
                  console.log("Update not possible");
                });
              }
            });
              // res.status(200).json(client);
            Job.findOne({id:client.id}).populate('clientId').exec(function (err, client){
              if (err) return res.json(err, 400);
              res.status(200).json(client);
            });
          })
          .catch(err => {
              res.status(400).send("Update not possible");
          });
      }
  });
};
exports.getCurrentJob = (req, res) => {

  Job.findOne({id:req.body.id}, function(err, client) {
      if (!client)
          res.status(404).send("data is not found");
      else {
          // Object.assign(client, req.body);
          if(req.body.status == 1 || req.body.status == 2 || req.body.status == 3 ){
              if(req.body.status == 1){
               client.statusStr = 'In Progress';
              }else if(req.body.status == 2){
                  client.statusStr = 'Timesheet Submitted';
              }else if(req.body.status == 3){
                  client.statusStr = 'Completed';
              }
          }else{
              client.statusStr = req.body.status;

          }

          client.save().then(client => {
              // res.status(200).json(client);
            Job.findOne({id:client.id}).populate('clientId').exec(function (err, client){
              if (err) return res.json(err, 400);
              res.status(200).json(client);
            });
          })
          .catch(err => {
              res.status(400).send("Update not possible");
          }); }
  });
};
exports.updateInvoicsInfo = (req, res) => {

  InvoiceInfo.findOne({id:1}, function(err, invoice) {
    if (!invoice)
    {
      const newInvoice = new InvoiceInfo(req.body);
      newInvoice.save().then(invoice => {
        res.status(200).json(invoice);
      })
      .catch(err => {
        res.status(400).send("Update not possible");
      });
    }
    else {
      console.log('InvoiceInfo', req.body)
      Object.assign(invoice, req.body)
      invoice.save().then(invoice => {
        res.status(200).json(invoice);
      })
      .catch(err => {
        res.status(400).send("Update not possible");
      });
    }
  });
};
exports.invoiceInfo = (req, res) => {
  InvoiceInfo.findOne({id:1}).exec(function(err, invoice) {
    if (err) {
      console.log(err);
    } else {
      res.json(invoice);
    }
  })
};
exports.getAllPayroll = (req, res) => {
  Payroll.find({}).sort({ 'timestamp': -1 }).exec(function(err, client) {
    if (err) {
      console.log(err);
    } else {
      res.json(client);
    }
  })
}
function getAge(dateString) {
  var today = new Date();
  var birthDate = new Date(dateString);
  var age = today.getFullYear() - birthDate.getFullYear();
  var m = today.getMonth() - birthDate.getMonth();
  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
      age--;
  }
  return age;
}
function getDefaultRates(){
  return new Promise((resolve,reject)=>{
    var timesheetData = [];
    Timesheet.find({exportStatus: false, statusStr:'Completed'}).populate(['JobId_Id', 'workers.workerId', 'clientId']).exec(function(err, timesheets) {
      if (err) {
        console.log('error', err);
        reject(err);
      } else {
        console.log('==timesheet==', timesheets)
        if (!(timesheets.length >0)){
          resolve(timesheetData);
        }else{
        InvoiceInfo.findOne({id:1}, function(err, invoiceinfo) {
          DefaultRates.find({}, function(err, defaultRates) {
            if (defaultRates)
            {
              var mainbar = new Promise((resolve, reject)=>{
                timesheets.forEach(timesheet => {
                  var inv_workers = [];var invoiceWorkers = [];
                  console.log('--customRates--')
                  console.log('element', timesheet.workers);
                  var innerbar = new Promise((resolve,reject)=>{
                    timesheet.workers.forEach((worker) => {
                      let tempRate = 0;  let chargeRate = 0;
                      let age = getAge(worker.workerId.dateBirth);
      
                      // client charge rate
                      let chargerateU25 = 0 ; let chargerateO25 = 0;
                      let defaultRate = defaultRates.filter(x => x.role === worker.role);
                      defaultRate = defaultRate[0];
                      console.log('defaultRate', defaultRate);
                      chargerateU25 = defaultRate['chargerateU25'];
                      console.log('chargerateU25', chargerateU25);
                      chargerateO25 = defaultRate['chargerateO25'];
                      console.log('chargerateO25', chargerateO25);
                      // worker pay rate
                      payrateU25 = defaultRate['payrateU25'];
                      console.log('payrateU25', payrateU25);
                      payrateO25 = defaultRate['payrateO25'];
                      console.log('payrateO25', payrateO25);
      
                      tempRate = age < 25 ? payrateU25 : payrateO25;
                      console.log('tempRate', tempRate);
                      // worker net
                      let WR_UNITS = parseFloat(worker.hours.replace(':','.'))*tempRate;
                      console.log('WR_UNITS', WR_UNITS);
      
                      chargeRate = age < 25 ? chargerateU25 : chargerateO25;
                      console.log('chargeRate', chargeRate);
                      let inv_WR_net = parseFloat(worker.hours.replace(':','.'))*chargeRate;
                      console.log('inv_WR_net', inv_WR_net);
                      WR_UNITS = WR_UNITS.toFixed(2);
                      inv_WR_net = inv_WR_net.toFixed(2);
                      var obj ={
                        timesheet_id: timesheet.timesheetId,
                        WR_REF : worker.workerId.workerId,
                        WR_UNITS: WR_UNITS,
                        WR_TRNCDE :'p001',
                        WR_RATE : tempRate,
                        type : "Export Timesheets",
                        response : "Successful"
                      }
                      timesheetData.push(obj);
                      var inv_worker = {
                        workerId: worker.workerId._id,
                        chargeRate: chargeRate,
                        payRate: tempRate,
                        hours: parseFloat(worker.hours.replace(':','.')),
                        net: inv_WR_net,
                        client_Id: timesheet.clientId
                      }
                      inv_workers.push(inv_worker);
                      console.log('inv_worker', inv_worker);
                      resolve();
                    });
                  });
                  innerbar.then(()=>{
                    const invoice = new Invoice();
                    console.log('All done!', inv_workers);
                    invoiceWorkers.push(inv_workers);
                    console.log('invoiceWorkers', invoiceWorkers)
                    invoice.invoiceDate = new Date();
                    invoice.invoiceDueDate =  moment().add(invoiceinfo.dueDate, 'd').format('dddd, MMMM DD,YYYY');
                    invoice.workers = invoiceWorkers[0];
                    invoice.client_Id = timesheet.clientId
                    invoice.timesheetId = timesheet.timesheetId;
                    invoice.timesheetId_id = timesheet._id;
                    invoice.invoiceId = timesheet.timesheetId.replace(/TS/g, "INV");
                    invoice.totalVat = invoiceinfo.vat;
      
                    invoice.save().then(inv => {
                      console.log("invoice", inv);
                      resolve();
                    })
                    .catch(err => {
                      console.log("invoice not created", err);
                    });
                  });
                  // Timesheet.updateMany({exportStatus: false, statusStr:'Completed'}, {"$set":{"exportStatus": true}}, {"multi": true}, (err, writeResult) => {});
                });
              });
  
            }
            mainbar.then(()=>{
              resolve(timesheetData);
              // res.json(timesheetData);
            });
          });
        })
      }
      }
    })
  });
}
function getcustomRatesUpdation(){
  var timesheetData = [];
  return new Promise((resolve)=>{
    Timesheet.find({exportStatus: false, statusStr:'Completed'}).populate(['JobId_Id', 'workers.workerId', 'clientId']).exec(function(err, timesheets) {
      if (err) {
        console.log('error', err);
      } else {
        console.log('==timesheet==', timesheets)
        var bar = new Promise((resolve)=>{
          timesheets.forEach((timesheet,index) => {
            CustomRates.find({clientId: timesheet.clientId}, function(err, customRates) {
              if (customRates) {
                var inv_workers = []; var invoiceWorkers = [];
                console.log('--customRates--')
                console.log('element', timesheet.workers);
                var innerbar = new Promise((resolves)=>{
                  timesheet.workers.forEach((worker, i) => {
                    let tempRate = null;  let chargeRate = null; let inv_WR_net = null; let WR_UNITS = null;
                    let age = getAge(worker.workerId.dateBirth);
      
                    // client charge rate
                    let chargerateU25 = 0 ; let chargerateO25 = 0;
                    let customRate = customRates.filter(x => x.role === worker.role);
                    customRate = customRate[0];
                    console.log('customRate', customRate);
                    chargerateU25 = customRate['chargerateU25'] > 0 ? customRate['chargerateU25'] : null;
                    console.log('chargerateU25', chargerateU25);
                    chargerateO25 = customRate['chargerateO25'] > 0 ? customRate['chargerateO25'] : null;
                    console.log('chargerateO25', chargerateO25);
                    // worker pay rate
                    payrateU25 = customRate['payrateU25'] > 0 ? customRate['payrateU25'] : null;
                    console.log('payrateU25', payrateU25);
                    payrateO25 = customRate['payrateO25'] > 0 ? customRate['payrateO25'] : null;
                    console.log('payrateO25', payrateO25);
      
                    tempRate = age < 25 ? payrateU25 : payrateO25;
                    console.log('tempRate', tempRate);
                    // worker net
                    if(tempRate !== null){
                      WR_UNITS = parseFloat(worker.hours.replace(':','.'))*tempRate;
                      console.log('WR_UNITS', WR_UNITS);
                      WR_UNITS = WR_UNITS && WR_UNITS.toFixed(2);
                    }
      
                    chargeRate = age < 25 ? chargerateU25 : chargerateO25;
                    console.log('chargeRate', chargeRate);
                    if(chargeRate !== null){
                      inv_WR_net = parseFloat(worker.hours.replace(':','.'))*chargeRate;
                      console.log('inv_WR_net', inv_WR_net);
                      inv_WR_net = inv_WR_net && inv_WR_net.toFixed(2);
                    }
                    var obj ={
                      timesheet_id: timesheet.timesheetId,
                      WR_REF : worker.workerId.workerId,
                      WR_UNITS: WR_UNITS,
                      WR_TRNCDE :'p001',
                      WR_RATE : tempRate,
                      type : "Export Timesheets",
                      response : "Successful"
                    }
                    timesheetData.push(obj);
                    var inv_worker = {
                      workerId: worker.workerId._id,
                      chargeRate: chargeRate,
                      payRate: tempRate,
                      hours: parseFloat(worker.hours.replace(':','.')),
                      net: inv_WR_net,
                      client_Id: timesheet.clientId
                    }
                    inv_workers.push(inv_worker);
                    console.log('inv_worker', inv_worker);
      
                    if(index === timesheets.length-1 && i === timesheet.workers.length-1){
                      // res.json(timesheetData);
                      resolves();
                    }
      
                  });
                });
                innerbar.then(()=>{
                  let inID = timesheet.timesheetId.replace(/TS/g, "INV");
                  Invoice.findOne({invoiceId:inID}, function(err, invoice) {
                    console.log('All done!', inv_workers);
                    invoiceWorkers.push(inv_workers);
                    console.log('invoiceWorkers', invoiceWorkers)
                    invoiceWorkers = invoiceWorkers[0];
                    invoice.workers.forEach((ele, i) => {
                      let invoiceWorker = invoiceWorkers[i];
                      console.log('--invoiceWorker', invoiceWorkers[i]);
                      if(invoiceWorker.chargeRate !== null)
                        ele.chargeRate = invoiceWorker.chargeRate;
                      if(invoiceWorker.payRate !== null)
                        ele.payRate = invoiceWorker.payRate;
                      if(invoiceWorker.net !== null)
                        ele.net = invoiceWorker.net;
                    });
                    invoice.save().then(inv => {
                      console.log("saved invoice", inv);
                    })
                    .catch(err => {
                      console.log("invoice not created", err);
                    });
                  })
                  resolve();
                });
                // const invoice = new Invoice();
              }
            });
          });
        });
        bar.then(()=>{
          resolve(timesheetData);
          // return timesheetData
          // res.json(timesheetData)
        });
      }
    })
  });
}
function getworkerRatesUpdation(){
  var timesheetData = [];
  return new Promise((resolve)=>{

    Timesheet.find({exportStatus: false, statusStr:'Completed'}).populate(['JobId_Id', 'workers.workerId', 'clientId']).exec(function(err, timesheets) {
      if (err) {
        console.log('error', err);
      } else {
        // console.log('==timesheet==', timesheets)
  
        var bar = new Promise((resolve, reject) => {
          timesheets.forEach((timesheet, index) => {
            var inv_workers = [];var invoiceWorkers = [];
            // console.log('element', timesheet.workers);
            var innerbar = new Promise((resolves, reject) => {
              timesheet.workers.forEach((worker, i) => {
                inv_workers = [];
                WorkerRates.find({clientId: worker.workerId}, function(err, workerRates) {
                  if (workerRates)
                  {
                    console.log('--workerRates--', workerRates)
                    let tempRate = 0;  let chargeRate = 0; let WR_UNITS = null;
                    let age = getAge(worker.workerId.dateBirth);
  
                    let workerRate = workerRates.filter(x => x.role === worker.role);
                    workerRate = workerRate[0];
                    payrateU25 = workerRate['payrateU25'] > 0 ? workerRate['payrateU25'] : null;
                    payrateO25 = workerRate['payrateO25'] > 0 ? workerRate['payrateO25'] : null;
  
                    tempRate = age < 25 ? payrateU25 : payrateO25;
                    console.log('tempRate', tempRate)
                    // worker net
                    if(tempRate !== null){
                      WR_UNITS = parseFloat(worker.hours.replace(':','.'))*tempRate;
                      WR_UNITS = WR_UNITS.toFixed(2);
                    }
                    var obj ={
                      timesheet_id: timesheet.timesheetId,
                      WR_REF : worker.workerId.workerId,
                      WR_UNITS: WR_UNITS,
                      WR_TRNCDE :'p001',
                      WR_RATE : tempRate,
                      type : "Export Timesheets",
                      response : "Successful"
                    }
                    timesheetData.push(obj);
                    console.log('timesheetData', timesheetData);
                    var inv_worker = {
                      workerId: worker.workerId._id,
                      payRate: tempRate,
                      hours: parseFloat(worker.hours.replace(':','.')),
                      client_Id: timesheet.clientId
                    }
                    inv_workers.push(inv_worker);
                    if (i === timesheet.workers.length-1){
                      resolves();
                    }
                  }
                });
              });
            });
            innerbar.then(()=> {
              console.log('inside inner bar')
              let inID = timesheet.timesheetId.replace(/TS/g, "INV");
              Invoice.findOne({invoiceId:inID}, function(err, invoice) {
                invoiceWorkers.push(inv_workers);
                invoiceWorkers = invoiceWorkers[0];
  
                invoice.workers.forEach((ele, i) => {
                  let invoiceWorker = invoiceWorkers[i];
                  console.log('--invoiceWorker', invoiceWorkers[i]);
                  if (invoiceWorker.payRate !== null)
                    ele.payRate = invoiceWorker.payRate;
                });
                invoice.save().then(inv => {
                  console.log("worker rates saved invoice", inv);
                  // res.send(inv);
                })
                .catch(err => {
                  console.log("invoice not created", err);
                });
              });
            });
            if (index === timesheets.length-1){
              resolve();
            }
            Timesheet.updateMany({exportStatus: false, statusStr:'Completed'}, {"$set":{"exportStatus": true}}, {"multi": true}, (err, writeResult) => {
            });
          });
        });
        bar.then(() => {
          resolve(timesheetData)
          // console.log('timesheetData', timesheetData)
          // res.json('successfull');
        });
      }
    })
  });
}
function getSelectedInvoices(req){
  return new Promise((resolve,reject)=>{
    Invoice.find({ timesheetId : { $in : req } }).sort({ 'timesheetId': 1 }).populate(['client_Id','workers.workerId']).exec(function(err, client) {
        if (err) {
            console.log(err);
            reject(err);
        } else {
          resolve(client);
            // res.json(client);
        }
    })
  });

}
exports.getExportTimesheets = (req, res) => {
  let defaultRateObjs = [];
  let finalRateObjs = [];
  getDefaultRates().then(
    data=>{
      if(data.length > 0){
        defaultRateObjs = data;
        getcustomRatesUpdation().then(resp=>{
          if(resp.length > 0){
            getworkerRatesUpdation().then((resp)=>{
              const unique = [...new Set(defaultRateObjs.map(item => item.timesheet_id))];
              console.log('unique', unique);
              getSelectedInvoices(unique).then(response=>{
                if(response.length > 0){
                  let workers = [];
                  const workerArr = response.map(invoice => (invoice.workers));
                  workerArr.forEach(ele => {
                  workers.push(...ele);})
                  defaultRateObjs.forEach((ele, i) => {
                  ele.WR_RATE = workers[i].payRate;
                  ele.WR_UNITS = workers[i].payRate*workers[i].hours;
                  finalRateObjs.push(ele);
                  });
                  res.json(finalRateObjs)
                }
              });
            });
          }
        });
      }
      else{
        res.json(finalRateObjs)
      }
    }
    );
}
// exports.getExportTimesheets = (req, res) => {
//   getDefaultRates().then(
//     data=>res.json(data)
//     );
// }

// exports.customRatesUpdation = (req, res) => {
//   getcustomRatesUpdation().then(data=>res.json(data));

// }

// exports.workerRatesUpdation = (req, res) => {
//   getworkerRatesUpdation().then(()=>res.json('successfull'));
// }

exports.getPayslips = (req, res) => {
  console.log('===  workedId ====', req.body._id)
    Payslip.find({workerId: req.body._id}).populate(['workerId','work.client_Id']).exec(function(err, payslips) {
      if (err) {
        console.log('err',err);
      } else {
        console.log('==Payslip==', payslips);
        res.json(payslips);
      }
  });
}
exports.getClientInvoices = (req, res) => {
  Invoice.find({client_Id:req.body.id, status:'Complete' }).sort({ 'invoiceDate': -1 }).populate(['client_Id','workers.workerId']).exec(function(err, client) {
      if (err) {
          console.log(err);
      } else {
          res.json(client);
      }
  })
}
exports.getAllInvoices = (req, res) => {
  Invoice.find({status:'Complete'}).sort({ 'invoiceDate': -1 }).populate(['client_Id','workers.workerId']).exec(function(err, client) {
      if (err) {
          console.log(err);
      } else {
          res.json(client);
      }
  })
}
// exports.getSelectedInvoices = (req, res) => {
//   gettSelectedInvoices(req).then(client=>res.json(client));
//   // console.log('req', req.body)
//   // Invoice.find({ timesheetId : { $in : req.body.inv_ids } }).sort({ 'timesheetId': 1 }).populate(['client_Id','workers.workerId']).exec(function(err, client) {
//   //     if (err) {
//   //         console.log(err);
//   //     } else {
//   //         res.json(client);
//   //     }
//   // })
// }
exports.getFindTimesheets = (req, res) => {
  if(req.body.userType == "Client"){
    Timesheet.find({statusStr:req.body.status, clientId:req.body.id }).exec(function(err, client) {
      if (err) {
          console.log(err);
      } else {
          res.json(client);
      }
    })
  }
  else{
    Timesheet.find({statusStr:req.body.status}).exec(function(err, client) {
        if (err) {
            console.log(err);
        } else {
            res.json(client);
        }
    })
  }
}
exports.getWorkerJob = (req, res) =>{
  console.log('===  workedId ====', req.body._id)
  var workerJobs  = [];
  Timesheet.find({}).populate(['clientId']).exec(function(err, timesheets) {
    if (err) {
      console.log('err',err);
    } else {
      console.log('==timesheets==', timesheets);
      timesheets.forEach(element => {
        element.workers.forEach(ele => {
          console.log('==workers==', ele);
          if (ele.workerId == req.body._id){
            var data = {
              workers: ele,
              clientId: element.clientId,
              statusStr: element.statusStr,
              shiftDate: element.shiftDate,

            }
            console.log('==worker==', data);
            // element.workers = [];
            // element.workers.push(ele);
            workerJobs.push(data);
          }
        });
      });
      res.json(workerJobs);
    }
  });
}
exports.getClientJob= (req, res) =>{
  Job.find({'clientId':req.body._id}, function(err, client){
    if (!client)
      res.status(404).send("data is not found");
    else {
      console.log('client job', client);
      res.status(200).json(client);
    }
  })
}
exports.updateStatus = (req, res) => {
  console.log('updateStatus', req.body),
      // var clientId = req.clientId;
      // if (role == 0){
  Job.findOne({id:req.body.id}, function(err, client) {
      if (!client)
          res.status(404).send("data is not found");
      else {
          // Object.assign(client, req.body);
          client.statusStr = req.body.str;
          client.save().then(client => {
              res.status(200).json(client);
          })
          .catch(err => {
              res.status(400).send("Update not possible");
          });
      }

  });
};
exports.removeJob = (req, res) =>{
  console.log('removeJob', req.body)
  Job.findOneAndDelete({ id: req.body.id }, function(err) {
    if (err) res.json(err);
    else{
      Timesheet.findOneAndDelete({ _id: req.body.timesheetId }, function(err) {
        if (err) res.json(err);
      });
      res.status(200).send("Job and related Timesheet Removed");
    }
  });
}
exports.getGenerateWorkerID = async(req, res) => {
    console.log('getGereanteworkerID')
    var nowDay = new Date().getDay();
    if(nowDay == 0){
        nowDay = 7;
    }
    var gtDate = new Date();
    gtDate.setDate(gtDate.getDate() - nowDay);
    gtDate.setHours(23,59,59);
    var gt1Date = new Date();
    gt1Date.setDate(gt1Date.getDate() - nowDay - 6);
    gt1Date.setHours(0,0,0);
    // var gt2Date = new Date();
    // gt2Date.setDate(gt2Date.getDate() - nowDay - 7);

    // const userArrObj = await User.find({createdDate:{ $gte: gt1Date, $lte: gtDate}});
    const userArrObj = await User.find({accountType:'Worker', createdDate:{ $gte: gt1Date, $lte: gtDate}});
    // periodStart:{$gte:gt1Date,$lte:gtDate}
    userArrObj.forEach((ele,index,arry) =>{
        Payroll.findOne({}).then(client => {
            if (client)
                return res.status(200).json({ fullname: "Job already exists" });
            // } else {
                delete req.body._id;
                console.log('cccc');
                var tempObj ={
                    workerId : ele._id,
                    periodStart : gt1Date,
                    periodEnd : gtDate,
                    type : "Generated IDs",
                    response : "Successful",
                    firstName : 'Admin',
                    lastName : '',
                    timestamp : new Date(),
                }
                const newClient = new Payroll(tempObj);

                Payroll.countDocuments({}, function(err, c) {
                    console.log(req.body)
                    console.log(newClient)
                    console.log('location count document')
                    newClient.id = c + 1;
                    if(newClient.id < 10)
                    newClient.logID = 'LOG000' + newClient.id;
                    else if(this.id < 100)
                    newClient.logID = 'LOG00' + newClient.id;
                    else if(this.id < 1000)
                    newClient.logID = 'LOG0'+newClient.id;
                    else
                         newClient.JobId = 'LOG'+ newClient.id.toString();
                    newClient.save((err) => {
                        if (err) {
                            console.log(err)
                            res.status(500).json(err);
                        } else {
                            console.log(newClient);
                            if(index == (arry.length - 1)){
                                Payroll.find({},function(err, cresult){
                                    if(cresult){
                                          res.status(200).json(cresult)
                                    }
                                })
                            }
                        }
                    });
                })

            // }
        });
        // userArr.push(ele._id);

    })
}
exports.getImportPayroll = (req, res) => {
  const rows = req.body.rows;
  const user = req.body.user;
  ///// for current week check /////
  const now = moment().subtract(1, 'isoWeek').startOf('isoWeek');
  const end = moment().subtract(1, 'isoWeek').endOf('isoWeek');
  // console.log('current', now,end);
  ///// for current week check ends /////
  var status = 'Successful';
  generateInvoices(now, end);
  generatePayslips(rows, now, end);
  var payrollData ={
    periodStart : now,
    periodEnd : end,
    type : "Import Payroll",
    response : status,
    firstName : user,
    timestamp : new Date()
  }
  const payroll = new Payroll(payrollData);
  Payroll.countDocuments({}, function(err, c) {
    payroll.id = c + 1;
    if(payroll.id < 10)
    payroll.logID = 'LOG000' + payroll.id;
    else if(this.id < 100)
    payroll.logID = 'LOG00' + payroll.id;
    else if(this.id < 1000)
    payroll.logID = 'LOG0'+payroll.id;
    else
    payroll.logID = 'LOG'+ payroll.id.toString();
    payroll.save((err) => {
      if (err) {
        console.log(err)
        res.status(500).json(err);
      } else {
        Payroll.find({},function(err, cresult){
          if(cresult){
            res.status(200).json(cresult)
          }
        });
      }
    });
  })
}

function generateInvoices(now, end){
  Invoice.find({status: 'Pending'}).populate(['workers.workerId', 'client_Id']).exec(function(err, invoices) {
    if (err) {
      console.log('err',err);
    } else {
      invoices.forEach(element => {
        readHTMLFile((path.join(__dirname, '../public/pages/invoice.php')), async function(err, html) {
          const name = element.client_Id.firstName + ' ' + element.client_Id.lastName ;
          const periodStart = dateFormat(now, "fullDate").toString();
          const periodEnd = dateFormat(end, "fullDate").toString();
          let created = element.invoiceDate;
          let due = element.invoiceDueDate;
          created = moment(created).format('dddd, MMMM DD,YYYY');
          due = moment(due).format('dddd, MMMM DD,YYYY');
          // data for invoice attachment
          var data = {
            invoice: element.invoiceId,
            DATE_CREATED: created,
            DUE_DATE: due,
            CLIENT_ID: element.client_Id,
            CLIENT_NAME: name,
            workers: element.workers,
            TS_ID: element.timesheetId,
            vat: element.totalVat,
            type:'Invoice'
          };
          // data for invoice email
          var replacements = {
            name: name,
            periodStart: periodStart,
            periodEnd: periodEnd,
            dueDate: due
          };

          var mailOptions = {
            path: path.join(__dirname, '../public/pages/'+element.invoiceId+'.pdf'),
            from: 'my@email.com',
            to : element.client_Id.emailAddress,
            subject : 'New Invoice #'+element.invoiceId+ ' from  Imperial Recruitment',
            attachments: [
              {   // file on disk as an attachment
                filename: 'Invoice.pdf',
                contentType: 'application/pdf',
                path: path.join(__dirname, '../public/pages/'+element.invoiceId+'.pdf'),// stream this file
              },
            ]
          };
          generatePdf(data,html,replacements,mailOptions)
        });
      });
    }
  });

}
function generatePayslips(rows, now, end){
  let workers = [];
  Invoice.find({status: 'Pending'}).populate(['workers.workerId','workers.client_Id']).exec(function(err, invoices) {
    if (err) {
      console.log('err',err);
    } else {
      invoices.forEach(element => {
        workers.push(element.workers);
      });
      var merged = [].concat.apply([], workers);
      rows.forEach((row, i) => {
        // find workers and create payslips
        User.findOne({workerId:row.empCode}).exec(function (err, user){
          if (err) {
            status = 'Failed';
            return res.json(err, 400);
          }
          else{
            const result = merged.filter(itm =>
              itm.workerId.workerId == row.empCode
            );
            var data ={
              workerId:user._id,
              workerIDStr:user.workerId,
              Names:row.name,
              TAX:row.tax,
              NI_EES:row.ni_ees,
              GROSS_TO_DATE:row.gross_toDate,
              TAX_TO_DATE:row.tax_toDate,
              NI_TO_DATE:row.ni_toDate,
              TOTAL_DEDUCTIONS:row.t_deductions,
              NET_PAY:row.net_pay,
              NI_CODE:row.ni_code,
              PAY_DATE:row.pay_date,
              WEEK_NO:row.week_no,
              TAX_CODE:row.tax_code,
              WK1M1:row.wk1m1,
              NI_NUMBER:row.ni_number,
              STUDENT_LOAN:row.student_loan,
              PENSION:row.pension,
              periodStart : now,
              periodEnd : end,
              work: result[0]
            }
            const newSlip = new Payslip(data);
            Payslip.countDocuments({}, function(err, c) {
              newSlip.id = c + (i+1);
              if(newSlip.id < 10)
              newSlip.payslipID = 'PAYSLIP000' + newSlip.id;
              else if(this.id < 100)
              newSlip.payslipID = 'PAYSLIP00' + newSlip.id;
              else if(this.id < 1000)
              newSlip.payslipID = 'PAYSLIP0'+newSlip.id;
              else
              newSlip.payslipID = 'PAYSLIP'+ newSlip.id.toString();
              newSlip.save((err) => {
                if (err) {
                  console.log(err)
                  res.status(500).json(err);
                }
              });
            });

            readHTMLFile((path.join(__dirname, '../public/pages/payslip.php')), async function(err, html) {
              const name = user.surename + ' ' + user.forename ;
              const slipID = 'Payslip'+(i+1);
              // data for payslip attachment
              var data = {
                row: row,
                invoice: slipID,
                type:'Payslip',
                work: result[0]
              };
              // data for payslip email
              var replacements = {
                name: name,
              };

              var mailOptions = {
                path: path.join(__dirname, '../public/pages/'+slipID+'.pdf'),
                from: 'my@email.com',
                to : user.emailAddress,
                subject : 'Your recent payslip is attached',
                attachments: [
                  {   // file on disk as an attachment
                    filename: 'Payslip.pdf',
                    contentType: 'application/pdf',
                    path: path.join(__dirname, '../public/pages/'+slipID+'.pdf')// stream this file
                  },
                ]
              };
              generatePdf(data,html,replacements,mailOptions)
            });
          }
        });
      });
    }
  });
}
function generateAndSendEmail(html,replacements,emailOptions) {

  var template = handlebars.compile(html);
  var htmlToSend = template(replacements);
  var mailOptions = {
    from: emailOptions.from,
    to : emailOptions.to,
    subject : emailOptions.subject,
    html : htmlToSend,
    attachments: emailOptions.attachments
  };
  transport.sendMail(mailOptions, function (error, info) {
    if (error) {
      console.log('error sendMail',error);
    }
    else{
      var filePath = emailOptions.path;
      console.log('success sendMail',filePath);
      fs.unlinkSync(filePath);
      Invoice.updateMany({status: 'Pending'}, {"$set":{"status": 'Complete'}}, {"multi": true}, (err, writeResult) => {});
    }
  });
}
async function generatePdf(data,htmldata,replacements,mailOptions) {
  var fullpath = path.join(__dirname,'../public/pages/attach'+data.type+'.ejs');
  ejs.renderFile(fullpath, { data }, {}, async (err, str) =>  {
    // str => Rendered HTML string
    if (err) {
     console.log(err)
    } else {
      const inv = str;
      // we are using headless mode
      const browser = await puppeteer.launch();
      const page = await browser.newPage()
      // We set the page content as the generated html by handlebars
      await page.setContent(inv)
      // We use pdf function to generate the pdf in the same folder as this file.
      await page.pdf({ path: path.join(__dirname, '../public/pages/'+data.invoice+'.pdf'), format: 'A4' }).then(()=>{
        generateAndSendEmail(htmldata,replacements,mailOptions);
      }, function(error) {
        console.log(error);
      });
      await browser.close();
    }
  })

}

exports.defaultRates = (req, res) => {
  DefaultRates.find({}).exec(function(err, rates) {
    if (err) {
      console.log(err);
    } else {
      res.json(rates);
    }
  })

  // DefaultRates.findOne({}).then(obj => {
  //   const data = {
  //     department: 'Food and Beverage',
  //     role: req.body.data,
  //     payrateU25: 0,
  //     chargerateU25: 0,
  //     payrateO25: 0,
  //     chargerateO25: 0
  //   };
  //   const newObj = new DefaultRates(data);
  //   newObj.save((err) => {
  //     if (err) {
  //       console.log(err)
  //       res.status(500).json(err);
  //     } else {
  //       console.log('added')
  //     }
  //   });
  // });
}

exports.setDefaultRates = (req, res) => {
  console.log('setDefaultRates', req.body)
  req.body.data.forEach(element => {
    DefaultRates.findOne({_id:element._id}, function(err, obj) {
      if (!obj)
        res.status(404).send("data is not found");
      else {
          Object.assign(obj, element);
          // client.statusStr = req.body.str;
          obj.save().then(obj => {
              // res.status(200).json(client);
          })
          .catch(err => {
              // res.status(400).send("Update not possible");
          });
      }

    });
  });
  res.json('Updated')
}

exports.customRates = (req, res) => {
  console.log('customRates req', req.body)
  CustomRates.find({clientId: req.body.id}).exec(function(err, rates) {
    if (err) {
      console.log(err);
    } else {
      res.json(rates);
    }
  })
}

exports.setCustomRates = (req, res) => {
  console.log('setDefaultRates', req.body)
  req.body.data.forEach(element => {
    CustomRates.findOne({_id:element._id}, function(err, obj) {
      if (!obj)
        res.status(404).send("data is not found");
      else {
          Object.assign(obj, element);
          // client.statusStr = req.body.str;
          obj.save().then(obj => {
              // res.status(200).json(client);
          })
          .catch(err => {
              // res.status(400).send("Update not possible");
          });
      }

    });
  });
  res.json('Updated')
}

exports.workerRates = (req, res) => {
  console.log('workerRates req', req.body)
  WorkerRates.find({clientId: req.body.id}).exec(function(err, rates) {
    if (err) {
      console.log(err);
    } else {
      res.json(rates);
    }
  })
}

exports.setWorkerRates = (req, res) => {
  console.log('setWorkerRates', req.body)
  req.body.data.forEach(element => {
    WorkerRates.findOne({_id:element._id}, function(err, obj) {
      if (!obj)
        res.status(404).send("data is not found");
      else {
          Object.assign(obj, element);
          // client.statusStr = req.body.str;
          obj.save().then(obj => {
              // res.status(200).json(client);
          })
          .catch(err => {
              // res.status(400).send("Update not possible");
          });
      }

    });
  });
  res.json('Updated')
}

////////// Not in use by Muzz dev //////////

exports.updateHash = (req, res) => {
    // var role = req.type;
    console.log('updateHash')
        // var clientId = req.clientId;
        // if (role == 0){
    Job.findById(req.body._id, function(err, client) {
        if (!client)
            res.status(404).send("data is not found");
        else {
            client.setPassword(req.body.hash);
            client.save().then(client => {
                    res.status(200).json(client);
                })
                .catch(err => {
                    res.status(400).send("Update not possible");
                });
        }
    });
};
